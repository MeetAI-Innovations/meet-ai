"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stream-io";
exports.ids = ["vendor-chunks/@stream-io"];
exports.modules = {

/***/ "(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stream-io/video-client/dist/index.es.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* binding */ AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   AudioSettingsResponseDefaultDeviceEnum: () => (/* binding */ AudioSettingsResponseDefaultDeviceEnum),\n/* harmony export */   AxiosError: () => (/* reexport safe */ axios__WEBPACK_IMPORTED_MODULE_1__.AxiosError),\n/* harmony export */   BlockListOptionsBehaviorEnum: () => (/* binding */ BlockListOptionsBehaviorEnum),\n/* harmony export */   Browsers: () => (/* binding */ browsers),\n/* harmony export */   Call: () => (/* binding */ Call),\n/* harmony export */   CallState: () => (/* binding */ CallState),\n/* harmony export */   CallType: () => (/* binding */ CallType),\n/* harmony export */   CallTypes: () => (/* binding */ CallTypes),\n/* harmony export */   CallingState: () => (/* binding */ CallingState),\n/* harmony export */   CameraManager: () => (/* binding */ CameraManager),\n/* harmony export */   CameraManagerState: () => (/* binding */ CameraManagerState),\n/* harmony export */   ChannelConfigWithInfoAutomodBehaviorEnum: () => (/* binding */ ChannelConfigWithInfoAutomodBehaviorEnum),\n/* harmony export */   ChannelConfigWithInfoAutomodEnum: () => (/* binding */ ChannelConfigWithInfoAutomodEnum),\n/* harmony export */   ChannelConfigWithInfoBlocklistBehaviorEnum: () => (/* binding */ ChannelConfigWithInfoBlocklistBehaviorEnum),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* binding */ CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DebounceType: () => (/* binding */ DebounceType),\n/* harmony export */   DynascaleManager: () => (/* binding */ DynascaleManager),\n/* harmony export */   ErrorFromResponse: () => (/* binding */ ErrorFromResponse),\n/* harmony export */   InputMediaDeviceManager: () => (/* binding */ InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* binding */ InputMediaDeviceManagerState),\n/* harmony export */   MicrophoneManager: () => (/* binding */ MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* binding */ MicrophoneManagerState),\n/* harmony export */   NoiseCancellationSettingsModeEnum: () => (/* binding */ NoiseCancellationSettingsModeEnum),\n/* harmony export */   OwnCapability: () => (/* binding */ OwnCapability),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* binding */ RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* binding */ RecordSettingsRequestQualityEnum),\n/* harmony export */   RxUtils: () => (/* binding */ rxUtils),\n/* harmony export */   ScreenShareManager: () => (/* binding */ ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* binding */ ScreenShareState),\n/* harmony export */   SfuEvents: () => (/* binding */ events),\n/* harmony export */   SfuModels: () => (/* binding */ models),\n/* harmony export */   SpeakerManager: () => (/* binding */ SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* binding */ SpeakerState),\n/* harmony export */   StreamSfuClient: () => (/* binding */ StreamSfuClient),\n/* harmony export */   StreamVideoClient: () => (/* binding */ StreamVideoClient),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* binding */ StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* binding */ StreamVideoWriteableStateStore),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* binding */ TranscriptionSettingsRequestModeEnum),\n/* harmony export */   TranscriptionSettingsResponseModeEnum: () => (/* binding */ TranscriptionSettingsResponseModeEnum),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* binding */ VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   VideoSettingsResponseCameraFacingEnum: () => (/* binding */ VideoSettingsResponseCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* binding */ ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* binding */ VisibilityState),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* binding */ checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* binding */ combineComparators),\n/* harmony export */   conditional: () => (/* binding */ conditional),\n/* harmony export */   createSoundDetector: () => (/* binding */ createSoundDetector),\n/* harmony export */   defaultSortPreset: () => (/* binding */ defaultSortPreset),\n/* harmony export */   descending: () => (/* binding */ descending),\n/* harmony export */   deviceIds$: () => (/* binding */ deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* binding */ disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* binding */ dominantSpeaker),\n/* harmony export */   getAudioBrowserPermission: () => (/* binding */ getAudioBrowserPermission),\n/* harmony export */   getAudioDevices: () => (/* binding */ getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* binding */ getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* binding */ getAudioStream),\n/* harmony export */   getClientDetails: () => (/* binding */ getClientDetails),\n/* harmony export */   getDeviceInfo: () => (/* binding */ getDeviceInfo),\n/* harmony export */   getLogger: () => (/* binding */ getLogger),\n/* harmony export */   getOSInfo: () => (/* binding */ getOSInfo),\n/* harmony export */   getScreenShareStream: () => (/* binding */ getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* binding */ getSdkInfo),\n/* harmony export */   getVideoBrowserPermission: () => (/* binding */ getVideoBrowserPermission),\n/* harmony export */   getVideoDevices: () => (/* binding */ getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* binding */ getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* binding */ getWebRTCInfo),\n/* harmony export */   hasAudio: () => (/* binding */ hasAudio),\n/* harmony export */   hasScreenShare: () => (/* binding */ hasScreenShare),\n/* harmony export */   hasScreenShareAudio: () => (/* binding */ hasScreenShareAudio),\n/* harmony export */   hasVideo: () => (/* binding */ hasVideo),\n/* harmony export */   isPinned: () => (/* binding */ isPinned),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* binding */ livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* binding */ logLevels),\n/* harmony export */   logToConsole: () => (/* binding */ logToConsole),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   noopComparator: () => (/* binding */ noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* binding */ paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* binding */ pinned),\n/* harmony export */   publishingAudio: () => (/* binding */ publishingAudio),\n/* harmony export */   publishingVideo: () => (/* binding */ publishingVideo),\n/* harmony export */   reactionType: () => (/* binding */ reactionType),\n/* harmony export */   role: () => (/* binding */ role),\n/* harmony export */   screenSharing: () => (/* binding */ screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* binding */ setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setLogger: () => (/* binding */ setLogger),\n/* harmony export */   setOSInfo: () => (/* binding */ setOSInfo),\n/* harmony export */   setSdkInfo: () => (/* binding */ setSdkInfo),\n/* harmony export */   setWebRTCInfo: () => (/* binding */ setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* binding */ speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* binding */ speaking)\n/* harmony export */ });\n/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webrtc-adapter */ \"(ssr)/./node_modules/webrtc-adapter/src/js/adapter_core.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/message-type.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n/* harmony import */ var _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @protobuf-ts/twirp-transport */ \"(ssr)/./node_modules/@protobuf-ts/twirp-transport/build/es2015/twirp-transport.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/merge.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/startWith.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/concatMap.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/pairwise.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/filter.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/debounce.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/timer.js\");\n/* harmony import */ var sdp_transform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sdp-transform */ \"(ssr)/./node_modules/sdp-transform/lib/index.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ua-parser-js */ \"(ssr)/./node_modules/ua-parser-js/src/ua-parser.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! isomorphic-ws */ \"(ssr)/./node_modules/isomorphic-ws/node.js\");\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(isomorphic_ws__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/base64-js/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @export\n */ const AudioSettingsRequestDefaultDeviceEnum = {\n    SPEAKER: \"speaker\",\n    EARPIECE: \"earpiece\"\n};\n/**\n * @export\n */ const AudioSettingsResponseDefaultDeviceEnum = {\n    SPEAKER: \"speaker\",\n    EARPIECE: \"earpiece\"\n};\n/**\n * @export\n */ const BlockListOptionsBehaviorEnum = {\n    FLAG: \"flag\",\n    BLOCK: \"block\",\n    SHADOW_BLOCK: \"shadow_block\"\n};\n/**\n * @export\n */ const ChannelConfigWithInfoAutomodEnum = {\n    DISABLED: \"disabled\",\n    SIMPLE: \"simple\",\n    AI: \"AI\"\n};\n/**\n * @export\n */ const ChannelConfigWithInfoAutomodBehaviorEnum = {\n    FLAG: \"flag\",\n    BLOCK: \"block\",\n    SHADOW_BLOCK: \"shadow_block\"\n};\n/**\n * @export\n */ const ChannelConfigWithInfoBlocklistBehaviorEnum = {\n    FLAG: \"flag\",\n    BLOCK: \"block\",\n    SHADOW_BLOCK: \"shadow_block\"\n};\n/**\n * @export\n */ const CreateDeviceRequestPushProviderEnum = {\n    FIREBASE: \"firebase\",\n    APN: \"apn\",\n    HUAWEI: \"huawei\",\n    XIAOMI: \"xiaomi\"\n};\n/**\n * @export\n */ const NoiseCancellationSettingsModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * All possibility of string to use\n * @export\n */ const OwnCapability = {\n    BLOCK_USERS: \"block-users\",\n    CHANGE_MAX_DURATION: \"change-max-duration\",\n    CREATE_CALL: \"create-call\",\n    CREATE_REACTION: \"create-reaction\",\n    ENABLE_NOISE_CANCELLATION: \"enable-noise-cancellation\",\n    END_CALL: \"end-call\",\n    JOIN_BACKSTAGE: \"join-backstage\",\n    JOIN_CALL: \"join-call\",\n    JOIN_ENDED_CALL: \"join-ended-call\",\n    MUTE_USERS: \"mute-users\",\n    PIN_FOR_EVERYONE: \"pin-for-everyone\",\n    READ_CALL: \"read-call\",\n    REMOVE_CALL_MEMBER: \"remove-call-member\",\n    SCREENSHARE: \"screenshare\",\n    SEND_AUDIO: \"send-audio\",\n    SEND_VIDEO: \"send-video\",\n    START_BROADCAST_CALL: \"start-broadcast-call\",\n    START_RECORD_CALL: \"start-record-call\",\n    START_TRANSCRIPTION_CALL: \"start-transcription-call\",\n    STOP_BROADCAST_CALL: \"stop-broadcast-call\",\n    STOP_RECORD_CALL: \"stop-record-call\",\n    STOP_TRANSCRIPTION_CALL: \"stop-transcription-call\",\n    UPDATE_CALL: \"update-call\",\n    UPDATE_CALL_MEMBER: \"update-call-member\",\n    UPDATE_CALL_PERMISSIONS: \"update-call-permissions\",\n    UPDATE_CALL_SETTINGS: \"update-call-settings\"\n};\n/**\n * @export\n */ const RecordSettingsRequestModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const RecordSettingsRequestQualityEnum = {\n    _360P: \"360p\",\n    _480P: \"480p\",\n    _720P: \"720p\",\n    _1080P: \"1080p\",\n    _1440P: \"1440p\",\n    PORTRAIT_360X640: \"portrait-360x640\",\n    PORTRAIT_480X854: \"portrait-480x854\",\n    PORTRAIT_720X1280: \"portrait-720x1280\",\n    PORTRAIT_1080X1920: \"portrait-1080x1920\",\n    PORTRAIT_1440X2560: \"portrait-1440x2560\"\n};\n/**\n * @export\n */ const TranscriptionSettingsRequestModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const TranscriptionSettingsResponseModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const VideoSettingsRequestCameraFacingEnum = {\n    FRONT: \"front\",\n    BACK: \"back\",\n    EXTERNAL: \"external\"\n};\n/**\n * @export\n */ const VideoSettingsResponseCameraFacingEnum = {\n    FRONT: \"front\",\n    BACK: \"back\",\n    EXTERNAL: \"external\"\n};\nclass ErrorFromResponse extends Error {\n}\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from protobuf enum google.protobuf.NullValue\n */ var NullValue;\n(function(NullValue) {\n    /**\n     * Null value.\n     *\n     * @generated from protobuf enum value: NULL_VALUE = 0;\n     */ NullValue[NullValue[\"NULL_VALUE\"] = 0] = \"NULL_VALUE\";\n})(NullValue || (NullValue = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Struct\", [\n            {\n                no: 1,\n                name: \"fields\",\n                kind: \"map\",\n                K: 9 /*ScalarType.STRING*/ ,\n                V: {\n                    kind: \"message\",\n                    T: ()=>Value\n                }\n            }\n        ]);\n    }\n    /**\n     * Encode `Struct` to JSON object.\n     */ internalJsonWrite(message, options) {\n        let json = {};\n        for (let [k, v] of Object.entries(message.fields)){\n            json[k] = Value.toJson(v);\n        }\n        return json;\n    }\n    /**\n     * Decode `Struct` from JSON object.\n     */ internalJsonRead(json, options, target) {\n        if (!(0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.isJsonObject)(json)) throw new globalThis.Error(\"Unable to parse message \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.typeofJsonValue)(json) + \".\");\n        if (!target) target = this.create();\n        for (let [k, v] of globalThis.Object.entries(json)){\n            target.fields[k] = Value.fromJson(v);\n        }\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.fields = {};\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* map<string, google.protobuf.Value> fields */ 1:\n                    this.binaryReadMap1(message.fields, reader, options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    binaryReadMap1(map, reader, options) {\n        let len = reader.uint32(), end = reader.pos + len, key, val;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case 1:\n                    key = reader.string();\n                    break;\n                case 2:\n                    val = Value.internalBinaryRead(reader, reader.uint32(), options);\n                    break;\n                default:\n                    throw new globalThis.Error(\"unknown map entry field for field google.protobuf.Struct.fields\");\n            }\n        }\n        map[key ?? \"\"] = val ?? Value.create();\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* map<string, google.protobuf.Value> fields = 1; */ for (let k of globalThis.Object.keys(message.fields)){\n            writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork().tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(k);\n            writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork();\n            Value.internalBinaryWrite(message.fields[k], writer, options);\n            writer.join().join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Struct\n */ const Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Value$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Value\", [\n            {\n                no: 1,\n                name: \"null_value\",\n                kind: \"enum\",\n                oneof: \"kind\",\n                T: ()=>[\n                        \"google.protobuf.NullValue\",\n                        NullValue\n                    ]\n            },\n            {\n                no: 2,\n                name: \"number_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 1 /*ScalarType.DOUBLE*/ \n            },\n            {\n                no: 3,\n                name: \"string_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"bool_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 5,\n                name: \"struct_value\",\n                kind: \"message\",\n                oneof: \"kind\",\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: \"list_value\",\n                kind: \"message\",\n                oneof: \"kind\",\n                T: ()=>ListValue\n            }\n        ]);\n    }\n    /**\n     * Encode `Value` to JSON value.\n     */ internalJsonWrite(message, options) {\n        if (message.kind.oneofKind === undefined) throw new globalThis.Error();\n        switch(message.kind.oneofKind){\n            case undefined:\n                throw new globalThis.Error();\n            case \"boolValue\":\n                return message.kind.boolValue;\n            case \"nullValue\":\n                return null;\n            case \"numberValue\":\n                let numberValue = message.kind.numberValue;\n                if (typeof numberValue == \"number\" && !Number.isFinite(numberValue)) throw new globalThis.Error();\n                return numberValue;\n            case \"stringValue\":\n                return message.kind.stringValue;\n            case \"listValue\":\n                let listValueField = this.fields.find((f)=>f.no === 6);\n                if (listValueField?.kind !== \"message\") throw new globalThis.Error();\n                return listValueField.T().toJson(message.kind.listValue);\n            case \"structValue\":\n                let structValueField = this.fields.find((f)=>f.no === 5);\n                if (structValueField?.kind !== \"message\") throw new globalThis.Error();\n                return structValueField.T().toJson(message.kind.structValue);\n        }\n    }\n    /**\n     * Decode `Value` from JSON value.\n     */ internalJsonRead(json, options, target) {\n        if (!target) target = this.create();\n        switch(typeof json){\n            case \"number\":\n                target.kind = {\n                    oneofKind: \"numberValue\",\n                    numberValue: json\n                };\n                break;\n            case \"string\":\n                target.kind = {\n                    oneofKind: \"stringValue\",\n                    stringValue: json\n                };\n                break;\n            case \"boolean\":\n                target.kind = {\n                    oneofKind: \"boolValue\",\n                    boolValue: json\n                };\n                break;\n            case \"object\":\n                if (json === null) {\n                    target.kind = {\n                        oneofKind: \"nullValue\",\n                        nullValue: NullValue.NULL_VALUE\n                    };\n                } else if (globalThis.Array.isArray(json)) {\n                    target.kind = {\n                        oneofKind: \"listValue\",\n                        listValue: ListValue.fromJson(json)\n                    };\n                } else {\n                    target.kind = {\n                        oneofKind: \"structValue\",\n                        structValue: Struct.fromJson(json)\n                    };\n                }\n                break;\n            default:\n                throw new globalThis.Error(\"Unable to parse \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.typeofJsonValue)(json));\n        }\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.kind = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* google.protobuf.NullValue null_value */ 1:\n                    message.kind = {\n                        oneofKind: \"nullValue\",\n                        nullValue: reader.int32()\n                    };\n                    break;\n                case /* double number_value */ 2:\n                    message.kind = {\n                        oneofKind: \"numberValue\",\n                        numberValue: reader.double()\n                    };\n                    break;\n                case /* string string_value */ 3:\n                    message.kind = {\n                        oneofKind: \"stringValue\",\n                        stringValue: reader.string()\n                    };\n                    break;\n                case /* bool bool_value */ 4:\n                    message.kind = {\n                        oneofKind: \"boolValue\",\n                        boolValue: reader.bool()\n                    };\n                    break;\n                case /* google.protobuf.Struct struct_value */ 5:\n                    message.kind = {\n                        oneofKind: \"structValue\",\n                        structValue: Struct.internalBinaryRead(reader, reader.uint32(), options, message.kind.structValue)\n                    };\n                    break;\n                case /* google.protobuf.ListValue list_value */ 6:\n                    message.kind = {\n                        oneofKind: \"listValue\",\n                        listValue: ListValue.internalBinaryRead(reader, reader.uint32(), options, message.kind.listValue)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* google.protobuf.NullValue null_value = 1; */ if (message.kind.oneofKind === \"nullValue\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.kind.nullValue);\n        /* double number_value = 2; */ if (message.kind.oneofKind === \"numberValue\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Bit64).double(message.kind.numberValue);\n        /* string string_value = 3; */ if (message.kind.oneofKind === \"stringValue\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.kind.stringValue);\n        /* bool bool_value = 4; */ if (message.kind.oneofKind === \"boolValue\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.kind.boolValue);\n        /* google.protobuf.Struct struct_value = 5; */ if (message.kind.oneofKind === \"structValue\") Struct.internalBinaryWrite(message.kind.structValue, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.ListValue list_value = 6; */ if (message.kind.oneofKind === \"listValue\") ListValue.internalBinaryWrite(message.kind.listValue, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Value\n */ const Value = new Value$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListValue$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"google.protobuf.ListValue\", [\n            {\n                no: 1,\n                name: \"values\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Value\n            }\n        ]);\n    }\n    /**\n     * Encode `ListValue` to JSON array.\n     */ internalJsonWrite(message, options) {\n        return message.values.map((v)=>Value.toJson(v));\n    }\n    /**\n     * Decode `ListValue` from JSON array.\n     */ internalJsonRead(json, options, target) {\n        if (!globalThis.Array.isArray(json)) throw new globalThis.Error(\"Unable to parse \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.typeofJsonValue)(json));\n        if (!target) target = this.create();\n        let values = json.map((v)=>Value.fromJson(v));\n        target.values.push(...values);\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.values = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated google.protobuf.Value values */ 1:\n                    message.values.push(Value.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated google.protobuf.Value values = 1; */ for(let i = 0; i < message.values.length; i++)Value.internalBinaryWrite(message.values[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.ListValue\n */ const ListValue = new ListValue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Timestamp\", [\n            {\n                no: 1,\n                name: \"seconds\",\n                kind: \"scalar\",\n                T: 3 /*ScalarType.INT64*/ \n            },\n            {\n                no: 2,\n                name: \"nanos\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    /**\n     * Creates a new `Timestamp` for the current time.\n     */ now() {\n        const msg = this.create();\n        const ms = Date.now();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript Date.\n     */ toDate(message) {\n        return new Date(_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.PbLong.from(message.seconds).toNumber() * 1000 + Math.ceil(message.nanos / 1000000));\n    }\n    /**\n     * Converts a JavaScript Date to a `Timestamp`.\n     */ fromDate(date) {\n        const msg = this.create();\n        const ms = date.getTime();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonWrite(message, options) {\n        let ms = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.PbLong.from(message.seconds).toNumber() * 1000;\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) throw new Error(\"Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\");\n        if (message.nanos < 0) throw new Error(\"Unable to encode invalid Timestamp to JSON. Nanos must not be negative.\");\n        let z = \"Z\";\n        if (message.nanos > 0) {\n            let nanosStr = (message.nanos + 1000000000).toString().substring(1);\n            if (nanosStr.substring(3) === \"000000\") z = \".\" + nanosStr.substring(0, 3) + \"Z\";\n            else if (nanosStr.substring(6) === \"000\") z = \".\" + nanosStr.substring(0, 6) + \"Z\";\n            else z = \".\" + nanosStr + \"Z\";\n        }\n        return new Date(ms).toISOString().replace(\".000Z\", z);\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonRead(json, options, target) {\n        if (typeof json !== \"string\") throw new Error(\"Unable to parse Timestamp from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.typeofJsonValue)(json) + \".\");\n        let matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n        if (!matches) throw new Error(\"Unable to parse Timestamp from JSON. Invalid format.\");\n        let ms = Date.parse(matches[1] + \"-\" + matches[2] + \"-\" + matches[3] + \"T\" + matches[4] + \":\" + matches[5] + \":\" + matches[6] + (matches[8] ? matches[8] : \"Z\"));\n        if (Number.isNaN(ms)) throw new Error(\"Unable to parse Timestamp from JSON. Invalid value.\");\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) throw new globalThis.Error(\"Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\");\n        if (!target) target = this.create();\n        target.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.PbLong.from(ms / 1000).toString();\n        target.nanos = 0;\n        if (matches[7]) target.nanos = parseInt(\"1\" + matches[7] + \"0\".repeat(9 - matches[7].length)) - 1000000000;\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.seconds = \"0\";\n        message.nanos = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* int64 seconds */ 1:\n                    message.seconds = reader.int64().toString();\n                    break;\n                case /* int32 nanos */ 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* int64 seconds = 1; */ if (message.seconds !== \"0\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int64(message.seconds);\n        /* int32 nanos = 2; */ if (message.nanos !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.nanos);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Timestamp\n */ const Timestamp = new Timestamp$Type();\n/**\n * @generated from protobuf enum stream.video.sfu.models.PeerType\n */ var PeerType;\n(function(PeerType) {\n    /**\n     * todo fix me (marcelo)\n     *\n     * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;\n     */ PeerType[PeerType[\"PUBLISHER_UNSPECIFIED\"] = 0] = \"PUBLISHER_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;\n     */ PeerType[PeerType[\"SUBSCRIBER\"] = 1] = \"SUBSCRIBER\";\n})(PeerType || (PeerType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality\n */ var ConnectionQuality;\n(function(ConnectionQuality) {\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;\n     */ ConnectionQuality[ConnectionQuality[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 1;\n     */ ConnectionQuality[ConnectionQuality[\"POOR\"] = 1] = \"POOR\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 2;\n     */ ConnectionQuality[ConnectionQuality[\"GOOD\"] = 2] = \"GOOD\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_EXCELLENT = 3;\n     */ ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 3] = \"EXCELLENT\";\n})(ConnectionQuality || (ConnectionQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.VideoQuality\n */ var VideoQuality;\n(function(VideoQuality) {\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 0;\n     */ VideoQuality[VideoQuality[\"LOW_UNSPECIFIED\"] = 0] = \"LOW_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_MID = 1;\n     */ VideoQuality[VideoQuality[\"MID\"] = 1] = \"MID\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 2;\n     */ VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_OFF = 3;\n     */ VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n})(VideoQuality || (VideoQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackType\n */ var TrackType;\n(function(TrackType) {\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;\n     */ TrackType[TrackType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;\n     */ TrackType[TrackType[\"AUDIO\"] = 1] = \"AUDIO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;\n     */ TrackType[TrackType[\"VIDEO\"] = 2] = \"VIDEO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE = 3;\n     */ TrackType[TrackType[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE_AUDIO = 4;\n     */ TrackType[TrackType[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n})(TrackType || (TrackType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ErrorCode\n */ var ErrorCode;\n(function(ErrorCode) {\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;\n     */ ErrorCode[ErrorCode[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_NOT_FOUND = 100;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_NOT_FOUND\"] = 100] = \"PUBLISH_TRACK_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACKS_MISMATCH = 101;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACKS_MISMATCH\"] = 101] = \"PUBLISH_TRACKS_MISMATCH\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER = 102;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_OUT_OF_ORDER\"] = 102] = \"PUBLISH_TRACK_OUT_OF_ORDER\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\"] = 103] = \"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_LIVE_ENDED = 104;\n     */ ErrorCode[ErrorCode[\"LIVE_ENDED\"] = 104] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_NOT_FOUND = 200;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_NOT_FOUND\"] = 200] = \"PARTICIPANT_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING_OUT = 201;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING_OUT\"] = 201] = \"PARTICIPANT_MIGRATING_OUT\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATION_FAILED = 202;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATION_FAILED\"] = 202] = \"PARTICIPANT_MIGRATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING = 203;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING\"] = 203] = \"PARTICIPANT_MIGRATING\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_RECONNECT_FAILED = 204;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_RECONNECT_FAILED\"] = 204] = \"PARTICIPANT_RECONNECT_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\"] = 205] = \"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_CALL_NOT_FOUND = 300;\n     */ ErrorCode[ErrorCode[\"CALL_NOT_FOUND\"] = 300] = \"CALL_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_REQUEST_VALIDATION_FAILED = 400;\n     */ ErrorCode[ErrorCode[\"REQUEST_VALIDATION_FAILED\"] = 400] = \"REQUEST_VALIDATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNAUTHENTICATED = 401;\n     */ ErrorCode[ErrorCode[\"UNAUTHENTICATED\"] = 401] = \"UNAUTHENTICATED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PERMISSION_DENIED = 403;\n     */ ErrorCode[ErrorCode[\"PERMISSION_DENIED\"] = 403] = \"PERMISSION_DENIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_TOO_MANY_REQUESTS = 429;\n     */ ErrorCode[ErrorCode[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_INTERNAL_SERVER_ERROR = 500;\n     */ ErrorCode[ErrorCode[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_SHUTTING_DOWN = 600;\n     */ ErrorCode[ErrorCode[\"SFU_SHUTTING_DOWN\"] = 600] = \"SFU_SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_FULL = 700;\n     */ ErrorCode[ErrorCode[\"SFU_FULL\"] = 700] = \"SFU_FULL\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.SdkType\n */ var SdkType;\n(function(SdkType) {\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNSPECIFIED = 0;\n     */ SdkType[SdkType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT = 1;\n     */ SdkType[SdkType[\"REACT\"] = 1] = \"REACT\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANGULAR = 2;\n     */ SdkType[SdkType[\"ANGULAR\"] = 2] = \"ANGULAR\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANDROID = 3;\n     */ SdkType[SdkType[\"ANDROID\"] = 3] = \"ANDROID\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_IOS = 4;\n     */ SdkType[SdkType[\"IOS\"] = 4] = \"IOS\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_FLUTTER = 5;\n     */ SdkType[SdkType[\"FLUTTER\"] = 5] = \"FLUTTER\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT_NATIVE = 6;\n     */ SdkType[SdkType[\"REACT_NATIVE\"] = 6] = \"REACT_NATIVE\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNITY = 7;\n     */ SdkType[SdkType[\"UNITY\"] = 7] = \"UNITY\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_GO = 8;\n     */ SdkType[SdkType[\"GO\"] = 8] = \"GO\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_PLAIN_JAVASCRIPT = 9;\n     */ SdkType[SdkType[\"PLAIN_JAVASCRIPT\"] = 9] = \"PLAIN_JAVASCRIPT\";\n})(SdkType || (SdkType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackUnpublishReason\n */ var TrackUnpublishReason;\n(function(TrackUnpublishReason) {\n    /**\n     * Default value which is used when the specific reason\n     * for muting the track is not known.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_UNSPECIFIED = 0;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Represents user muting their tracks.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_USER_MUTED = 1;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"USER_MUTED\"] = 1] = \"USER_MUTED\";\n    /**\n     * Represents muting the track because the permission to\n     * publish the track has been revoked.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED = 2;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"PERMISSION_REVOKED\"] = 2] = \"PERMISSION_REVOKED\";\n    /**\n     * Represents muting the track due to moderation actions.\n     * This is different from permission revoked because the\n     * participant can unmute themselves here whereas in case\n     * of \"permission revoke\" it is not possible until the\n     * call permissions are updated.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_MODERATION = 3;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"MODERATION\"] = 3] = \"MODERATION\";\n})(TrackUnpublishReason || (TrackUnpublishReason = {}));\n/**\n * GoAwayReason represents the reason for the SFU to\n * disconnect the client.\n *\n * @generated from protobuf enum stream.video.sfu.models.GoAwayReason\n */ var GoAwayReason;\n(function(GoAwayReason) {\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_UNSPECIFIED = 0;\n     */ GoAwayReason[GoAwayReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_SHUTTING_DOWN = 1;\n     */ GoAwayReason[GoAwayReason[\"SHUTTING_DOWN\"] = 1] = \"SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_REBALANCE = 2;\n     */ GoAwayReason[GoAwayReason[\"REBALANCE\"] = 2] = \"REBALANCE\";\n})(GoAwayReason || (GoAwayReason = {}));\n/**\n * CallEndedReason represents the reason for the call to end.\n *\n * @generated from protobuf enum stream.video.sfu.models.CallEndedReason\n */ var CallEndedReason;\n(function(CallEndedReason) {\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_UNSPECIFIED = 0;\n     */ CallEndedReason[CallEndedReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_ENDED = 1;\n     */ CallEndedReason[CallEndedReason[\"ENDED\"] = 1] = \"ENDED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_LIVE_ENDED = 2;\n     */ CallEndedReason[CallEndedReason[\"LIVE_ENDED\"] = 2] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_KICKED = 3;\n     */ CallEndedReason[CallEndedReason[\"KICKED\"] = 3] = \"KICKED\";\n})(CallEndedReason || (CallEndedReason = {}));\n/**\n * WebsocketReconnectStrategy defines the ws strategies available for handling reconnections.\n *\n * @generated from protobuf enum stream.video.sfu.models.WebsocketReconnectStrategy\n */ var WebsocketReconnectStrategy;\n(function(WebsocketReconnectStrategy) {\n    /**\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED = 0;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Sent after reaching the maximum reconnection attempts, leading to permanent disconnect.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT = 1;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    /**\n     * SDK should maintaining existing publisher/subscriber pc instances\n     * and establish a new WebSocket connection.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_FAST = 2;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"FAST\"] = 2] = \"FAST\";\n    /**\n     * SDK should drop existing pc instances and creates a fresh WebSocket connection,\n     * ensuring a clean state for the reconnection.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_CLEAN = 3;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"CLEAN\"] = 3] = \"CLEAN\";\n    /**\n     * SDK should obtain new credentials from the coordinator, drops existing pc instances, and initializes\n     * a completely new WebSocket connection, ensuring a comprehensive reset.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_FULL = 4;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"FULL\"] = 4] = \"FULL\";\n    /**\n     * SDK should migrate to a new SFU instance\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_MIGRATE = 5;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"MIGRATE\"] = 5] = \"MIGRATE\";\n})(WebsocketReconnectStrategy || (WebsocketReconnectStrategy = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.CallState\", [\n            {\n                no: 1,\n                name: \"participants\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Participant\n            },\n            {\n                no: 2,\n                name: \"started_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 3,\n                name: \"participant_count\",\n                kind: \"message\",\n                T: ()=>ParticipantCount\n            },\n            {\n                no: 4,\n                name: \"pins\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.participants = [];\n        message.pins = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.models.Participant participants */ 1:\n                    message.participants.push(Participant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* google.protobuf.Timestamp started_at */ 2:\n                    message.startedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startedAt);\n                    break;\n                case /* stream.video.sfu.models.ParticipantCount participant_count */ 3:\n                    message.participantCount = ParticipantCount.internalBinaryRead(reader, reader.uint32(), options, message.participantCount);\n                    break;\n                case /* repeated stream.video.sfu.models.Pin pins */ 4:\n                    message.pins.push(Pin.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.models.Participant participants = 1; */ for(let i = 0; i < message.participants.length; i++)Participant.internalBinaryWrite(message.participants[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.Timestamp started_at = 2; */ if (message.startedAt) Timestamp.internalBinaryWrite(message.startedAt, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.ParticipantCount participant_count = 3; */ if (message.participantCount) ParticipantCount.internalBinaryWrite(message.participantCount, writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.models.Pin pins = 4; */ for(let i = 0; i < message.pins.length; i++)Pin.internalBinaryWrite(message.pins[i], writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallState\n */ const CallState$1 = new CallState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantCount$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ParticipantCount\", [\n            {\n                no: 1,\n                name: \"total\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"anonymous\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.total = 0;\n        message.anonymous = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint32 total */ 1:\n                    message.total = reader.uint32();\n                    break;\n                case /* uint32 anonymous */ 2:\n                    message.anonymous = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint32 total = 1; */ if (message.total !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).uint32(message.total);\n        /* uint32 anonymous = 2; */ if (message.anonymous !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).uint32(message.anonymous);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ParticipantCount\n */ const ParticipantCount = new ParticipantCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pin$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Pin\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Pin\n */ const Pin = new Pin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Participant$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Participant\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"published_tracks\",\n                kind: \"enum\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"joined_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 5,\n                name: \"track_lookup_prefix\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"connection_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ConnectionQuality\",\n                        ConnectionQuality,\n                        \"CONNECTION_QUALITY_\"\n                    ]\n            },\n            {\n                no: 7,\n                name: \"is_speaking\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: \"is_dominant_speaker\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: \"audio_level\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 10,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 11,\n                name: \"image\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 12,\n                name: \"custom\",\n                kind: \"message\",\n                T: ()=>Struct\n            },\n            {\n                no: 13,\n                name: \"roles\",\n                kind: \"scalar\",\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.publishedTracks = [];\n        message.trackLookupPrefix = \"\";\n        message.connectionQuality = 0;\n        message.isSpeaking = false;\n        message.isDominantSpeaker = false;\n        message.audioLevel = 0;\n        message.name = \"\";\n        message.image = \"\";\n        message.roles = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.models.TrackType published_tracks */ 3:\n                    if (wireType === _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited) for(let e = reader.int32() + reader.pos; reader.pos < e;)message.publishedTracks.push(reader.int32());\n                    else message.publishedTracks.push(reader.int32());\n                    break;\n                case /* google.protobuf.Timestamp joined_at */ 4:\n                    message.joinedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.joinedAt);\n                    break;\n                case /* string track_lookup_prefix */ 5:\n                    message.trackLookupPrefix = reader.string();\n                    break;\n                case /* stream.video.sfu.models.ConnectionQuality connection_quality */ 6:\n                    message.connectionQuality = reader.int32();\n                    break;\n                case /* bool is_speaking */ 7:\n                    message.isSpeaking = reader.bool();\n                    break;\n                case /* bool is_dominant_speaker */ 8:\n                    message.isDominantSpeaker = reader.bool();\n                    break;\n                case /* float audio_level */ 9:\n                    message.audioLevel = reader.float();\n                    break;\n                case /* string name */ 10:\n                    message.name = reader.string();\n                    break;\n                case /* string image */ 11:\n                    message.image = reader.string();\n                    break;\n                case /* google.protobuf.Struct custom */ 12:\n                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);\n                    break;\n                case /* repeated string roles */ 13:\n                    message.roles.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.models.TrackType published_tracks = 3; */ if (message.publishedTracks.length) {\n            writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork();\n            for(let i = 0; i < message.publishedTracks.length; i++)writer.int32(message.publishedTracks[i]);\n            writer.join();\n        }\n        /* google.protobuf.Timestamp joined_at = 4; */ if (message.joinedAt) Timestamp.internalBinaryWrite(message.joinedAt, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* string track_lookup_prefix = 5; */ if (message.trackLookupPrefix !== \"\") writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.trackLookupPrefix);\n        /* stream.video.sfu.models.ConnectionQuality connection_quality = 6; */ if (message.connectionQuality !== 0) writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.connectionQuality);\n        /* bool is_speaking = 7; */ if (message.isSpeaking !== false) writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.isSpeaking);\n        /* bool is_dominant_speaker = 8; */ if (message.isDominantSpeaker !== false) writer.tag(8, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.isDominantSpeaker);\n        /* float audio_level = 9; */ if (message.audioLevel !== 0) writer.tag(9, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Bit32).float(message.audioLevel);\n        /* string name = 10; */ if (message.name !== \"\") writer.tag(10, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.name);\n        /* string image = 11; */ if (message.image !== \"\") writer.tag(11, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.image);\n        /* google.protobuf.Struct custom = 12; */ if (message.custom) Struct.internalBinaryWrite(message.custom, writer.tag(12, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated string roles = 13; */ for(let i = 0; i < message.roles.length; i++)writer.tag(13, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.roles[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Participant\n */ const Participant = new Participant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StreamQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.StreamQuality\", [\n            {\n                no: 1,\n                name: \"video_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.VideoQuality\",\n                        VideoQuality,\n                        \"VIDEO_QUALITY_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.videoQuality = 0;\n        message.userId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.VideoQuality video_quality */ 1:\n                    message.videoQuality = reader.int32();\n                    break;\n                case /* string user_id */ 2:\n                    message.userId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.VideoQuality video_quality = 1; */ if (message.videoQuality !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.videoQuality);\n        /* string user_id = 2; */ if (message.userId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.userId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality\n */ const StreamQuality = new StreamQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoDimension$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.VideoDimension\", [\n            {\n                no: 1,\n                name: \"width\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"height\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.width = 0;\n        message.height = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint32 width */ 1:\n                    message.width = reader.uint32();\n                    break;\n                case /* uint32 height */ 2:\n                    message.height = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint32 width = 1; */ if (message.width !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).uint32(message.width);\n        /* uint32 height = 2; */ if (message.height !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).uint32(message.height);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension\n */ const VideoDimension = new VideoDimension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.VideoLayer\", [\n            {\n                no: 1,\n                name: \"rid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"video_dimension\",\n                kind: \"message\",\n                T: ()=>VideoDimension\n            },\n            {\n                no: 4,\n                name: \"bitrate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: \"fps\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: \"quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.VideoQuality\",\n                        VideoQuality,\n                        \"VIDEO_QUALITY_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.rid = \"\";\n        message.bitrate = 0;\n        message.fps = 0;\n        message.quality = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string rid */ 1:\n                    message.rid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.VideoDimension video_dimension */ 2:\n                    message.videoDimension = VideoDimension.internalBinaryRead(reader, reader.uint32(), options, message.videoDimension);\n                    break;\n                case /* uint32 bitrate */ 4:\n                    message.bitrate = reader.uint32();\n                    break;\n                case /* uint32 fps */ 5:\n                    message.fps = reader.uint32();\n                    break;\n                case /* stream.video.sfu.models.VideoQuality quality */ 6:\n                    message.quality = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string rid = 1; */ if (message.rid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.rid);\n        /* stream.video.sfu.models.VideoDimension video_dimension = 2; */ if (message.videoDimension) VideoDimension.internalBinaryWrite(message.videoDimension, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* uint32 bitrate = 4; */ if (message.bitrate !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).uint32(message.bitrate);\n        /* uint32 fps = 5; */ if (message.fps !== 0) writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).uint32(message.fps);\n        /* stream.video.sfu.models.VideoQuality quality = 6; */ if (message.quality !== 0) writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.quality);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer\n */ const VideoLayer = new VideoLayer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Codec$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Codec\", [\n            {\n                no: 1,\n                name: \"payload_type\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"fmtp_line\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"clock_rate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: \"encoding_parameters\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"feedbacks\",\n                kind: \"scalar\",\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.payloadType = 0;\n        message.name = \"\";\n        message.fmtpLine = \"\";\n        message.clockRate = 0;\n        message.encodingParameters = \"\";\n        message.feedbacks = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint32 payload_type */ 1:\n                    message.payloadType = reader.uint32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string fmtp_line */ 3:\n                    message.fmtpLine = reader.string();\n                    break;\n                case /* uint32 clock_rate */ 4:\n                    message.clockRate = reader.uint32();\n                    break;\n                case /* string encoding_parameters */ 5:\n                    message.encodingParameters = reader.string();\n                    break;\n                case /* repeated string feedbacks */ 6:\n                    message.feedbacks.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint32 payload_type = 1; */ if (message.payloadType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).uint32(message.payloadType);\n        /* string name = 2; */ if (message.name !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.name);\n        /* string fmtp_line = 3; */ if (message.fmtpLine !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.fmtpLine);\n        /* uint32 clock_rate = 4; */ if (message.clockRate !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).uint32(message.clockRate);\n        /* string encoding_parameters = 5; */ if (message.encodingParameters !== \"\") writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.encodingParameters);\n        /* repeated string feedbacks = 6; */ for(let i = 0; i < message.feedbacks.length; i++)writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.feedbacks[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Codec\n */ const Codec = new Codec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet ICETrickle$Type$1 = class ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ICETrickle\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"ice_candidate\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        message.iceCandidate = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                case /* string ice_candidate */ 2:\n                    message.iceCandidate = reader.string();\n                    break;\n                case /* string session_id */ 3:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.peerType);\n        /* string ice_candidate = 2; */ if (message.iceCandidate !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.iceCandidate);\n        /* string session_id = 3; */ if (message.sessionId !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle\n */ const ICETrickle$1 = new ICETrickle$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.TrackInfo\", [\n            {\n                no: 1,\n                name: \"track_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 5,\n                name: \"layers\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayer\n            },\n            {\n                no: 6,\n                name: \"mid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: \"dtx\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: \"stereo\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: \"red\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.trackId = \"\";\n        message.trackType = 0;\n        message.layers = [];\n        message.mid = \"\";\n        message.dtx = false;\n        message.stereo = false;\n        message.red = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string track_id */ 1:\n                    message.trackId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType track_type */ 2:\n                    message.trackType = reader.int32();\n                    break;\n                case /* repeated stream.video.sfu.models.VideoLayer layers */ 5:\n                    message.layers.push(VideoLayer.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* string mid */ 6:\n                    message.mid = reader.string();\n                    break;\n                case /* bool dtx */ 7:\n                    message.dtx = reader.bool();\n                    break;\n                case /* bool stereo */ 8:\n                    message.stereo = reader.bool();\n                    break;\n                case /* bool red */ 9:\n                    message.red = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string track_id = 1; */ if (message.trackId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.trackId);\n        /* stream.video.sfu.models.TrackType track_type = 2; */ if (message.trackType !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.trackType);\n        /* repeated stream.video.sfu.models.VideoLayer layers = 5; */ for(let i = 0; i < message.layers.length; i++)VideoLayer.internalBinaryWrite(message.layers[i], writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* string mid = 6; */ if (message.mid !== \"\") writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.mid);\n        /* bool dtx = 7; */ if (message.dtx !== false) writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.dtx);\n        /* bool stereo = 8; */ if (message.stereo !== false) writer.tag(8, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.stereo);\n        /* bool red = 9; */ if (message.red !== false) writer.tag(9, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.red);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo\n */ const TrackInfo = new TrackInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Call$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Call\", [\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"created_by_user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"host_user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: \"custom\",\n                kind: \"message\",\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: \"created_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 7,\n                name: \"updated_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.type = \"\";\n        message.id = \"\";\n        message.createdByUserId = \"\";\n        message.hostUserId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string type */ 1:\n                    message.type = reader.string();\n                    break;\n                case /* string id */ 2:\n                    message.id = reader.string();\n                    break;\n                case /* string created_by_user_id */ 3:\n                    message.createdByUserId = reader.string();\n                    break;\n                case /* string host_user_id */ 4:\n                    message.hostUserId = reader.string();\n                    break;\n                case /* google.protobuf.Struct custom */ 5:\n                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);\n                    break;\n                case /* google.protobuf.Timestamp created_at */ 6:\n                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);\n                    break;\n                case /* google.protobuf.Timestamp updated_at */ 7:\n                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string type = 1; */ if (message.type !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.type);\n        /* string id = 2; */ if (message.id !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.id);\n        /* string created_by_user_id = 3; */ if (message.createdByUserId !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.createdByUserId);\n        /* string host_user_id = 4; */ if (message.hostUserId !== \"\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.hostUserId);\n        /* google.protobuf.Struct custom = 5; */ if (message.custom) Struct.internalBinaryWrite(message.custom, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.Timestamp created_at = 6; */ if (message.createdAt) Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.Timestamp updated_at = 7; */ if (message.updatedAt) Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Call\n */ const Call$1 = new Call$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet Error$Type$1 = class Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Error\", [\n            {\n                no: 1,\n                name: \"code\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ErrorCode\",\n                        ErrorCode,\n                        \"ERROR_CODE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"message\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"should_retry\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.code = 0;\n        message.message = \"\";\n        message.shouldRetry = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.ErrorCode code */ 1:\n                    message.code = reader.int32();\n                    break;\n                case /* string message */ 2:\n                    message.message = reader.string();\n                    break;\n                case /* bool should_retry */ 3:\n                    message.shouldRetry = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.ErrorCode code = 1; */ if (message.code !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.code);\n        /* string message = 2; */ if (message.message !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.message);\n        /* bool should_retry = 3; */ if (message.shouldRetry !== false) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.shouldRetry);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Error\n */ const Error$2 = new Error$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ClientDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ClientDetails\", [\n            {\n                no: 1,\n                name: \"sdk\",\n                kind: \"message\",\n                T: ()=>Sdk\n            },\n            {\n                no: 2,\n                name: \"os\",\n                kind: \"message\",\n                T: ()=>OS\n            },\n            {\n                no: 3,\n                name: \"browser\",\n                kind: \"message\",\n                T: ()=>Browser\n            },\n            {\n                no: 4,\n                name: \"device\",\n                kind: \"message\",\n                T: ()=>Device\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Sdk sdk */ 1:\n                    message.sdk = Sdk.internalBinaryRead(reader, reader.uint32(), options, message.sdk);\n                    break;\n                case /* stream.video.sfu.models.OS os */ 2:\n                    message.os = OS.internalBinaryRead(reader, reader.uint32(), options, message.os);\n                    break;\n                case /* stream.video.sfu.models.Browser browser */ 3:\n                    message.browser = Browser.internalBinaryRead(reader, reader.uint32(), options, message.browser);\n                    break;\n                case /* stream.video.sfu.models.Device device */ 4:\n                    message.device = Device.internalBinaryRead(reader, reader.uint32(), options, message.device);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Sdk sdk = 1; */ if (message.sdk) Sdk.internalBinaryWrite(message.sdk, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.OS os = 2; */ if (message.os) OS.internalBinaryWrite(message.os, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Browser browser = 3; */ if (message.browser) Browser.internalBinaryWrite(message.browser, writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Device device = 4; */ if (message.device) Device.internalBinaryWrite(message.device, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ClientDetails\n */ const ClientDetails = new ClientDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sdk$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Sdk\", [\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.SdkType\",\n                        SdkType,\n                        \"SDK_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"major\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"minor\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"patch\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.type = 0;\n        message.major = \"\";\n        message.minor = \"\";\n        message.patch = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.SdkType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* string major */ 2:\n                    message.major = reader.string();\n                    break;\n                case /* string minor */ 3:\n                    message.minor = reader.string();\n                    break;\n                case /* string patch */ 4:\n                    message.patch = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.SdkType type = 1; */ if (message.type !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.type);\n        /* string major = 2; */ if (message.major !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.major);\n        /* string minor = 3; */ if (message.minor !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.minor);\n        /* string patch = 4; */ if (message.patch !== \"\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.patch);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Sdk\n */ const Sdk = new Sdk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OS$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.OS\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"architecture\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.version = \"\";\n        message.architecture = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* string version */ 2:\n                    message.version = reader.string();\n                    break;\n                case /* string architecture */ 3:\n                    message.architecture = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.name);\n        /* string version = 2; */ if (message.version !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.version);\n        /* string architecture = 3; */ if (message.architecture !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.architecture);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.OS\n */ const OS = new OS$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Browser$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Browser\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.version = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* string version */ 2:\n                    message.version = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.name);\n        /* string version = 2; */ if (message.version !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.version);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Browser\n */ const Browser = new Browser$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Device$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Device\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.version = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* string version */ 2:\n                    message.version = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.name);\n        /* string version = 2; */ if (message.version !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.version);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Device\n */ const Device = new Device$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrants$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.CallGrants\", [\n            {\n                no: 1,\n                name: \"can_publish_audio\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: \"can_publish_video\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: \"can_screenshare\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.canPublishAudio = false;\n        message.canPublishVideo = false;\n        message.canScreenshare = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool can_publish_audio */ 1:\n                    message.canPublishAudio = reader.bool();\n                    break;\n                case /* bool can_publish_video */ 2:\n                    message.canPublishVideo = reader.bool();\n                    break;\n                case /* bool can_screenshare */ 3:\n                    message.canScreenshare = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool can_publish_audio = 1; */ if (message.canPublishAudio !== false) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.canPublishAudio);\n        /* bool can_publish_video = 2; */ if (message.canPublishVideo !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.canPublishVideo);\n        /* bool can_screenshare = 3; */ if (message.canScreenshare !== false) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.canScreenshare);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallGrants\n */ const CallGrants = new CallGrants$Type();\nvar models = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Browser: Browser,\n    Call: Call$1,\n    get CallEndedReason () {\n        return CallEndedReason;\n    },\n    CallGrants: CallGrants,\n    CallState: CallState$1,\n    ClientDetails: ClientDetails,\n    Codec: Codec,\n    get ConnectionQuality () {\n        return ConnectionQuality;\n    },\n    Device: Device,\n    Error: Error$2,\n    get ErrorCode () {\n        return ErrorCode;\n    },\n    get GoAwayReason () {\n        return GoAwayReason;\n    },\n    ICETrickle: ICETrickle$1,\n    OS: OS,\n    Participant: Participant,\n    ParticipantCount: ParticipantCount,\n    get PeerType () {\n        return PeerType;\n    },\n    Pin: Pin,\n    Sdk: Sdk,\n    get SdkType () {\n        return SdkType;\n    },\n    StreamQuality: StreamQuality,\n    TrackInfo: TrackInfo,\n    get TrackType () {\n        return TrackType;\n    },\n    get TrackUnpublishReason () {\n        return TrackUnpublishReason;\n    },\n    VideoDimension: VideoDimension,\n    VideoLayer: VideoLayer,\n    get VideoQuality () {\n        return VideoQuality;\n    },\n    get WebsocketReconnectStrategy () {\n        return WebsocketReconnectStrategy;\n    }\n});\n/* eslint-disable */ // @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.StartNoiseCancellationRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest\n */ const StartNoiseCancellationRequest = new StartNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.StartNoiseCancellationResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 1:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 1; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse\n */ const StartNoiseCancellationResponse = new StartNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.StopNoiseCancellationRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest\n */ const StopNoiseCancellationRequest = new StopNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.StopNoiseCancellationResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 1:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 1; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse\n */ const StopNoiseCancellationResponse = new StopNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendStatsRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"subscriber_stats\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"publisher_stats\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"webrtc_version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: \"sdk\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"sdk_version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.subscriberStats = \"\";\n        message.publisherStats = \"\";\n        message.webrtcVersion = \"\";\n        message.sdk = \"\";\n        message.sdkVersion = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                case /* string subscriber_stats */ 2:\n                    message.subscriberStats = reader.string();\n                    break;\n                case /* string publisher_stats */ 3:\n                    message.publisherStats = reader.string();\n                    break;\n                case /* string webrtc_version */ 4:\n                    message.webrtcVersion = reader.string();\n                    break;\n                case /* string sdk */ 5:\n                    message.sdk = reader.string();\n                    break;\n                case /* string sdk_version */ 6:\n                    message.sdkVersion = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* string subscriber_stats = 2; */ if (message.subscriberStats !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.subscriberStats);\n        /* string publisher_stats = 3; */ if (message.publisherStats !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.publisherStats);\n        /* string webrtc_version = 4; */ if (message.webrtcVersion !== \"\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.webrtcVersion);\n        /* string sdk = 5; */ if (message.sdk !== \"\") writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sdk);\n        /* string sdk_version = 6; */ if (message.sdkVersion !== \"\") writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sdkVersion);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest\n */ const SendStatsRequest = new SendStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendStatsResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 1:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 1; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse\n */ const SendStatsResponse = new SendStatsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICERestartRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.peerType = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.PeerType peer_type */ 2:\n                    message.peerType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.PeerType peer_type = 2; */ if (message.peerType !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.peerType);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest\n */ const ICERestartRequest = new ICERestartRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICERestartResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 1:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 1; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse\n */ const ICERestartResponse = new ICERestartResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateMuteStatesRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"mute_states\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackMuteState\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.muteStates = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.signal.TrackMuteState mute_states */ 3:\n                    message.muteStates.push(TrackMuteState.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.signal.TrackMuteState mute_states = 3; */ for(let i = 0; i < message.muteStates.length; i++)TrackMuteState.internalBinaryWrite(message.muteStates[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */ const UpdateMuteStatesRequest = new UpdateMuteStatesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateMuteStatesResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */ const UpdateMuteStatesResponse = new UpdateMuteStatesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackMuteState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.TrackMuteState\", [\n            {\n                no: 1,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.trackType = 0;\n        message.muted = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.TrackType track_type */ 1:\n                    message.trackType = reader.int32();\n                    break;\n                case /* bool muted */ 2:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.TrackType track_type = 1; */ if (message.trackType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.trackType);\n        /* bool muted = 2; */ if (message.muted !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.muted);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState\n */ const TrackMuteState = new TrackMuteState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.AudioMuteChanged\", [\n            {\n                no: 1,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.muted = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool muted */ 1:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool muted = 1; */ if (message.muted !== false) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.muted);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged\n */ new AudioMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.VideoMuteChanged\", [\n            {\n                no: 2,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.muted = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool muted */ 2:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool muted = 2; */ if (message.muted !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.muted);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged\n */ new VideoMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateSubscriptionsRequest\", [\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.tracks = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks */ 3:\n                    message.tracks.push(TrackSubscriptionDetails.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks = 3; */ for(let i = 0; i < message.tracks.length; i++)TrackSubscriptionDetails.internalBinaryWrite(message.tracks[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */ const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateSubscriptionsResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */ const UpdateSubscriptionsResponse = new UpdateSubscriptionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackSubscriptionDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.TrackSubscriptionDetails\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"dimension\",\n                kind: \"message\",\n                T: ()=>VideoDimension\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.trackType = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType track_type */ 3:\n                    message.trackType = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.VideoDimension dimension */ 4:\n                    message.dimension = VideoDimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.TrackType track_type = 3; */ if (message.trackType !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.trackType);\n        /* stream.video.sfu.models.VideoDimension dimension = 4; */ if (message.dimension) VideoDimension.internalBinaryWrite(message.dimension, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */ const TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendAnswerRequest\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        message.sdp = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                case /* string sdp */ 2:\n                    message.sdp = reader.string();\n                    break;\n                case /* string session_id */ 3:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.peerType);\n        /* string sdp = 2; */ if (message.sdp !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sdp);\n        /* string session_id = 3; */ if (message.sessionId !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest\n */ const SendAnswerRequest = new SendAnswerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendAnswerResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse\n */ const SendAnswerResponse = new SendAnswerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickleResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICETrickleResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse\n */ const ICETrickleResponse = new ICETrickleResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SetPublisherRequest\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sdp = \"\";\n        message.sessionId = \"\";\n        message.tracks = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string sdp */ 1:\n                    message.sdp = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.models.TrackInfo tracks */ 3:\n                    message.tracks.push(TrackInfo.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string sdp = 1; */ if (message.sdp !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sdp);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.models.TrackInfo tracks = 3; */ for(let i = 0; i < message.tracks.length; i++)TrackInfo.internalBinaryWrite(message.tracks[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest\n */ const SetPublisherRequest = new SetPublisherRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SetPublisherResponse\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"ice_restart\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sdp = \"\";\n        message.sessionId = \"\";\n        message.iceRestart = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string sdp */ 1:\n                    message.sdp = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* bool ice_restart */ 3:\n                    message.iceRestart = reader.bool();\n                    break;\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string sdp = 1; */ if (message.sdp !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sdp);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* bool ice_restart = 3; */ if (message.iceRestart !== false) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.iceRestart);\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse\n */ const SetPublisherResponse = new SetPublisherResponse$Type();\n/**\n * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer\n */ const SignalServer = new _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_12__.ServiceType(\"stream.video.sfu.signal.SignalServer\", [\n    {\n        name: \"SetPublisher\",\n        options: {},\n        I: SetPublisherRequest,\n        O: SetPublisherResponse\n    },\n    {\n        name: \"SendAnswer\",\n        options: {},\n        I: SendAnswerRequest,\n        O: SendAnswerResponse\n    },\n    {\n        name: \"IceTrickle\",\n        options: {},\n        I: ICETrickle$1,\n        O: ICETrickleResponse\n    },\n    {\n        name: \"UpdateSubscriptions\",\n        options: {},\n        I: UpdateSubscriptionsRequest,\n        O: UpdateSubscriptionsResponse\n    },\n    {\n        name: \"UpdateMuteStates\",\n        options: {},\n        I: UpdateMuteStatesRequest,\n        O: UpdateMuteStatesResponse\n    },\n    {\n        name: \"IceRestart\",\n        options: {},\n        I: ICERestartRequest,\n        O: ICERestartResponse\n    },\n    {\n        name: \"SendStats\",\n        options: {},\n        I: SendStatsRequest,\n        O: SendStatsResponse\n    },\n    {\n        name: \"StartNoiseCancellation\",\n        options: {},\n        I: StartNoiseCancellationRequest,\n        O: StartNoiseCancellationResponse\n    },\n    {\n        name: \"StopNoiseCancellation\",\n        options: {},\n        I: StopNoiseCancellationRequest,\n        O: StopNoiseCancellationResponse\n    }\n]);\n/**\n * @generated from protobuf enum stream.video.sfu.event.VideoLayerSetting.Priority\n */ var VideoLayerSetting_Priority;\n(function(VideoLayerSetting_Priority) {\n    /**\n     * @generated from protobuf enum value: PRIORITY_HIGH_UNSPECIFIED = 0;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"HIGH_UNSPECIFIED\"] = 0] = \"HIGH_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_LOW = 1;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"LOW\"] = 1] = \"LOW\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_MEDIUM = 2;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"MEDIUM\"] = 2] = \"MEDIUM\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_VERY_LOW = 3;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"VERY_LOW\"] = 3] = \"VERY_LOW\";\n})(VideoLayerSetting_Priority || (VideoLayerSetting_Priority = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuEvent$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SfuEvent\", [\n            {\n                no: 1,\n                name: \"subscriber_offer\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>SubscriberOffer\n            },\n            {\n                no: 2,\n                name: \"publisher_answer\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>PublisherAnswer\n            },\n            {\n                no: 3,\n                name: \"connection_quality_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ConnectionQualityChanged\n            },\n            {\n                no: 4,\n                name: \"audio_level_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>AudioLevelChanged\n            },\n            {\n                no: 5,\n                name: \"ice_trickle\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ICETrickle$1\n            },\n            {\n                no: 6,\n                name: \"change_publish_quality\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ChangePublishQuality\n            },\n            {\n                no: 10,\n                name: \"participant_joined\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantJoined\n            },\n            {\n                no: 11,\n                name: \"participant_left\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantLeft\n            },\n            {\n                no: 12,\n                name: \"dominant_speaker_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>DominantSpeakerChanged\n            },\n            {\n                no: 13,\n                name: \"join_response\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>JoinResponse\n            },\n            {\n                no: 14,\n                name: \"health_check_response\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>HealthCheckResponse\n            },\n            {\n                no: 16,\n                name: \"track_published\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>TrackPublished\n            },\n            {\n                no: 17,\n                name: \"track_unpublished\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>TrackUnpublished\n            },\n            {\n                no: 18,\n                name: \"error\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>Error$1\n            },\n            {\n                no: 19,\n                name: \"call_grants_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>CallGrantsUpdated\n            },\n            {\n                no: 20,\n                name: \"go_away\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>GoAway\n            },\n            {\n                no: 21,\n                name: \"ice_restart\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ICERestart\n            },\n            {\n                no: 22,\n                name: \"pins_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>PinsChanged\n            },\n            {\n                no: 23,\n                name: \"call_ended\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>CallEnded\n            },\n            {\n                no: 24,\n                name: \"participant_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantUpdated\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.eventPayload = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.SubscriberOffer subscriber_offer */ 1:\n                    message.eventPayload = {\n                        oneofKind: \"subscriberOffer\",\n                        subscriberOffer: SubscriberOffer.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.subscriberOffer)\n                    };\n                    break;\n                case /* stream.video.sfu.event.PublisherAnswer publisher_answer */ 2:\n                    message.eventPayload = {\n                        oneofKind: \"publisherAnswer\",\n                        publisherAnswer: PublisherAnswer.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.publisherAnswer)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed */ 3:\n                    message.eventPayload = {\n                        oneofKind: \"connectionQualityChanged\",\n                        connectionQualityChanged: ConnectionQualityChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.connectionQualityChanged)\n                    };\n                    break;\n                case /* stream.video.sfu.event.AudioLevelChanged audio_level_changed */ 4:\n                    message.eventPayload = {\n                        oneofKind: \"audioLevelChanged\",\n                        audioLevelChanged: AudioLevelChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.audioLevelChanged)\n                    };\n                    break;\n                case /* stream.video.sfu.models.ICETrickle ice_trickle */ 5:\n                    message.eventPayload = {\n                        oneofKind: \"iceTrickle\",\n                        iceTrickle: ICETrickle$1.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.iceTrickle)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ChangePublishQuality change_publish_quality */ 6:\n                    message.eventPayload = {\n                        oneofKind: \"changePublishQuality\",\n                        changePublishQuality: ChangePublishQuality.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.changePublishQuality)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ParticipantJoined participant_joined */ 10:\n                    message.eventPayload = {\n                        oneofKind: \"participantJoined\",\n                        participantJoined: ParticipantJoined.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.participantJoined)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ParticipantLeft participant_left */ 11:\n                    message.eventPayload = {\n                        oneofKind: \"participantLeft\",\n                        participantLeft: ParticipantLeft.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.participantLeft)\n                    };\n                    break;\n                case /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed */ 12:\n                    message.eventPayload = {\n                        oneofKind: \"dominantSpeakerChanged\",\n                        dominantSpeakerChanged: DominantSpeakerChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.dominantSpeakerChanged)\n                    };\n                    break;\n                case /* stream.video.sfu.event.JoinResponse join_response */ 13:\n                    message.eventPayload = {\n                        oneofKind: \"joinResponse\",\n                        joinResponse: JoinResponse.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.joinResponse)\n                    };\n                    break;\n                case /* stream.video.sfu.event.HealthCheckResponse health_check_response */ 14:\n                    message.eventPayload = {\n                        oneofKind: \"healthCheckResponse\",\n                        healthCheckResponse: HealthCheckResponse.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.healthCheckResponse)\n                    };\n                    break;\n                case /* stream.video.sfu.event.TrackPublished track_published */ 16:\n                    message.eventPayload = {\n                        oneofKind: \"trackPublished\",\n                        trackPublished: TrackPublished.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.trackPublished)\n                    };\n                    break;\n                case /* stream.video.sfu.event.TrackUnpublished track_unpublished */ 17:\n                    message.eventPayload = {\n                        oneofKind: \"trackUnpublished\",\n                        trackUnpublished: TrackUnpublished.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.trackUnpublished)\n                    };\n                    break;\n                case /* stream.video.sfu.event.Error error */ 18:\n                    message.eventPayload = {\n                        oneofKind: \"error\",\n                        error: Error$1.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.error)\n                    };\n                    break;\n                case /* stream.video.sfu.event.CallGrantsUpdated call_grants_updated */ 19:\n                    message.eventPayload = {\n                        oneofKind: \"callGrantsUpdated\",\n                        callGrantsUpdated: CallGrantsUpdated.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.callGrantsUpdated)\n                    };\n                    break;\n                case /* stream.video.sfu.event.GoAway go_away */ 20:\n                    message.eventPayload = {\n                        oneofKind: \"goAway\",\n                        goAway: GoAway.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.goAway)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ICERestart ice_restart */ 21:\n                    message.eventPayload = {\n                        oneofKind: \"iceRestart\",\n                        iceRestart: ICERestart.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.iceRestart)\n                    };\n                    break;\n                case /* stream.video.sfu.event.PinsChanged pins_updated */ 22:\n                    message.eventPayload = {\n                        oneofKind: \"pinsUpdated\",\n                        pinsUpdated: PinsChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.pinsUpdated)\n                    };\n                    break;\n                case /* stream.video.sfu.event.CallEnded call_ended */ 23:\n                    message.eventPayload = {\n                        oneofKind: \"callEnded\",\n                        callEnded: CallEnded.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.callEnded)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ParticipantUpdated participant_updated */ 24:\n                    message.eventPayload = {\n                        oneofKind: \"participantUpdated\",\n                        participantUpdated: ParticipantUpdated.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.participantUpdated)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.SubscriberOffer subscriber_offer = 1; */ if (message.eventPayload.oneofKind === \"subscriberOffer\") SubscriberOffer.internalBinaryWrite(message.eventPayload.subscriberOffer, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.PublisherAnswer publisher_answer = 2; */ if (message.eventPayload.oneofKind === \"publisherAnswer\") PublisherAnswer.internalBinaryWrite(message.eventPayload.publisherAnswer, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed = 3; */ if (message.eventPayload.oneofKind === \"connectionQualityChanged\") ConnectionQualityChanged.internalBinaryWrite(message.eventPayload.connectionQualityChanged, writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.AudioLevelChanged audio_level_changed = 4; */ if (message.eventPayload.oneofKind === \"audioLevelChanged\") AudioLevelChanged.internalBinaryWrite(message.eventPayload.audioLevelChanged, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.ICETrickle ice_trickle = 5; */ if (message.eventPayload.oneofKind === \"iceTrickle\") ICETrickle$1.internalBinaryWrite(message.eventPayload.iceTrickle, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ChangePublishQuality change_publish_quality = 6; */ if (message.eventPayload.oneofKind === \"changePublishQuality\") ChangePublishQuality.internalBinaryWrite(message.eventPayload.changePublishQuality, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ParticipantJoined participant_joined = 10; */ if (message.eventPayload.oneofKind === \"participantJoined\") ParticipantJoined.internalBinaryWrite(message.eventPayload.participantJoined, writer.tag(10, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ParticipantLeft participant_left = 11; */ if (message.eventPayload.oneofKind === \"participantLeft\") ParticipantLeft.internalBinaryWrite(message.eventPayload.participantLeft, writer.tag(11, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed = 12; */ if (message.eventPayload.oneofKind === \"dominantSpeakerChanged\") DominantSpeakerChanged.internalBinaryWrite(message.eventPayload.dominantSpeakerChanged, writer.tag(12, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.JoinResponse join_response = 13; */ if (message.eventPayload.oneofKind === \"joinResponse\") JoinResponse.internalBinaryWrite(message.eventPayload.joinResponse, writer.tag(13, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.HealthCheckResponse health_check_response = 14; */ if (message.eventPayload.oneofKind === \"healthCheckResponse\") HealthCheckResponse.internalBinaryWrite(message.eventPayload.healthCheckResponse, writer.tag(14, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.TrackPublished track_published = 16; */ if (message.eventPayload.oneofKind === \"trackPublished\") TrackPublished.internalBinaryWrite(message.eventPayload.trackPublished, writer.tag(16, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.TrackUnpublished track_unpublished = 17; */ if (message.eventPayload.oneofKind === \"trackUnpublished\") TrackUnpublished.internalBinaryWrite(message.eventPayload.trackUnpublished, writer.tag(17, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.Error error = 18; */ if (message.eventPayload.oneofKind === \"error\") Error$1.internalBinaryWrite(message.eventPayload.error, writer.tag(18, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.CallGrantsUpdated call_grants_updated = 19; */ if (message.eventPayload.oneofKind === \"callGrantsUpdated\") CallGrantsUpdated.internalBinaryWrite(message.eventPayload.callGrantsUpdated, writer.tag(19, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.GoAway go_away = 20; */ if (message.eventPayload.oneofKind === \"goAway\") GoAway.internalBinaryWrite(message.eventPayload.goAway, writer.tag(20, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ICERestart ice_restart = 21; */ if (message.eventPayload.oneofKind === \"iceRestart\") ICERestart.internalBinaryWrite(message.eventPayload.iceRestart, writer.tag(21, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.PinsChanged pins_updated = 22; */ if (message.eventPayload.oneofKind === \"pinsUpdated\") PinsChanged.internalBinaryWrite(message.eventPayload.pinsUpdated, writer.tag(22, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.CallEnded call_ended = 23; */ if (message.eventPayload.oneofKind === \"callEnded\") CallEnded.internalBinaryWrite(message.eventPayload.callEnded, writer.tag(23, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ParticipantUpdated participant_updated = 24; */ if (message.eventPayload.oneofKind === \"participantUpdated\") ParticipantUpdated.internalBinaryWrite(message.eventPayload.participantUpdated, writer.tag(24, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent\n */ const SfuEvent = new SfuEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PinsChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.PinsChanged\", [\n            {\n                no: 1,\n                name: \"pins\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.pins = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.models.Pin pins */ 1:\n                    message.pins.push(Pin.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.models.Pin pins = 1; */ for(let i = 0; i < message.pins.length; i++)Pin.internalBinaryWrite(message.pins[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PinsChanged\n */ const PinsChanged = new PinsChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.Error\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            },\n            {\n                no: 5,\n                name: \"reconnect_strategy\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.WebsocketReconnectStrategy\",\n                        WebsocketReconnectStrategy,\n                        \"WEBSOCKET_RECONNECT_STRATEGY_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.reconnectStrategy = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                case /* stream.video.sfu.models.WebsocketReconnectStrategy reconnect_strategy */ 5:\n                    message.reconnectStrategy = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.WebsocketReconnectStrategy reconnect_strategy = 5; */ if (message.reconnectStrategy !== 0) writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.reconnectStrategy);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Error\n */ const Error$1 = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ICETrickle\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"ice_candidate\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        message.iceCandidate = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                case /* string ice_candidate */ 2:\n                    message.iceCandidate = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.peerType);\n        /* string ice_candidate = 2; */ if (message.iceCandidate !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.iceCandidate);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICETrickle\n */ const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestart$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ICERestart\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.peerType);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICERestart\n */ const ICERestart = new ICERestart$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SfuRequest\", [\n            {\n                no: 1,\n                name: \"join_request\",\n                kind: \"message\",\n                oneof: \"requestPayload\",\n                T: ()=>JoinRequest\n            },\n            {\n                no: 2,\n                name: \"health_check_request\",\n                kind: \"message\",\n                oneof: \"requestPayload\",\n                T: ()=>HealthCheckRequest\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.requestPayload = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.JoinRequest join_request */ 1:\n                    message.requestPayload = {\n                        oneofKind: \"joinRequest\",\n                        joinRequest: JoinRequest.internalBinaryRead(reader, reader.uint32(), options, message.requestPayload.joinRequest)\n                    };\n                    break;\n                case /* stream.video.sfu.event.HealthCheckRequest health_check_request */ 2:\n                    message.requestPayload = {\n                        oneofKind: \"healthCheckRequest\",\n                        healthCheckRequest: HealthCheckRequest.internalBinaryRead(reader, reader.uint32(), options, message.requestPayload.healthCheckRequest)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.JoinRequest join_request = 1; */ if (message.requestPayload.oneofKind === \"joinRequest\") JoinRequest.internalBinaryWrite(message.requestPayload.joinRequest, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.HealthCheckRequest health_check_request = 2; */ if (message.requestPayload.oneofKind === \"healthCheckRequest\") HealthCheckRequest.internalBinaryWrite(message.requestPayload.healthCheckRequest, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuRequest\n */ const SfuRequest = new SfuRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.HealthCheckRequest\", []);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message, writer, options) {\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckRequest\n */ const HealthCheckRequest = new HealthCheckRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.HealthCheckResponse\", [\n            {\n                no: 1,\n                name: \"participant_count\",\n                kind: \"message\",\n                T: ()=>ParticipantCount\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.ParticipantCount participant_count */ 1:\n                    message.participantCount = ParticipantCount.internalBinaryRead(reader, reader.uint32(), options, message.participantCount);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.ParticipantCount participant_count = 1; */ if (message.participantCount) ParticipantCount.internalBinaryWrite(message.participantCount, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckResponse\n */ const HealthCheckResponse = new HealthCheckResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackPublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.TrackPublished\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.type = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 4:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.TrackType type = 3; */ if (message.type !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.type);\n        /* stream.video.sfu.models.Participant participant = 4; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackPublished\n */ const TrackPublished = new TrackPublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackUnpublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.TrackUnpublished\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"cause\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackUnpublishReason\",\n                        TrackUnpublishReason,\n                        \"TRACK_UNPUBLISH_REASON_\"\n                    ]\n            },\n            {\n                no: 5,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.type = 0;\n        message.cause = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.TrackUnpublishReason cause */ 4:\n                    message.cause = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 5:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.TrackType type = 3; */ if (message.type !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.type);\n        /* stream.video.sfu.models.TrackUnpublishReason cause = 4; */ if (message.cause !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.cause);\n        /* stream.video.sfu.models.Participant participant = 5; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackUnpublished\n */ const TrackUnpublished = new TrackUnpublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.JoinRequest\", [\n            {\n                no: 1,\n                name: \"token\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"subscriber_sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"client_details\",\n                kind: \"message\",\n                T: ()=>ClientDetails\n            },\n            {\n                no: 5,\n                name: \"migration\",\n                kind: \"message\",\n                T: ()=>Migration\n            },\n            {\n                no: 6,\n                name: \"fast_reconnect\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.token = \"\";\n        message.sessionId = \"\";\n        message.subscriberSdp = \"\";\n        message.fastReconnect = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string token */ 1:\n                    message.token = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* string subscriber_sdp */ 3:\n                    message.subscriberSdp = reader.string();\n                    break;\n                case /* stream.video.sfu.models.ClientDetails client_details */ 4:\n                    message.clientDetails = ClientDetails.internalBinaryRead(reader, reader.uint32(), options, message.clientDetails);\n                    break;\n                case /* stream.video.sfu.event.Migration migration */ 5:\n                    message.migration = Migration.internalBinaryRead(reader, reader.uint32(), options, message.migration);\n                    break;\n                case /* bool fast_reconnect */ 6:\n                    message.fastReconnect = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string token = 1; */ if (message.token !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.token);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* string subscriber_sdp = 3; */ if (message.subscriberSdp !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.subscriberSdp);\n        /* stream.video.sfu.models.ClientDetails client_details = 4; */ if (message.clientDetails) ClientDetails.internalBinaryWrite(message.clientDetails, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.Migration migration = 5; */ if (message.migration) Migration.internalBinaryWrite(message.migration, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* bool fast_reconnect = 6; */ if (message.fastReconnect !== false) writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.fastReconnect);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinRequest\n */ const JoinRequest = new JoinRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Migration$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.Migration\", [\n            {\n                no: 1,\n                name: \"from_sfu_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"announced_tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            },\n            {\n                no: 3,\n                name: \"subscriptions\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.fromSfuId = \"\";\n        message.announcedTracks = [];\n        message.subscriptions = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string from_sfu_id */ 1:\n                    message.fromSfuId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.models.TrackInfo announced_tracks */ 2:\n                    message.announcedTracks.push(TrackInfo.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions */ 3:\n                    message.subscriptions.push(TrackSubscriptionDetails.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string from_sfu_id = 1; */ if (message.fromSfuId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.fromSfuId);\n        /* repeated stream.video.sfu.models.TrackInfo announced_tracks = 2; */ for(let i = 0; i < message.announcedTracks.length; i++)TrackInfo.internalBinaryWrite(message.announcedTracks[i], writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions = 3; */ for(let i = 0; i < message.subscriptions.length; i++)TrackSubscriptionDetails.internalBinaryWrite(message.subscriptions[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Migration\n */ const Migration = new Migration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.JoinResponse\", [\n            {\n                no: 1,\n                name: \"call_state\",\n                kind: \"message\",\n                T: ()=>CallState$1\n            },\n            {\n                no: 2,\n                name: \"reconnected\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.reconnected = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.CallState call_state */ 1:\n                    message.callState = CallState$1.internalBinaryRead(reader, reader.uint32(), options, message.callState);\n                    break;\n                case /* bool reconnected */ 2:\n                    message.reconnected = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.CallState call_state = 1; */ if (message.callState) CallState$1.internalBinaryWrite(message.callState, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* bool reconnected = 2; */ if (message.reconnected !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.reconnected);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinResponse\n */ const JoinResponse = new JoinResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantJoined$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantJoined\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.callCid = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string call_cid */ 1:\n                    message.callCid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 2:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string call_cid = 1; */ if (message.callCid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.callCid);\n        /* stream.video.sfu.models.Participant participant = 2; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined\n */ const ParticipantJoined = new ParticipantJoined$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantLeft$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantLeft\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.callCid = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string call_cid */ 1:\n                    message.callCid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 2:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string call_cid = 1; */ if (message.callCid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.callCid);\n        /* stream.video.sfu.models.Participant participant = 2; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft\n */ const ParticipantLeft = new ParticipantLeft$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantUpdated\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.callCid = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string call_cid */ 1:\n                    message.callCid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 2:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string call_cid = 1; */ if (message.callCid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.callCid);\n        /* stream.video.sfu.models.Participant participant = 2; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantUpdated\n */ const ParticipantUpdated = new ParticipantUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscriberOffer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SubscriberOffer\", [\n            {\n                no: 1,\n                name: \"ice_restart\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.iceRestart = false;\n        message.sdp = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool ice_restart */ 1:\n                    message.iceRestart = reader.bool();\n                    break;\n                case /* string sdp */ 2:\n                    message.sdp = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool ice_restart = 1; */ if (message.iceRestart !== false) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.iceRestart);\n        /* string sdp = 2; */ if (message.sdp !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sdp);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer\n */ const SubscriberOffer = new SubscriberOffer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublisherAnswer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.PublisherAnswer\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sdp = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string sdp */ 1:\n                    message.sdp = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string sdp = 1; */ if (message.sdp !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sdp);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PublisherAnswer\n */ const PublisherAnswer = new PublisherAnswer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ConnectionQualityChanged\", [\n            {\n                no: 1,\n                name: \"connection_quality_updates\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>ConnectionQualityInfo\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.connectionQualityUpdates = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates */ 1:\n                    message.connectionQualityUpdates.push(ConnectionQualityInfo.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates = 1; */ for(let i = 0; i < message.connectionQualityUpdates.length; i++)ConnectionQualityInfo.internalBinaryWrite(message.connectionQualityUpdates[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */ const ConnectionQualityChanged = new ConnectionQualityChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ConnectionQualityInfo\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"connection_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ConnectionQuality\",\n                        ConnectionQuality,\n                        \"CONNECTION_QUALITY_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.connectionQuality = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.ConnectionQuality connection_quality */ 3:\n                    message.connectionQuality = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.ConnectionQuality connection_quality = 3; */ if (message.connectionQuality !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.connectionQuality);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */ const ConnectionQualityInfo = new ConnectionQualityInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DominantSpeakerChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.DominantSpeakerChanged\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */ const DominantSpeakerChanged = new DominantSpeakerChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevel$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioLevel\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"level\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 4,\n                name: \"is_speaking\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.level = 0;\n        message.isSpeaking = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* float level */ 3:\n                    message.level = reader.float();\n                    break;\n                case /* bool is_speaking */ 4:\n                    message.isSpeaking = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.sessionId);\n        /* float level = 3; */ if (message.level !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Bit32).float(message.level);\n        /* bool is_speaking = 4; */ if (message.isSpeaking !== false) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.isSpeaking);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel\n */ const AudioLevel = new AudioLevel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevelChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioLevelChanged\", [\n            {\n                no: 1,\n                name: \"audio_levels\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioLevel\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.audioLevels = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.event.AudioLevel audio_levels */ 1:\n                    message.audioLevels.push(AudioLevel.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.event.AudioLevel audio_levels = 1; */ for(let i = 0; i < message.audioLevels.length; i++)AudioLevel.internalBinaryWrite(message.audioLevels[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged\n */ const AudioLevelChanged = new AudioLevelChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMediaRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioMediaRequest\", [\n            {\n                no: 1,\n                name: \"channel_count\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.channelCount = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* int32 channel_count */ 1:\n                    message.channelCount = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* int32 channel_count = 1; */ if (message.channelCount !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.channelCount);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioMediaRequest\n */ const AudioMediaRequest = new AudioMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioSender\", [\n            {\n                no: 1,\n                name: \"media_request\",\n                kind: \"message\",\n                T: ()=>AudioMediaRequest\n            },\n            {\n                no: 2,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.AudioMediaRequest media_request */ 1:\n                    message.mediaRequest = AudioMediaRequest.internalBinaryRead(reader, reader.uint32(), options, message.mediaRequest);\n                    break;\n                case /* stream.video.sfu.models.Codec codec */ 2:\n                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.AudioMediaRequest media_request = 1; */ if (message.mediaRequest) AudioMediaRequest.internalBinaryWrite(message.mediaRequest, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Codec codec = 2; */ if (message.codec) Codec.internalBinaryWrite(message.codec, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender\n */ const AudioSender = new AudioSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMediaRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoMediaRequest\", [\n            {\n                no: 1,\n                name: \"ideal_height\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 2,\n                name: \"ideal_width\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 3,\n                name: \"ideal_frame_rate\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.idealHeight = 0;\n        message.idealWidth = 0;\n        message.idealFrameRate = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* int32 ideal_height */ 1:\n                    message.idealHeight = reader.int32();\n                    break;\n                case /* int32 ideal_width */ 2:\n                    message.idealWidth = reader.int32();\n                    break;\n                case /* int32 ideal_frame_rate */ 3:\n                    message.idealFrameRate = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* int32 ideal_height = 1; */ if (message.idealHeight !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.idealHeight);\n        /* int32 ideal_width = 2; */ if (message.idealWidth !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.idealWidth);\n        /* int32 ideal_frame_rate = 3; */ if (message.idealFrameRate !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.idealFrameRate);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoMediaRequest\n */ const VideoMediaRequest = new VideoMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayerSetting$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoLayerSetting\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"active\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: \"max_bitrate\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: \"scale_resolution_down_by\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 5,\n                name: \"priority\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.event.VideoLayerSetting.Priority\",\n                        VideoLayerSetting_Priority,\n                        \"PRIORITY_\"\n                    ]\n            },\n            {\n                no: 6,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            },\n            {\n                no: 7,\n                name: \"max_framerate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.active = false;\n        message.maxBitrate = 0;\n        message.scaleResolutionDownBy = 0;\n        message.priority = 0;\n        message.maxFramerate = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* bool active */ 2:\n                    message.active = reader.bool();\n                    break;\n                case /* int32 max_bitrate */ 3:\n                    message.maxBitrate = reader.int32();\n                    break;\n                case /* float scale_resolution_down_by */ 4:\n                    message.scaleResolutionDownBy = reader.float();\n                    break;\n                case /* stream.video.sfu.event.VideoLayerSetting.Priority priority */ 5:\n                    message.priority = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.Codec codec */ 6:\n                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);\n                    break;\n                case /* uint32 max_framerate */ 7:\n                    message.maxFramerate = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.name);\n        /* bool active = 2; */ if (message.active !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).bool(message.active);\n        /* int32 max_bitrate = 3; */ if (message.maxBitrate !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.maxBitrate);\n        /* float scale_resolution_down_by = 4; */ if (message.scaleResolutionDownBy !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Bit32).float(message.scaleResolutionDownBy);\n        /* stream.video.sfu.event.VideoLayerSetting.Priority priority = 5; */ if (message.priority !== 0) writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.priority);\n        /* stream.video.sfu.models.Codec codec = 6; */ if (message.codec) Codec.internalBinaryWrite(message.codec, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* uint32 max_framerate = 7; */ if (message.maxFramerate !== 0) writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).uint32(message.maxFramerate);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting\n */ const VideoLayerSetting = new VideoLayerSetting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoSender\", [\n            {\n                no: 1,\n                name: \"media_request\",\n                kind: \"message\",\n                T: ()=>VideoMediaRequest\n            },\n            {\n                no: 2,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: \"layers\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayerSetting\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.layers = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.VideoMediaRequest media_request */ 1:\n                    message.mediaRequest = VideoMediaRequest.internalBinaryRead(reader, reader.uint32(), options, message.mediaRequest);\n                    break;\n                case /* stream.video.sfu.models.Codec codec */ 2:\n                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);\n                    break;\n                case /* repeated stream.video.sfu.event.VideoLayerSetting layers */ 3:\n                    message.layers.push(VideoLayerSetting.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.VideoMediaRequest media_request = 1; */ if (message.mediaRequest) VideoMediaRequest.internalBinaryWrite(message.mediaRequest, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Codec codec = 2; */ if (message.codec) Codec.internalBinaryWrite(message.codec, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.event.VideoLayerSetting layers = 3; */ for(let i = 0; i < message.layers.length; i++)VideoLayerSetting.internalBinaryWrite(message.layers[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender\n */ const VideoSender = new VideoSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ChangePublishQuality\", [\n            {\n                no: 1,\n                name: \"audio_senders\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioSender\n            },\n            {\n                no: 2,\n                name: \"video_senders\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoSender\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.audioSenders = [];\n        message.videoSenders = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.event.AudioSender audio_senders */ 1:\n                    message.audioSenders.push(AudioSender.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated stream.video.sfu.event.VideoSender video_senders */ 2:\n                    message.videoSenders.push(VideoSender.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.event.AudioSender audio_senders = 1; */ for(let i = 0; i < message.audioSenders.length; i++)AudioSender.internalBinaryWrite(message.audioSenders[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.event.VideoSender video_senders = 2; */ for(let i = 0; i < message.videoSenders.length; i++)VideoSender.internalBinaryWrite(message.videoSenders[i], writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality\n */ const ChangePublishQuality = new ChangePublishQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrantsUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.CallGrantsUpdated\", [\n            {\n                no: 1,\n                name: \"current_grants\",\n                kind: \"message\",\n                T: ()=>CallGrants\n            },\n            {\n                no: 2,\n                name: \"message\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.message = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.CallGrants current_grants */ 1:\n                    message.currentGrants = CallGrants.internalBinaryRead(reader, reader.uint32(), options, message.currentGrants);\n                    break;\n                case /* string message */ 2:\n                    message.message = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.CallGrants current_grants = 1; */ if (message.currentGrants) CallGrants.internalBinaryWrite(message.currentGrants, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).fork(), options).join();\n        /* string message = 2; */ if (message.message !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.LengthDelimited).string(message.message);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallGrantsUpdated\n */ const CallGrantsUpdated = new CallGrantsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GoAway$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.GoAway\", [\n            {\n                no: 1,\n                name: \"reason\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.GoAwayReason\",\n                        GoAwayReason,\n                        \"GO_AWAY_REASON_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.reason = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.GoAwayReason reason */ 1:\n                    message.reason = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.GoAwayReason reason = 1; */ if (message.reason !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.reason);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.GoAway\n */ const GoAway = new GoAway$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallEnded$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.CallEnded\", [\n            {\n                no: 1,\n                name: \"reason\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.CallEndedReason\",\n                        CallEndedReason,\n                        \"CALL_ENDED_REASON_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.reason = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.CallEndedReason reason */ 1:\n                    message.reason = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.CallEndedReason reason = 1; */ if (message.reason !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.WireType.Varint).int32(message.reason);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallEnded\n */ const CallEnded = new CallEnded$Type();\nvar events = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AudioLevel: AudioLevel,\n    AudioLevelChanged: AudioLevelChanged,\n    AudioMediaRequest: AudioMediaRequest,\n    AudioSender: AudioSender,\n    CallEnded: CallEnded,\n    CallGrantsUpdated: CallGrantsUpdated,\n    ChangePublishQuality: ChangePublishQuality,\n    ConnectionQualityChanged: ConnectionQualityChanged,\n    ConnectionQualityInfo: ConnectionQualityInfo,\n    DominantSpeakerChanged: DominantSpeakerChanged,\n    Error: Error$1,\n    GoAway: GoAway,\n    HealthCheckRequest: HealthCheckRequest,\n    HealthCheckResponse: HealthCheckResponse,\n    ICERestart: ICERestart,\n    ICETrickle: ICETrickle,\n    JoinRequest: JoinRequest,\n    JoinResponse: JoinResponse,\n    Migration: Migration,\n    ParticipantJoined: ParticipantJoined,\n    ParticipantLeft: ParticipantLeft,\n    ParticipantUpdated: ParticipantUpdated,\n    PinsChanged: PinsChanged,\n    PublisherAnswer: PublisherAnswer,\n    SfuEvent: SfuEvent,\n    SfuRequest: SfuRequest,\n    SubscriberOffer: SubscriberOffer,\n    TrackPublished: TrackPublished,\n    TrackUnpublished: TrackUnpublished,\n    VideoLayerSetting: VideoLayerSetting,\n    get VideoLayerSetting_Priority () {\n        return VideoLayerSetting_Priority;\n    },\n    VideoMediaRequest: VideoMediaRequest,\n    VideoSender: VideoSender\n});\nvar VisibilityState;\n(function(VisibilityState) {\n    VisibilityState[\"UNKNOWN\"] = \"UNKNOWN\";\n    VisibilityState[\"VISIBLE\"] = \"VISIBLE\";\n    VisibilityState[\"INVISIBLE\"] = \"INVISIBLE\";\n})(VisibilityState || (VisibilityState = {}));\nvar DebounceType;\n(function(DebounceType) {\n    DebounceType[DebounceType[\"IMMEDIATE\"] = 20] = \"IMMEDIATE\";\n    DebounceType[DebounceType[\"FAST\"] = 100] = \"FAST\";\n    DebounceType[DebounceType[\"MEDIUM\"] = 600] = \"MEDIUM\";\n    DebounceType[DebounceType[\"SLOW\"] = 1200] = \"SLOW\";\n})(DebounceType || (DebounceType = {}));\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */ class SignalServerClient {\n    constructor(_transport){\n        this._transport = _transport;\n        this.typeName = SignalServer.typeName;\n        this.methods = SignalServer.methods;\n        this.options = SignalServer.options;\n    }\n    /**\n     * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n     *\n     * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n     */ setPublisher(input, options) {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * answer is sent by the client to the SFU after receiving a subscriber_offer.\n     *\n     * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n     */ sendAnswer(input, options) {\n        const method = this.methods[1], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * SendICECandidate sends an ICE candidate to the client\n     *\n     * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n     */ iceTrickle(input, options) {\n        const method = this.methods[2], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n     * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n     *\n     * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n     */ updateSubscriptions(input, options) {\n        const method = this.methods[3], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n     */ updateMuteStates(input, options) {\n        const method = this.methods[4], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n     */ iceRestart(input, options) {\n        const method = this.methods[5], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n     */ sendStats(input, options) {\n        const method = this.methods[6], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: StartNoiseCancellation(stream.video.sfu.signal.StartNoiseCancellationRequest) returns (stream.video.sfu.signal.StartNoiseCancellationResponse);\n     */ startNoiseCancellation(input, options) {\n        const method = this.methods[7], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: StopNoiseCancellation(stream.video.sfu.signal.StopNoiseCancellationRequest) returns (stream.video.sfu.signal.StopNoiseCancellationResponse);\n     */ stopNoiseCancellation(input, options) {\n        const method = this.methods[8], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n}\nconst defaultOptions = {\n    baseUrl: \"\",\n    sendJson: true,\n    timeout: 5 * 1000,\n    jsonOptions: {\n        ignoreUnknownFields: true\n    }\n};\nconst withHeaders = (headers)=>{\n    return {\n        interceptUnary (next, method, input, options) {\n            options.meta = {\n                ...options.meta,\n                ...headers\n            };\n            return next(method, input, options);\n        }\n    };\n};\n/**\n * Creates new SignalServerClient instance.\n *\n * @param options the twirp options.\n */ const createSignalClient = (options)=>{\n    const transport = new _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_14__.TwirpFetchTransport({\n        ...defaultOptions,\n        ...options\n    });\n    return new SignalServerClient(transport);\n};\n/**\n * Checks whether we are using React Native\n */ const isReactNative = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.product?.toLowerCase() === \"reactnative\";\n};\n// log levels, sorted by verbosity\nconst logLevels = Object.freeze({\n    trace: 0,\n    debug: 1,\n    info: 2,\n    warn: 3,\n    error: 4\n});\nlet logger$4;\nlet level = \"info\";\nconst logToConsole = (logLevel, message, ...args)=>{\n    let logMethod;\n    switch(logLevel){\n        case \"error\":\n            if (isReactNative()) {\n                message = `ERROR: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.error;\n            break;\n        case \"warn\":\n            if (isReactNative()) {\n                message = `WARN: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.warn;\n            break;\n        case \"info\":\n            logMethod = console.info;\n            break;\n        case \"trace\":\n            logMethod = console.trace;\n            break;\n        default:\n            logMethod = console.log;\n            break;\n    }\n    logMethod(message, ...args);\n};\nconst setLogger = (l, lvl)=>{\n    logger$4 = l;\n    if (lvl) {\n        setLogLevel(lvl);\n    }\n};\nconst setLogLevel = (l)=>{\n    level = l;\n};\nconst getLogger = (withTags)=>{\n    const loggerMethod = logger$4 || logToConsole;\n    const tags = (withTags || []).join(\":\");\n    const result = (logLevel, message, ...args)=>{\n        if (logLevels[logLevel] >= logLevels[level]) {\n            loggerMethod(logLevel, `[${tags}]: ${message}`, ...args);\n        }\n    };\n    return result;\n};\nconst getPreferredCodecs = (kind, preferredCodec, codecToRemove)=>{\n    const logger = getLogger([\n        \"codecs\"\n    ]);\n    if (!(\"getCapabilities\" in RTCRtpReceiver)) {\n        logger(\"warn\", \"RTCRtpReceiver.getCapabilities is not supported\");\n        return;\n    }\n    const cap = RTCRtpReceiver.getCapabilities(kind);\n    if (!cap) return;\n    const matched = [];\n    const partialMatched = [];\n    const unmatched = [];\n    cap.codecs.forEach((c)=>{\n        const codec = c.mimeType.toLowerCase();\n        logger(\"debug\", `Found supported codec: ${codec}`);\n        const shouldRemoveCodec = codecToRemove && codec === `${kind}/${codecToRemove.toLowerCase()}`;\n        if (shouldRemoveCodec) return;\n        const matchesCodec = codec === `${kind}/${preferredCodec.toLowerCase()}`;\n        if (!matchesCodec) {\n            unmatched.push(c);\n            return;\n        }\n        // for h264 codecs that have sdpFmtpLine available, use only if the\n        // profile-level-id is 42e01f for cross-browser compatibility\n        if (codec === \"h264\") {\n            if (c.sdpFmtpLine && c.sdpFmtpLine.includes(\"profile-level-id=42e01f\")) {\n                matched.push(c);\n            } else {\n                partialMatched.push(c);\n            }\n            return;\n        }\n        matched.push(c);\n    });\n    return [\n        ...matched,\n        ...partialMatched,\n        ...unmatched\n    ];\n};\nconst getGenericSdp = async (direction)=>{\n    const tempPc = new RTCPeerConnection();\n    tempPc.addTransceiver(\"video\", {\n        direction\n    });\n    tempPc.addTransceiver(\"audio\", {\n        direction\n    });\n    const offer = await tempPc.createOffer();\n    let sdp = offer.sdp ?? \"\";\n    tempPc.getTransceivers().forEach((t)=>{\n        t.stop?.();\n    });\n    tempPc.close();\n    return sdp;\n};\nconst sfuEventKinds = {\n    subscriberOffer: undefined,\n    publisherAnswer: undefined,\n    connectionQualityChanged: undefined,\n    audioLevelChanged: undefined,\n    iceTrickle: undefined,\n    changePublishQuality: undefined,\n    participantJoined: undefined,\n    participantLeft: undefined,\n    dominantSpeakerChanged: undefined,\n    joinResponse: undefined,\n    healthCheckResponse: undefined,\n    trackPublished: undefined,\n    trackUnpublished: undefined,\n    error: undefined,\n    callGrantsUpdated: undefined,\n    goAway: undefined,\n    iceRestart: undefined,\n    pinsUpdated: undefined,\n    callEnded: undefined,\n    participantUpdated: undefined\n};\nconst isSfuEvent = (eventName)=>{\n    return Object.prototype.hasOwnProperty.call(sfuEventKinds, eventName);\n};\nclass Dispatcher {\n    constructor(){\n        this.logger = getLogger([\n            \"Dispatcher\"\n        ]);\n        this.subscribers = {};\n        this.dispatch = (message)=>{\n            const eventKind = message.eventPayload.oneofKind;\n            if (!eventKind) return;\n            const payload = message.eventPayload[eventKind];\n            this.logger(\"debug\", `Dispatching ${eventKind}`, payload);\n            const listeners = this.subscribers[eventKind];\n            if (!listeners) return;\n            for (const fn of listeners){\n                try {\n                    fn(payload);\n                } catch (e) {\n                    this.logger(\"warn\", \"Listener failed with error\", e);\n                }\n            }\n        };\n        this.on = (eventName, fn)=>{\n            var _a;\n            ((_a = this.subscribers)[eventName] ?? (_a[eventName] = [])).push(fn);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        this.off = (eventName, fn)=>{\n            this.subscribers[eventName] = (this.subscribers[eventName] || []).filter((f)=>f !== fn);\n        };\n        this.offAll = (eventName)=>{\n            if (eventName) {\n                this.subscribers[eventName] = [];\n            } else {\n                this.subscribers = {};\n            }\n        };\n    }\n}\n/**\n * A buffer for ICE Candidates. Used for ICE Trickle:\n * - https://bloggeek.me/webrtcglossary/trickle-ice/\n */ class IceTrickleBuffer {\n    constructor(){\n        this.subscriberCandidates = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_15__.ReplaySubject();\n        this.publisherCandidates = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_15__.ReplaySubject();\n        this.logger = getLogger([\n            \"sfu-client\"\n        ]);\n        this.push = (iceTrickle)=>{\n            if (iceTrickle.peerType === PeerType.SUBSCRIBER) {\n                this.subscriberCandidates.next(iceTrickle);\n            } else if (iceTrickle.peerType === PeerType.PUBLISHER_UNSPECIFIED) {\n                this.publisherCandidates.next(iceTrickle);\n            } else {\n                this.logger(\"warn\", `ICETrickle, Unknown peer type`, iceTrickle);\n            }\n        };\n    }\n}\nfunction getIceCandidate(candidate) {\n    if (!candidate.usernameFragment) {\n        // react-native-webrtc doesn't include usernameFragment in the candidate\n        const splittedCandidate = candidate.candidate.split(\" \");\n        const ufragIndex = splittedCandidate.findIndex((s)=>s === \"ufrag\") + 1;\n        const usernameFragment = splittedCandidate[ufragIndex];\n        return JSON.stringify({\n            ...candidate,\n            usernameFragment\n        });\n    } else {\n        return JSON.stringify(candidate.toJSON());\n    }\n}\nconst version = \"1.5.2\";\nconst [major, minor, patch] = version.split(\".\");\nlet sdkInfo = {\n    type: SdkType.PLAIN_JAVASCRIPT,\n    major,\n    minor,\n    patch\n};\nlet osInfo;\nlet deviceInfo;\nlet webRtcInfo;\nconst setSdkInfo = (info)=>{\n    sdkInfo = info;\n};\nconst getSdkInfo = ()=>{\n    return sdkInfo;\n};\nconst setOSInfo = (info)=>{\n    osInfo = info;\n};\nconst getOSInfo = ()=>{\n    return osInfo;\n};\nconst setDeviceInfo = (info)=>{\n    deviceInfo = info;\n};\nconst getDeviceInfo = ()=>{\n    return deviceInfo;\n};\nconst getWebRTCInfo = ()=>{\n    return webRtcInfo;\n};\nconst setWebRTCInfo = (info)=>{\n    webRtcInfo = info;\n};\nconst getClientDetails = ()=>{\n    if (isReactNative()) {\n        // Since RN doesn't support web, sharing browser info is not required\n        return {\n            sdk: getSdkInfo(),\n            os: getOSInfo(),\n            device: getDeviceInfo()\n        };\n    }\n    const userAgent = new ua_parser_js__WEBPACK_IMPORTED_MODULE_3__.UAParser(navigator.userAgent);\n    const { browser, os, device, cpu } = userAgent.getResult();\n    return {\n        sdk: getSdkInfo(),\n        browser: {\n            name: browser.name || navigator.userAgent,\n            version: browser.version || \"\"\n        },\n        os: {\n            name: os.name || \"\",\n            version: os.version || \"\",\n            architecture: cpu.architecture || \"\"\n        },\n        device: {\n            name: [\n                device.vendor,\n                device.model,\n                device.type\n            ].filter(Boolean).join(\" \"),\n            version: \"\"\n        }\n    };\n};\nconst DEFAULT_BITRATE = 1250000;\nconst defaultTargetResolution = {\n    bitrate: DEFAULT_BITRATE,\n    width: 1280,\n    height: 720\n};\nconst defaultBitratePerRid = {\n    q: 300000,\n    h: 750000,\n    f: DEFAULT_BITRATE\n};\n/**\n * Determines the most optimal video layers for simulcasting\n * for the given track.\n *\n * @param videoTrack the video track to find optimal layers for.\n * @param targetResolution the expected target resolution.\n */ const findOptimalVideoLayers = (videoTrack, targetResolution = defaultTargetResolution)=>{\n    const optimalVideoLayers = [];\n    const settings = videoTrack.getSettings();\n    const { width: w = 0, height: h = 0 } = settings;\n    const isRNIos = isReactNative() && getOSInfo()?.name.toLowerCase() === \"ios\";\n    const maxBitrate = getComputedMaxBitrate(targetResolution, w, h);\n    let downscaleFactor = 1;\n    [\n        \"f\",\n        \"h\",\n        \"q\"\n    ].forEach((rid)=>{\n        // Reversing the order [f, h, q] to [q, h, f] as Chrome uses encoding index\n        // when deciding which layer to disable when CPU or bandwidth is constrained.\n        // Encodings should be ordered in increasing spatial resolution order.\n        optimalVideoLayers.unshift({\n            active: true,\n            rid,\n            width: Math.round(w / downscaleFactor),\n            height: Math.round(h / downscaleFactor),\n            maxBitrate: Math.round(maxBitrate / downscaleFactor) || defaultBitratePerRid[rid],\n            scaleResolutionDownBy: downscaleFactor,\n            // Simulcast on iOS React-Native requires all encodings to share the same framerate\n            maxFramerate: {\n                f: 30,\n                h: isRNIos ? 30 : 25,\n                q: isRNIos ? 30 : 20\n            }[rid]\n        });\n        downscaleFactor *= 2;\n    });\n    // for simplicity, we start with all layers enabled, then this function\n    // will clear/reassign the layers that are not needed\n    return withSimulcastConstraints(settings, optimalVideoLayers);\n};\n/**\n * Computes the maximum bitrate for a given resolution.\n * If the current resolution is lower than the target resolution,\n * we want to proportionally reduce the target bitrate.\n * If the current resolution is higher than the target resolution,\n * we want to use the target bitrate.\n *\n * @param targetResolution the target resolution.\n * @param currentWidth the current width of the track.\n * @param currentHeight the current height of the track.\n */ const getComputedMaxBitrate = (targetResolution, currentWidth, currentHeight)=>{\n    // if the current resolution is lower than the target resolution,\n    // we want to proportionally reduce the target bitrate\n    const { width: targetWidth, height: targetHeight } = targetResolution;\n    if (currentWidth < targetWidth || currentHeight < targetHeight) {\n        const currentPixels = currentWidth * currentHeight;\n        const targetPixels = targetWidth * targetHeight;\n        const reductionFactor = currentPixels / targetPixels;\n        return Math.round(targetResolution.bitrate * reductionFactor);\n    }\n    return targetResolution.bitrate;\n};\n/**\n * Browsers have different simulcast constraints for different video resolutions.\n *\n * This function modifies the provided list of video layers according to the\n * current implementation of simulcast constraints in the Chromium based browsers.\n *\n * https://chromium.googlesource.com/external/webrtc/+/refs/heads/main/media/engine/simulcast.cc#90\n */ const withSimulcastConstraints = (settings, optimalVideoLayers)=>{\n    let layers;\n    const size = Math.max(settings.width || 0, settings.height || 0);\n    if (size <= 320) {\n        // provide only one layer 320x240 (q), the one with the highest quality\n        layers = optimalVideoLayers.filter((layer)=>layer.rid === \"f\");\n    } else if (size <= 640) {\n        // provide two layers, 160x120 (q) and 640x480 (h)\n        layers = optimalVideoLayers.filter((layer)=>layer.rid !== \"h\");\n    } else {\n        // provide three layers for sizes > 640x480\n        layers = optimalVideoLayers;\n    }\n    const ridMapping = [\n        \"q\",\n        \"h\",\n        \"f\"\n    ];\n    return layers.map((layer, index)=>({\n            ...layer,\n            rid: ridMapping[index]\n        }));\n};\nconst findOptimalScreenSharingLayers = (videoTrack, preferences, defaultMaxBitrate = 3000000)=>{\n    const settings = videoTrack.getSettings();\n    return [\n        {\n            active: true,\n            rid: \"q\",\n            width: settings.width || 0,\n            height: settings.height || 0,\n            scaleResolutionDownBy: 1,\n            maxBitrate: preferences?.maxBitrate ?? defaultMaxBitrate,\n            maxFramerate: preferences?.maxFramerate ?? 30\n        }\n    ];\n};\nconst trackTypeToParticipantStreamKey = (trackType)=>{\n    switch(trackType){\n        case TrackType.SCREEN_SHARE:\n            return \"screenShareStream\";\n        case TrackType.SCREEN_SHARE_AUDIO:\n            return \"screenShareAudioStream\";\n        case TrackType.VIDEO:\n            return \"videoStream\";\n        case TrackType.AUDIO:\n            return \"audioStream\";\n        case TrackType.UNSPECIFIED:\n            throw new Error(\"Track type is unspecified\");\n        default:\n            const exhaustiveTrackTypeCheck = trackType;\n            throw new Error(`Unknown track type: ${exhaustiveTrackTypeCheck}`);\n    }\n};\nconst muteTypeToTrackType = (muteType)=>{\n    switch(muteType){\n        case \"audio\":\n            return TrackType.AUDIO;\n        case \"video\":\n            return TrackType.VIDEO;\n        case \"screenshare\":\n            return TrackType.SCREEN_SHARE;\n        case \"screenshare_audio\":\n            return TrackType.SCREEN_SHARE_AUDIO;\n        default:\n            const exhaustiveMuteTypeCheck = muteType;\n            throw new Error(`Unknown mute type: ${exhaustiveMuteTypeCheck}`);\n    }\n};\n/**\n * Runs async functions serially. Useful for wrapping async actions that\n * should never run simultaneously: if marked with the same tag, functions\n * will run one after another.\n *\n * @param tag Async functions with the same tag will run serially. Async functions\n * with different tags can run in parallel.\n * @param cb Async function to run.\n * @returns Promise that resolves when async functions returns.\n */ const withoutConcurrency = createRunner(wrapWithContinuationTracking);\n/**\n * Runs async functions serially, and cancels all other actions with the same tag\n * when a new action is scheduled. Useful for wrapping async actions that override\n * each other (e.g. enabling and disabling camera).\n *\n * If an async function hasn't started yet and was canceled, it will never run.\n * If an async function is already running and was canceled, it will be notified\n * via an abort signal passed as an argument.\n *\n * @param tag Async functions with the same tag will run serially and are canceled\n * when a new action with the same tag is scheduled.\n * @param cb Async function to run. Receives AbortSignal as the only argument.\n * @returns Promise that resolves when async functions returns. If the function didn't\n * start and was canceled, will resolve with 'canceled'. If the function started to run,\n * it's up to the function to decide how to react to cancelation.\n */ const withCancellation = createRunner(wrapWithCancellation);\nconst pendingPromises = new Map();\nasync function settled(tag) {\n    await pendingPromises.get(tag)?.promise;\n}\n/**\n * Implements common functionality of running async functions serially, by chaining\n * their promises one after another.\n *\n * Before running, async function is \"wrapped\" using the provided wrapper. This wrapper\n * can add additional steps to run before or after the function.\n *\n * When async function is scheduled to run, the previous function is notified\n * by calling the associated onContinued callback. This behavior of this callback\n * is defined by the wrapper.\n */ function createRunner(wrapper) {\n    return function run(tag, cb) {\n        const { cb: wrapped, onContinued } = wrapper(tag, cb);\n        const pending = pendingPromises.get(tag);\n        pending?.onContinued();\n        const promise = pending ? pending.promise.then(wrapped, wrapped) : wrapped();\n        pendingPromises.set(tag, {\n            promise,\n            onContinued\n        });\n        return promise;\n    };\n}\n/**\n * Wraps an async function with an additional step run after the function:\n * if the function is the last in the queue, it cleans up the whole chain\n * of promises after finishing.\n */ function wrapWithContinuationTracking(tag, cb) {\n    let hasContinuation = false;\n    const wrapped = ()=>cb().finally(()=>{\n            if (!hasContinuation) {\n                pendingPromises.delete(tag);\n            }\n        });\n    const onContinued = ()=>hasContinuation = true;\n    return {\n        cb: wrapped,\n        onContinued\n    };\n}\n/**\n * Wraps an async function with additional functionalilty:\n * 1. Associates an abort signal with every function, that is passed to it\n *    as an argument. When a new function is scheduled to run after the current\n *    one, current signal is aborted.\n * 2. If current function didn't start and was aborted, in will never start.\n * 3. If the function is the last in the queue, it cleans up the whole chain\n *    of promises after finishing.\n */ function wrapWithCancellation(tag, cb) {\n    const ac = new AbortController();\n    const wrapped = ()=>{\n        if (ac.signal.aborted) {\n            return Promise.resolve(\"canceled\");\n        }\n        return cb(ac.signal).finally(()=>{\n            if (!ac.signal.aborted) {\n                pendingPromises.delete(tag);\n            }\n        });\n    };\n    const onContinued = ()=>ac.abort();\n    return {\n        cb: wrapped,\n        onContinued\n    };\n}\n/**\n * Checks if the provided update is a function patch.\n *\n * @param update the value to check.\n */ const isFunctionPatch = (update)=>typeof update === \"function\";\n/**\n * Gets the current value of an observable, or undefined if the observable has\n * not emitted a value yet.\n *\n * @param observable$ the observable to get the value from.\n */ const getCurrentValue = (observable$)=>{\n    let value;\n    let err = undefined;\n    (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n        observable$\n    ]).subscribe({\n        next: ([v])=>{\n            value = v;\n        },\n        error: (e)=>{\n            err = e;\n        }\n    }).unsubscribe();\n    if (err) throw err;\n    return value;\n};\n/**\n * Updates the value of the provided Subject.\n * An `update` can either be a new value or a function which takes\n * the current value and returns a new value.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n * @return the updated value.\n */ const setCurrentValue = (subject, update)=>{\n    const next = isFunctionPatch(update) ? update(getCurrentValue(subject)) : update;\n    subject.next(next);\n    return next;\n};\n/**\n * Creates a subscription and returns a function to unsubscribe.\n *\n * @param observable the observable to subscribe to.\n * @param handler the handler to call when the observable emits a value.\n */ const createSubscription = (observable, handler)=>{\n    const subscription = observable.subscribe(handler);\n    return ()=>{\n        subscription.unsubscribe();\n    };\n};\n/**\n * Creates a subscription and returns a function to unsubscribe. Makes sure that\n * only one async handler runs at the same time. If updates come in quicker than\n * it takes for the current handler to finish, other handlers will wait.\n *\n * @param observable the observable to subscribe to.\n * @param handler the async handler to call when the observable emits a value.\n */ const createSafeAsyncSubscription = (observable, handler)=>{\n    const tag = Symbol();\n    const subscription = observable.subscribe((value)=>{\n        withoutConcurrency(tag, ()=>handler(value));\n    });\n    return ()=>{\n        subscription.unsubscribe();\n    };\n};\nvar rxUtils = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    createSafeAsyncSubscription: createSafeAsyncSubscription,\n    createSubscription: createSubscription,\n    getCurrentValue: getCurrentValue,\n    setCurrentValue: setCurrentValue\n});\n/**\n * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.\n * The comparators are applied in the order they are given (left -> right).\n *\n * @param comparators the comparators to use for sorting.\n * @returns a combined {@link Comparator<T>}.\n */ const combineComparators = (...comparators)=>{\n    return (a, b)=>{\n        for (const comparator of comparators){\n            const result = comparator(a, b);\n            if (result !== 0) return result;\n        }\n        return 0;\n    };\n};\n/**\n * Creates a new comparator which sorts items in descending order.\n *\n * @example\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const byValueDesc = descending(byValue);\n *\n * @param comparator the comparator to wrap.\n */ const descending = (comparator)=>{\n    return (a, b)=>comparator(b, a);\n};\n/**\n * Creates a new comparator which conditionally applies the given comparator.\n *\n * @example\n * const shouldSortByValue = (a, b) => a % 2 === 0; // return false to turn it off\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const comparator = conditional(shouldSortByValue)(byValue);\n *\n * @param predicate the predicate to use for determining whether to apply the comparator.\n */ const conditional = (predicate)=>{\n    return (comparator)=>{\n        return (a, b)=>{\n            if (!predicate(a, b)) return 0;\n            return comparator(a, b);\n        };\n    };\n};\n/**\n * A no-op comparator which always returns 0.\n */ const noopComparator = ()=>{\n    return ()=>0;\n};\n/**\n * Check if a participant has a video.\n *\n * @param p the participant to check.\n */ const hasVideo = (p)=>p.publishedTracks.includes(TrackType.VIDEO);\n/**\n * Check if a participant has audio.\n *\n * @param p the participant to check.\n */ const hasAudio = (p)=>p.publishedTracks.includes(TrackType.AUDIO);\n/**\n * Check if a participant is screen sharing.\n *\n * @param p the participant to check.\n */ const hasScreenShare = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE);\n/**\n * Check if a participant is screen sharing audio.\n *\n * @param p the participant to check.\n */ const hasScreenShareAudio = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE_AUDIO);\n/**\n * Check if the participant is pinned.\n *\n * @param p the participant.\n */ const isPinned = (p)=>!!p.pin && (p.pin.isLocalPin || p.pin.pinnedAt > 0);\n/**\n * A comparator which sorts participants by the fact that they are the dominant speaker or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const dominantSpeaker = (a, b)=>{\n    if (a.isDominantSpeaker && !b.isDominantSpeaker) return -1;\n    if (!a.isDominantSpeaker && b.isDominantSpeaker) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by the fact that they are speaking or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const speaking = (a, b)=>{\n    if (a.isSpeaking && !b.isSpeaking) return -1;\n    if (!a.isSpeaking && b.isSpeaking) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by screen sharing status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const screenSharing = (a, b)=>{\n    if (hasScreenShare(a) && !hasScreenShare(b)) return -1;\n    if (!hasScreenShare(a) && hasScreenShare(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by video status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingVideo = (a, b)=>{\n    if (hasVideo(a) && !hasVideo(b)) return -1;\n    if (!hasVideo(a) && hasVideo(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by audio status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingAudio = (a, b)=>{\n    if (hasAudio(a) && !hasAudio(b)) return -1;\n    if (!hasAudio(a) && hasAudio(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which prioritizes participants who are pinned.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const pinned = (a, b)=>{\n    if (a.pin && b.pin) {\n        if (!a.pin.isLocalPin && b.pin.isLocalPin) return -1;\n        if (a.pin.isLocalPin && !b.pin.isLocalPin) return 1;\n        if (a.pin.pinnedAt > b.pin.pinnedAt) return -1;\n        if (a.pin.pinnedAt < b.pin.pinnedAt) return 1;\n    }\n    if (a.pin && !b.pin) return -1;\n    if (!a.pin && b.pin) return 1;\n    return 0;\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific reaction.\n *\n * @param type the reaction type.\n */ const reactionType = (type)=>{\n    return (a, b)=>{\n        if (a.reaction?.type === type && b.reaction?.type !== type) return -1;\n        if (a.reaction?.type !== type && b.reaction?.type === type) return 1;\n        return 0;\n    };\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific role.\n *\n * @param roles the roles to prioritize.\n */ const role = (...roles)=>(a, b)=>{\n        if (hasAnyRole(a, roles) && !hasAnyRole(b, roles)) return -1;\n        if (!hasAnyRole(a, roles) && hasAnyRole(b, roles)) return 1;\n        return 0;\n    };\n/**\n * A comparator which sorts participants by name.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const name = (a, b)=>{\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n};\nconst hasAnyRole = (p, roles)=>(p.roles || []).some((r)=>roles.includes(r));\n// a comparator decorator which applies the decorated comparator only if the\n// participant is invisible.\n// This ensures stable sorting when all participants are visible.\nconst ifInvisibleBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE);\n/**\n * A comparator that applies the decorated comparator when a participant is\n * either invisible or its visibility state isn't known.\n * For visible participants, it ensures stable sorting.\n */ const ifInvisibleOrUnknownBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || a.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN);\n/**\n * The default sorting preset.\n */ const defaultSortPreset = combineComparators(pinned, screenSharing, ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for speaker layout.\n */ const speakerLayoutSortPreset = combineComparators(pinned, screenSharing, dominantSpeaker, ifInvisibleBy(combineComparators(speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for layouts that don't render all participants but\n * instead, render them in pages.\n */ const paginatedLayoutSortPreset = combineComparators(pinned, ifInvisibleOrUnknownBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for livestreams and audio rooms.\n */ const livestreamOrAudioRoomSortPreset = combineComparators(ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)), role(\"admin\", \"host\", \"speaker\"));\n/**\n * Represents the state of the current call.\n */ var CallingState;\n(function(CallingState) {\n    /**\n     * The call is in an unknown state.\n     */ CallingState[\"UNKNOWN\"] = \"unknown\";\n    /**\n     * The call is in an idle state.\n     */ CallingState[\"IDLE\"] = \"idle\";\n    /**\n     * The call is in the process of ringing.\n     * (User hasn't accepted nor rejected the call yet.)\n     */ CallingState[\"RINGING\"] = \"ringing\";\n    /**\n     * The call is in the process of joining.\n     */ CallingState[\"JOINING\"] = \"joining\";\n    /**\n     * The call is currently active.\n     */ CallingState[\"JOINED\"] = \"joined\";\n    /**\n     * The call has been left.\n     */ CallingState[\"LEFT\"] = \"left\";\n    /**\n     * The call is in the process of reconnecting.\n     */ CallingState[\"RECONNECTING\"] = \"reconnecting\";\n    /**\n     * The call is in the process of migrating from one node to another.\n     */ CallingState[\"MIGRATING\"] = \"migrating\";\n    /**\n     * The call has failed to reconnect.\n     */ CallingState[\"RECONNECTING_FAILED\"] = \"reconnecting-failed\";\n    /**\n     * The call is in offline mode.\n     */ CallingState[\"OFFLINE\"] = \"offline\";\n})(CallingState || (CallingState = {}));\n/**\n * Returns the default egress object - when no egress data is available.\n */ const defaultEgress = {\n    broadcasting: false,\n    hls: {\n        playlist_url: \"\"\n    },\n    rtmps: []\n};\n/**\n * Holds the state of the current call.\n * @react You don't have to use this class directly, as we are exposing the state through Hooks.\n */ class CallState {\n    /**\n     * Creates a new instance of the CallState class.\n     *\n     */ constructor(){\n        this.backstageSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(true);\n        this.blockedUserIdsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.createdAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(new Date());\n        this.endedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.startsAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.updatedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(new Date());\n        this.createdBySubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.customSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject({});\n        this.egressSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.ingressSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.recordingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(false);\n        this.sessionSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.transcribingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(false);\n        this.endedBySubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.thumbnailsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.membersSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.ownCapabilitiesSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.callingStateSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(CallingState.UNKNOWN);\n        this.startedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.participantCountSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(0);\n        this.anonymousParticipantCountSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(0);\n        this.participantsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.callStatsReportSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.logger = getLogger([\n            \"CallState\"\n        ]);\n        /**\n         * A list of comparators that are used to sort the participants.\n         *\n         * @private\n         */ this.sortParticipantsBy = defaultSortPreset;\n        /**\n         * Sets the list of criteria that are used to sort the participants.\n         * To disable sorting, you can pass `noopComparator()`.\n         *\n         * @param comparator the comparator to use to sort the participants.\n         */ this.setSortParticipantsBy = (comparator)=>{\n            this.sortParticipantsBy = comparator;\n            // trigger re-sorting of participants\n            this.setCurrentValue(this.participantsSubject, (ps)=>ps);\n        };\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        /**\n         * Sets the number of participants in the current call.\n         *\n         * @internal\n         * @param count the number of participants.\n         */ this.setParticipantCount = (count)=>{\n            return this.setCurrentValue(this.participantCountSubject, count);\n        };\n        /**\n         * Sets the time the call session actually started.\n         *\n         * @internal\n         * @param startedAt the time the call session actually started.\n         */ this.setStartedAt = (startedAt)=>{\n            return this.setCurrentValue(this.startedAtSubject, startedAt);\n        };\n        /**\n         * Sets the number of anonymous participants in the current call.\n         *\n         * @internal\n         * @param count the number of anonymous participants.\n         */ this.setAnonymousParticipantCount = (count)=>{\n            return this.setCurrentValue(this.anonymousParticipantCountSubject, count);\n        };\n        /**\n         * Sets the list of participants in the current call.\n         *\n         * @internal\n         *\n         * @param participants the list of participants.\n         */ this.setParticipants = (participants)=>{\n            return this.setCurrentValue(this.participantsSubject, participants);\n        };\n        /**\n         * Sets the calling state.\n         *\n         * @internal\n         * @param state the new calling state.\n         */ this.setCallingState = (state)=>{\n            return this.setCurrentValue(this.callingStateSubject, state);\n        };\n        /**\n         * Sets the call stats report.\n         *\n         * @internal\n         * @param report the report to set.\n         */ this.setCallStatsReport = (report)=>{\n            return this.setCurrentValue(this.callStatsReportSubject, report);\n        };\n        /**\n         * Sets the members of the current call.\n         *\n         * @internal\n         * @param members the members to set.\n         */ this.setMembers = (members)=>{\n            this.setCurrentValue(this.membersSubject, members);\n        };\n        /**\n         * Sets the own capabilities.\n         *\n         * @internal\n         * @param capabilities the capabilities to set.\n         */ this.setOwnCapabilities = (capabilities)=>{\n            return this.setCurrentValue(this.ownCapabilitiesSubject, capabilities);\n        };\n        /**\n         * Will try to find the participant with the given sessionId in the current call.\n         *\n         * @param sessionId the sessionId of the participant to find.\n         * @returns the participant with the given sessionId or undefined if not found.\n         */ this.findParticipantBySessionId = (sessionId)=>{\n            return this.participants.find((p)=>p.sessionId === sessionId);\n        };\n        /**\n         * Returns a new lookup table of participants indexed by their session ID.\n         */ this.getParticipantLookupBySessionId = ()=>{\n            return this.participants.reduce((lookupTable, participant)=>{\n                lookupTable[participant.sessionId] = participant;\n                return lookupTable;\n            }, {});\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If the participant can't be found, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param patch the patch to apply to the participant.\n         * @returns the updated participant or `undefined` if the participant couldn't be found.\n         */ this.updateParticipant = (sessionId, patch)=>{\n            const participant = this.findParticipantBySessionId(sessionId);\n            if (!participant) {\n                this.logger(\"warn\", `Participant with sessionId ${sessionId} not found`);\n                return;\n            }\n            const thePatch = typeof patch === \"function\" ? patch(participant) : patch;\n            const updatedParticipant = {\n                // FIXME OL: this is not a deep merge, we might want to revisit this\n                ...participant,\n                ...thePatch\n            };\n            return this.setParticipants((participants)=>participants.map((p)=>p.sessionId === sessionId ? updatedParticipant : p));\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If a participant with matching `sessionId` can't be found, the provided\n         * `participant` is added to the list of participants.\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param participant the participant to update or add.\n         */ this.updateOrAddParticipant = (sessionId, participant)=>{\n            return this.setParticipants((participants)=>{\n                let add = true;\n                const nextParticipants = participants.map((p)=>{\n                    if (p.sessionId === sessionId) {\n                        add = false;\n                        return {\n                            ...p,\n                            ...participant\n                        };\n                    }\n                    return p;\n                });\n                if (add) nextParticipants.push(participant);\n                return nextParticipants;\n            });\n        };\n        /**\n         * Updates all participants in the current call whose session ID is in the given `sessionIds`.\n         * If no patches are provided, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param patch the patch to apply to the participants.\n         * @returns all participants, with all patch applied.\n         */ this.updateParticipants = (patch)=>{\n            if (Object.keys(patch).length === 0) return;\n            return this.setParticipants((participants)=>participants.map((p)=>{\n                    const thePatch = patch[p.sessionId];\n                    if (thePatch) {\n                        return {\n                            ...p,\n                            ...thePatch\n                        };\n                    }\n                    return p;\n                }));\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param event the video event that our backend sent us.\n         */ this.updateFromEvent = (event)=>{\n            const update = this.eventHandlers[event.type];\n            if (update) {\n                update(event);\n            }\n        };\n        /**\n         * Updates the participant pinned state with server side pinning data.\n         *\n         * @param pins the latest pins from the server.\n         */ this.setServerSidePins = (pins)=>{\n            const pinsLookup = pins.reduce((lookup, pin)=>{\n                lookup[pin.sessionId] = Date.now();\n                return lookup;\n            }, {});\n            return this.setParticipants((participants)=>participants.map((participant)=>{\n                    const serverSidePinnedAt = pinsLookup[participant.sessionId];\n                    // the participant is newly pinned\n                    if (serverSidePinnedAt) {\n                        return {\n                            ...participant,\n                            pin: {\n                                isLocalPin: false,\n                                pinnedAt: serverSidePinnedAt\n                            }\n                        };\n                    }\n                    // the participant is no longer pinned server side\n                    // we need to reset the pin\n                    if (participant.pin && !participant.pin.isLocalPin) {\n                        return {\n                            ...participant,\n                            pin: undefined\n                        };\n                    }\n                    // no changes to be applied\n                    return participant;\n                }));\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param call the call response from the server.\n         */ this.updateFromCallResponse = (call)=>{\n            this.setCurrentValue(this.backstageSubject, call.backstage);\n            this.setCurrentValue(this.blockedUserIdsSubject, call.blocked_user_ids);\n            this.setCurrentValue(this.createdAtSubject, new Date(call.created_at));\n            this.setCurrentValue(this.updatedAtSubject, new Date(call.updated_at));\n            this.setCurrentValue(this.startsAtSubject, call.starts_at ? new Date(call.starts_at) : undefined);\n            this.setCurrentValue(this.endedAtSubject, call.ended_at ? new Date(call.ended_at) : undefined);\n            this.setCurrentValue(this.createdBySubject, call.created_by);\n            this.setCurrentValue(this.customSubject, call.custom);\n            this.setCurrentValue(this.egressSubject, call.egress);\n            this.setCurrentValue(this.ingressSubject, call.ingress);\n            this.setCurrentValue(this.recordingSubject, call.recording);\n            const s = this.setCurrentValue(this.sessionSubject, call.session);\n            this.updateParticipantCountFromSession(s);\n            this.setCurrentValue(this.settingsSubject, call.settings);\n            this.setCurrentValue(this.transcribingSubject, call.transcribing);\n            this.setCurrentValue(this.thumbnailsSubject, call.thumbnails);\n        };\n        this.updateFromMemberRemoved = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>members.filter((m)=>event.members.indexOf(m.user_id) === -1));\n        };\n        this.updateFromMemberAdded = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>[\n                    ...members,\n                    ...event.members\n                ]);\n        };\n        this.updateFromHLSBroadcastStopped = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastingFailed = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastStarted = (event)=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: true,\n                    hls: {\n                        ...egress.hls,\n                        playlist_url: event.hls_playlist_url\n                    }\n                }));\n        };\n        this.updateParticipantCountFromSession = (session)=>{\n            // when in JOINED state, we should use the participant count coming through\n            // the SFU healthcheck event, as it's more accurate.\n            if (!session || this.callingState === CallingState.JOINED) return;\n            const byRoleCount = Object.values(session.participants_count_by_role).reduce((total, countByRole)=>total + countByRole, 0);\n            const participantCount = Math.max(byRoleCount, session.participants.length);\n            this.setParticipantCount(participantCount);\n            this.setAnonymousParticipantCount(session.anonymous_participant_count || 0);\n        };\n        this.updateFromSessionParticipantCountUpdate = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                return {\n                    ...session,\n                    anonymous_participant_count: event.anonymous_participant_count,\n                    participants_count_by_role: event.participants_count_by_role\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateFromSessionParticipantLeft = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                return {\n                    ...session,\n                    participants: participants.filter((p)=>p.user_session_id !== user_session_id),\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: Math.max(0, (participants_count_by_role[user.role] || 0) - 1)\n                    }\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateFromSessionParticipantJoined = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                // It could happen that the backend delivers the same participant more than once.\n                // Once with the call.session_started event and once again with the\n                // call.session_participant_joined event. In this case,\n                // we should update the existing participant and prevent duplicating it.\n                let shouldInsertParticipant = true;\n                const updatedParticipants = participants.map((p)=>{\n                    if (p.user_session_id === user_session_id) {\n                        shouldInsertParticipant = false;\n                        return event.participant;\n                    }\n                    return p;\n                });\n                if (shouldInsertParticipant) {\n                    // this is a new array, we can safely push the new participant\n                    updatedParticipants.push(event.participant);\n                }\n                // If we are updating an existing participant, we don't want to increment\n                // the participant_by_role count.\n                const increment = shouldInsertParticipant ? 1 : 0;\n                return {\n                    ...session,\n                    participants: updatedParticipants,\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: (participants_count_by_role[user.role] || 0) + increment\n                    }\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateMembers = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>members.map((member)=>{\n                    const memberUpdate = event.members.find((m)=>m.user_id === member.user_id);\n                    return memberUpdate ? memberUpdate : member;\n                }));\n        };\n        this.updateParticipantReaction = (event)=>{\n            const { user, custom, type, emoji_code } = event.reaction;\n            this.setParticipants((participants)=>{\n                return participants.map((p)=>{\n                    // skip if the reaction is not for this participant\n                    if (p.userId !== user.id) return p;\n                    // update the participant with the new reaction\n                    return {\n                        ...p,\n                        reaction: {\n                            type,\n                            emoji_code,\n                            custom\n                        }\n                    };\n                });\n            });\n        };\n        this.unblockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>{\n                if (!current) return current;\n                return current.filter((id)=>id !== event.user.id);\n            });\n        };\n        this.blockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>[\n                    ...current || [],\n                    event.user.id\n                ]);\n        };\n        this.updateOwnCapabilities = (event)=>{\n            if (event.user.id === this.localParticipant?.userId) {\n                this.setCurrentValue(this.ownCapabilitiesSubject, event.own_capabilities);\n            }\n        };\n        this.participants$ = this.participantsSubject.asObservable().pipe(// maintain stable-sort by mutating the participants stored\n        // in the original subject\n        (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((ps)=>ps.sort(this.sortParticipantsBy)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.localParticipant$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.find((p)=>p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.remoteParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.filter((p)=>!p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.pinnedParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.filter((p)=>!!p.pin)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.dominantSpeaker$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.find((p)=>p.isDominantSpeaker)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.hasOngoingScreenShare$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.some((p)=>hasScreenShare(p))), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        // dates\n        this.createdAt$ = this.createdAtSubject.asObservable();\n        this.endedAt$ = this.endedAtSubject.asObservable();\n        this.startsAt$ = this.startsAtSubject.asObservable();\n        this.startedAt$ = this.startedAtSubject.asObservable();\n        this.updatedAt$ = this.updatedAtSubject.asObservable();\n        this.callStatsReport$ = this.callStatsReportSubject.asObservable();\n        this.members$ = this.membersSubject.asObservable();\n        // complex objects should work as streams of data\n        this.createdBy$ = this.createdBySubject.asObservable();\n        this.custom$ = this.customSubject.asObservable();\n        this.egress$ = this.egressSubject.asObservable();\n        this.ingress$ = this.ingressSubject.asObservable();\n        this.session$ = this.sessionSubject.asObservable();\n        this.settings$ = this.settingsSubject.asObservable();\n        this.endedBy$ = this.endedBySubject.asObservable();\n        this.thumbnails$ = this.thumbnailsSubject.asObservable();\n        /**\n         * Performs shallow comparison of two arrays.\n         * Expects primitive values: [1, 2, 3] is equal to [2, 1, 3].\n         */ const isShallowEqual = (a, b)=>{\n            if (a.length !== b.length) return false;\n            for (const item of a)if (!b.includes(item)) return false;\n            for (const item of b)if (!a.includes(item)) return false;\n            return true;\n        };\n        /**\n         * Creates an Observable from the given subject by piping to the\n         * `distinctUntilChanged()` operator.\n         */ const duc = (subject, comparator)=>subject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)(comparator));\n        // primitive values should only emit once the value they hold changes\n        this.anonymousParticipantCount$ = duc(this.anonymousParticipantCountSubject);\n        this.blockedUserIds$ = duc(this.blockedUserIdsSubject, isShallowEqual);\n        this.backstage$ = duc(this.backstageSubject);\n        this.callingState$ = duc(this.callingStateSubject);\n        this.ownCapabilities$ = duc(this.ownCapabilitiesSubject, isShallowEqual);\n        this.participantCount$ = duc(this.participantCountSubject);\n        this.recording$ = duc(this.recordingSubject);\n        this.transcribing$ = duc(this.transcribingSubject);\n        this.eventHandlers = {\n            // these events are not updating the call state:\n            \"call.closed_caption\": undefined,\n            \"call.deleted\": undefined,\n            \"call.permission_request\": undefined,\n            \"call.recording_ready\": undefined,\n            \"call.transcription_ready\": undefined,\n            \"call.user_muted\": undefined,\n            \"connection.error\": undefined,\n            \"connection.ok\": undefined,\n            \"health.check\": undefined,\n            \"user.banned\": undefined,\n            \"user.deactivated\": undefined,\n            \"user.deleted\": undefined,\n            \"user.muted\": undefined,\n            \"user.presence.changed\": undefined,\n            \"user.reactivated\": undefined,\n            \"user.unbanned\": undefined,\n            \"user.updated\": undefined,\n            custom: undefined,\n            // events that update call state:\n            \"call.accepted\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.blocked_user\": this.blockUser,\n            \"call.created\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.ended\": (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setCurrentValue(this.endedBySubject, e.user);\n            },\n            \"call.hls_broadcasting_failed\": this.updateFromHLSBroadcastingFailed,\n            \"call.hls_broadcasting_started\": this.updateFromHLSBroadcastStarted,\n            \"call.hls_broadcasting_stopped\": this.updateFromHLSBroadcastStopped,\n            \"call.live_started\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.member_added\": this.updateFromMemberAdded,\n            \"call.member_removed\": this.updateFromMemberRemoved,\n            \"call.member_updated_permission\": this.updateMembers,\n            \"call.member_updated\": this.updateMembers,\n            \"call.notification\": (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setMembers(e.members);\n            },\n            \"call.permissions_updated\": this.updateOwnCapabilities,\n            \"call.reaction_new\": this.updateParticipantReaction,\n            \"call.recording_started\": ()=>this.setCurrentValue(this.recordingSubject, true),\n            \"call.recording_stopped\": ()=>this.setCurrentValue(this.recordingSubject, false),\n            \"call.recording_failed\": ()=>this.setCurrentValue(this.recordingSubject, false),\n            \"call.rejected\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.ring\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.missed\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.session_ended\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.session_participant_count_updated\": this.updateFromSessionParticipantCountUpdate,\n            \"call.session_participant_joined\": this.updateFromSessionParticipantJoined,\n            \"call.session_participant_left\": this.updateFromSessionParticipantLeft,\n            \"call.session_started\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.transcription_started\": ()=>{\n                this.setCurrentValue(this.transcribingSubject, true);\n            },\n            \"call.transcription_stopped\": ()=>{\n                this.setCurrentValue(this.transcribingSubject, false);\n            },\n            \"call.transcription_failed\": ()=>{\n                this.setCurrentValue(this.transcribingSubject, false);\n            },\n            \"call.unblocked_user\": this.unblockUser,\n            \"call.updated\": (e)=>this.updateFromCallResponse(e.call)\n        };\n    }\n    /**\n     * The server-side counted number of participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get participantCount() {\n        return this.getCurrentValue(this.participantCount$);\n    }\n    /**\n     * The time the call session actually started.\n     * Useful for displaying the call duration.\n     */ get startedAt() {\n        return this.getCurrentValue(this.startedAt$);\n    }\n    /**\n     * The server-side counted number of anonymous participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get anonymousParticipantCount() {\n        return this.getCurrentValue(this.anonymousParticipantCount$);\n    }\n    /**\n     * The list of participants in the current call.\n     */ get participants() {\n        return this.getCurrentValue(this.participants$);\n    }\n    /**\n     * The local participant in the current call.\n     */ get localParticipant() {\n        return this.getCurrentValue(this.localParticipant$);\n    }\n    /**\n     * The list of remote participants in the current call.\n     */ get remoteParticipants() {\n        return this.getCurrentValue(this.remoteParticipants$);\n    }\n    /**\n     * The dominant speaker in the current call.\n     */ get dominantSpeaker() {\n        return this.getCurrentValue(this.dominantSpeaker$);\n    }\n    /**\n     * The list of pinned participants in the current call.\n     */ get pinnedParticipants() {\n        return this.getCurrentValue(this.pinnedParticipants$);\n    }\n    /**\n     * Tell if there is an ongoing screen share in this call.\n     */ get hasOngoingScreenShare() {\n        return this.getCurrentValue(this.hasOngoingScreenShare$);\n    }\n    /**\n     * The calling state.\n     */ get callingState() {\n        return this.getCurrentValue(this.callingState$);\n    }\n    /**\n     * The call stats report.\n     */ get callStatsReport() {\n        return this.getCurrentValue(this.callStatsReport$);\n    }\n    /**\n     * The members of the current call.\n     */ get members() {\n        return this.getCurrentValue(this.members$);\n    }\n    /**\n     * The capabilities of the current user for the current call.\n     */ get ownCapabilities() {\n        return this.getCurrentValue(this.ownCapabilities$);\n    }\n    /**\n     * The backstage state.\n     */ get backstage() {\n        return this.getCurrentValue(this.backstage$);\n    }\n    /**\n     * Will provide the list of blocked user IDs.\n     */ get blockedUserIds() {\n        return this.getCurrentValue(this.blockedUserIds$);\n    }\n    /**\n     * Will provide the time when this call has been created.\n     */ get createdAt() {\n        return this.getCurrentValue(this.createdAt$);\n    }\n    /**\n     * Will provide the time when this call has been ended.\n     */ get endedAt() {\n        return this.getCurrentValue(this.endedAt$);\n    }\n    /**\n     * Will provide the time when this call has been scheduled to start.\n     */ get startsAt() {\n        return this.getCurrentValue(this.startsAt$);\n    }\n    /**\n     * Will provide the time when this call has been updated.\n     */ get updatedAt() {\n        return this.getCurrentValue(this.updatedAt$);\n    }\n    /**\n     * Will provide the user who created this call.\n     */ get createdBy() {\n        return this.getCurrentValue(this.createdBy$);\n    }\n    /**\n     * Will provide the custom data of this call.\n     */ get custom() {\n        return this.getCurrentValue(this.custom$);\n    }\n    /**\n     * Will provide the egress data of this call.\n     */ get egress() {\n        return this.getCurrentValue(this.egress$);\n    }\n    /**\n     * Will provide the ingress data of this call.\n     */ get ingress() {\n        return this.getCurrentValue(this.ingress$);\n    }\n    /**\n     * Will provide the recording state of this call.\n     */ get recording() {\n        return this.getCurrentValue(this.recording$);\n    }\n    /**\n     * Will provide the session data of this call.\n     */ get session() {\n        return this.getCurrentValue(this.session$);\n    }\n    /**\n     * Will provide the settings of this call.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Will provide the transcribing state of this call.\n     */ get transcribing() {\n        return this.getCurrentValue(this.transcribing$);\n    }\n    /**\n     * Will provide the user who ended this call.\n     */ get endedBy() {\n        return this.getCurrentValue(this.endedBy$);\n    }\n    /**\n     * Will provide the thumbnails of this call, if enabled in the call settings.\n     */ get thumbnails() {\n        return this.getCurrentValue(this.thumbnails$);\n    }\n}\nclass StreamVideoWriteableStateStore {\n    constructor(){\n        /**\n         * A store keeping data of a successfully connected user over WS to the coordinator server.\n         */ this.connectedUserSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * A list of {@link Call} objects created/tracked by this client.\n         */ this.callsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        /**\n         * Sets the currently connected user.\n         *\n         * @internal\n         * @param user the user to set as connected.\n         */ this.setConnectedUser = (user)=>{\n            return this.setCurrentValue(this.connectedUserSubject, user);\n        };\n        /**\n         * Sets the list of {@link Call} objects created/tracked by this client.\n         * @param calls\n         */ this.setCalls = (calls)=>{\n            return this.setCurrentValue(this.callsSubject, calls);\n        };\n        /**\n         * Adds a {@link Call} object to the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to add.\n         */ this.registerCall = (call)=>{\n            if (!this.calls.find((c)=>c.cid === call.cid)) {\n                this.setCalls((calls)=>[\n                        ...calls,\n                        call\n                    ]);\n            }\n        };\n        /**\n         * Removes a {@link Call} object from the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to remove\n         */ this.unregisterCall = (call)=>{\n            return this.setCalls((calls)=>calls.filter((c)=>c !== call));\n        };\n        /**\n         * Finds a {@link Call} object in the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param type the type of call to find.\n         * @param id the id of the call to find.\n         */ this.findCall = (type, id)=>{\n            return this.calls.find((c)=>c.type === type && c.id === id);\n        };\n        this.connectedUserSubject.subscribe(async (user)=>{\n            // leave all calls when the user disconnects.\n            if (!user) {\n                const logger = getLogger([\n                    \"client-state\"\n                ]);\n                for (const call of this.calls){\n                    if (call.state.callingState === CallingState.LEFT) continue;\n                    logger(\"info\", `User disconnected, leaving call: ${call.cid}`);\n                    await call.leave({\n                        reason: \"client.disconnectUser() called\"\n                    }).catch((err)=>{\n                        logger(\"error\", `Error leaving call: ${call.cid}`, err);\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * The currently connected user.\n     */ get connectedUser() {\n        return this.getCurrentValue(this.connectedUserSubject);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return this.getCurrentValue(this.callsSubject);\n    }\n}\n/**\n * A reactive store that exposes state variables in a reactive manner.\n * You can subscribe to changes of the different state variables.\n * This central store contains all the state variables related to [`StreamVideoClient`](./StreamVideClient.md) and [`Call`](./Call.md).\n */ class StreamVideoReadOnlyStateStore {\n    constructor(store){\n        /**\n         * This method allows you the get the current value of a state variable.\n         *\n         * @param observable the observable to get the current value of.\n         * @returns the current value of the observable.\n         */ this.getCurrentValue = getCurrentValue;\n        // convert and expose subjects as observables\n        this.connectedUser$ = store.connectedUserSubject.asObservable();\n        this.calls$ = store.callsSubject.asObservable();\n    }\n    /**\n     * The current user connected over WS to the backend.\n     */ get connectedUser() {\n        return getCurrentValue(this.connectedUser$);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return getCurrentValue(this.calls$);\n    }\n}\nconst getRtpMap = (line)=>{\n    // Example: a=rtpmap:110 opus/48000/2\n    const rtpRegex = /^a=rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/;\n    // The first captured group is the payload type number, the second captured group is the encoding name, the third captured group is the clock rate, and the fourth captured group is any additional parameters.\n    const rtpMatch = rtpRegex.exec(line);\n    if (rtpMatch) {\n        return {\n            original: rtpMatch[0],\n            payload: rtpMatch[1],\n            codec: rtpMatch[2]\n        };\n    }\n};\nconst getFmtp = (line)=>{\n    // Example: a=fmtp:111 minptime=10; useinbandfec=1\n    const fmtpRegex = /^a=fmtp:(\\d*) (.*)/;\n    const fmtpMatch = fmtpRegex.exec(line);\n    // The first captured group is the payload type number, the second captured group is any additional parameters.\n    if (fmtpMatch) {\n        return {\n            original: fmtpMatch[0],\n            payload: fmtpMatch[1],\n            config: fmtpMatch[2]\n        };\n    }\n};\n/**\n * gets the media section for the specified media type.\n * The media section contains the media type, port, codec, and payload type.\n * Example: m=video 9 UDP/TLS/RTP/SAVPF 100 101 96 97 35 36 102 125 127\n */ const getMedia = (line, mediaType)=>{\n    const regex = new RegExp(`(m=${mediaType} \\\\d+ [\\\\w/]+) ([\\\\d\\\\s]+)`);\n    const match = regex.exec(line);\n    if (match) {\n        return {\n            original: match[0],\n            mediaWithPorts: match[1],\n            codecOrder: match[2]\n        };\n    }\n};\nconst getMediaSection = (sdp, mediaType)=>{\n    let media;\n    const rtpMap = [];\n    const fmtp = [];\n    let isTheRequiredMediaSection = false;\n    sdp.split(/(\\r\\n|\\r|\\n)/).forEach((line)=>{\n        const isValidLine = /^([a-z])=(.*)/.test(line);\n        if (!isValidLine) return;\n        /*\n          NOTE: according to https://www.rfc-editor.org/rfc/rfc8866.pdf\n          Each media description starts with an \"m=\" line and continues to the next media description or the end of the whole session description, whichever comes first\n        */ const type = line[0];\n        if (type === \"m\") {\n            const _media = getMedia(line, mediaType);\n            isTheRequiredMediaSection = !!_media;\n            if (_media) {\n                media = _media;\n            }\n        } else if (isTheRequiredMediaSection && type === \"a\") {\n            const rtpMapLine = getRtpMap(line);\n            const fmtpLine = getFmtp(line);\n            if (rtpMapLine) {\n                rtpMap.push(rtpMapLine);\n            } else if (fmtpLine) {\n                fmtp.push(fmtpLine);\n            }\n        }\n    });\n    if (media) {\n        return {\n            media,\n            rtpMap,\n            fmtp\n        };\n    }\n};\n/**\n * Gets the fmtp line corresponding to opus\n */ const getOpusFmtp = (sdp)=>{\n    const section = getMediaSection(sdp, \"audio\");\n    const rtpMap = section?.rtpMap.find((r)=>r.codec.toLowerCase() === \"opus\");\n    const codecId = rtpMap?.payload;\n    if (codecId) {\n        return section?.fmtp.find((f)=>f.payload === codecId);\n    }\n};\n/**\n * Returns an SDP with DTX enabled or disabled.\n */ const toggleDtx = (sdp, enable)=>{\n    const opusFmtp = getOpusFmtp(sdp);\n    if (opusFmtp) {\n        const matchDtx = /usedtx=(\\d)/.exec(opusFmtp.config);\n        const requiredDtxConfig = `usedtx=${enable ? \"1\" : \"0\"}`;\n        if (matchDtx) {\n            const newFmtp = opusFmtp.original.replace(/usedtx=(\\d)/, requiredDtxConfig);\n            return sdp.replace(opusFmtp.original, newFmtp);\n        } else {\n            const newFmtp = `${opusFmtp.original};${requiredDtxConfig}`;\n            return sdp.replace(opusFmtp.original, newFmtp);\n        }\n    }\n    return sdp;\n};\n/**\n * Enables high-quality audio through SDP munging for the given trackMid.\n *\n * @param sdp the SDP to munge.\n * @param trackMid the trackMid.\n * @param maxBitrate the max bitrate to set.\n */ const enableHighQualityAudio = (sdp, trackMid, maxBitrate = 510000)=>{\n    maxBitrate = Math.max(Math.min(maxBitrate, 510000), 96000);\n    const parsedSdp = sdp_transform__WEBPACK_IMPORTED_MODULE_2__.parse(sdp);\n    const audioMedia = parsedSdp.media.find((m)=>m.type === \"audio\" && String(m.mid) === trackMid);\n    if (!audioMedia) return sdp;\n    const opusRtp = audioMedia.rtp.find((r)=>r.codec === \"opus\");\n    if (!opusRtp) return sdp;\n    const opusFmtp = audioMedia.fmtp.find((f)=>f.payload === opusRtp.payload);\n    if (!opusFmtp) return sdp;\n    // enable stereo, if not already enabled\n    if (opusFmtp.config.match(/stereo=(\\d)/)) {\n        opusFmtp.config = opusFmtp.config.replace(/stereo=(\\d)/, \"stereo=1\");\n    } else {\n        opusFmtp.config = `${opusFmtp.config};stereo=1`;\n    }\n    // set maxaveragebitrate, to the given value\n    if (opusFmtp.config.match(/maxaveragebitrate=(\\d*)/)) {\n        opusFmtp.config = opusFmtp.config.replace(/maxaveragebitrate=(\\d*)/, `maxaveragebitrate=${maxBitrate}`);\n    } else {\n        opusFmtp.config = `${opusFmtp.config};maxaveragebitrate=${maxBitrate}`;\n    }\n    return sdp_transform__WEBPACK_IMPORTED_MODULE_2__.write(parsedSdp);\n};\nconst logger$3 = getLogger([\n    \"Publisher\"\n]);\n/**\n * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU\n * @internal\n */ class Publisher {\n    /**\n     * Returns the current connection configuration.\n     *\n     * @internal\n     */ get connectionConfiguration() {\n        if (this.pc.getConfiguration) return this.pc.getConfiguration();\n        return this._connectionConfiguration;\n    }\n    /**\n     * Constructs a new `Publisher` instance.\n     *\n     * @param connectionConfig the connection configuration to use.\n     * @param sfuClient the SFU client to use.\n     * @param state the call state to use.\n     * @param dispatcher the dispatcher to use.\n     * @param isDtxEnabled whether DTX is enabled.\n     * @param isRedEnabled whether RED is enabled.\n     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE once connection goes to `disconnected` state.\n     * @param onUnrecoverableError a callback to call when an unrecoverable error occurs.\n     */ constructor({ connectionConfig, sfuClient, dispatcher, state, isDtxEnabled, isRedEnabled, iceRestartDelay = 2500, onUnrecoverableError }){\n        this.transceiverRegistry = {\n            [TrackType.AUDIO]: undefined,\n            [TrackType.VIDEO]: undefined,\n            [TrackType.SCREEN_SHARE]: undefined,\n            [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.publishOptionsPerTrackType = new Map();\n        /**\n         * An array maintaining the order how transceivers were added to the peer connection.\n         * This is needed because some browsers (Firefox) don't reliably report\n         * trackId and `mid` parameters.\n         *\n         * @private\n         */ this.transceiverInitOrder = [];\n        this.trackKindMapping = {\n            [TrackType.AUDIO]: \"audio\",\n            [TrackType.VIDEO]: \"video\",\n            [TrackType.SCREEN_SHARE]: \"video\",\n            [TrackType.SCREEN_SHARE_AUDIO]: \"audio\",\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.trackLayersCache = {\n            [TrackType.AUDIO]: undefined,\n            [TrackType.VIDEO]: undefined,\n            [TrackType.SCREEN_SHARE]: undefined,\n            [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.isIceRestarting = false;\n        this.createPeerConnection = (connectionConfig)=>{\n            const pc = new RTCPeerConnection(connectionConfig);\n            this._connectionConfiguration = connectionConfig;\n            pc.addEventListener(\"icecandidate\", this.onIceCandidate);\n            pc.addEventListener(\"negotiationneeded\", this.onNegotiationNeeded);\n            pc.addEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            pc.addEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            pc.addEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n            pc.addEventListener(\"signalingstatechange\", this.onSignalingStateChange);\n            return pc;\n        };\n        /**\n         * Closes the publisher PeerConnection and cleans up the resources.\n         */ this.close = ({ stopTracks = true } = {})=>{\n            if (stopTracks) {\n                this.stopPublishing();\n                Object.keys(this.transceiverRegistry).forEach((trackType)=>{\n                    // @ts-ignore\n                    this.transceiverRegistry[trackType] = undefined;\n                });\n                Object.keys(this.trackLayersCache).forEach((trackType)=>{\n                    // @ts-ignore\n                    this.trackLayersCache[trackType] = undefined;\n                });\n            }\n            clearTimeout(this.iceRestartTimeout);\n            this.unsubscribeOnIceRestart();\n            this.pc.removeEventListener(\"negotiationneeded\", this.onNegotiationNeeded);\n            this.pc.close();\n        };\n        /**\n         * Starts publishing the given track of the given media stream.\n         *\n         * Consecutive calls to this method will replace the stream.\n         * The previous stream will be stopped.\n         *\n         * @param mediaStream the media stream to publish.\n         * @param track the track to publish.\n         * @param trackType the track type to publish.\n         * @param opts the optional publish options to use.\n         */ this.publishStream = async (mediaStream, track, trackType, opts = {})=>{\n            if (track.readyState === \"ended\") {\n                throw new Error(`Can't publish a track that has ended already.`);\n            }\n            let transceiver = this.pc.getTransceivers().find((t)=>t === this.transceiverRegistry[trackType] && t.sender.track && t.sender.track?.kind === this.trackKindMapping[trackType]);\n            /**\n             * An event handler which listens for the 'ended' event on the track.\n             * Once the track has ended, it will notify the SFU and update the state.\n             */ const handleTrackEnded = async ()=>{\n                logger$3(\"info\", `Track ${TrackType[trackType]} has ended, notifying the SFU`);\n                await this.notifyTrackMuteStateChanged(mediaStream, trackType, true);\n                // clean-up, this event listener needs to run only once.\n                track.removeEventListener(\"ended\", handleTrackEnded);\n            };\n            if (!transceiver) {\n                const { settings } = this.state;\n                const targetResolution = settings?.video.target_resolution;\n                const screenShareBitrate = settings?.screensharing.target_resolution?.bitrate;\n                const videoEncodings = trackType === TrackType.VIDEO ? findOptimalVideoLayers(track, targetResolution) : trackType === TrackType.SCREEN_SHARE ? findOptimalScreenSharingLayers(track, opts.screenShareSettings, screenShareBitrate) : undefined;\n                let preferredCodec = opts.preferredCodec;\n                if (!preferredCodec && trackType === TrackType.VIDEO) {\n                    if (isReactNative()) {\n                        const osName = getOSInfo()?.name.toLowerCase();\n                        if (osName === \"ipados\") {\n                            // in ipads it was noticed that if vp8 codec is used\n                            // then the bytes sent is 0 in the outbound-rtp\n                            // so we are forcing h264 codec for ipads\n                            preferredCodec = \"H264\";\n                        } else if (osName === \"android\") {\n                            preferredCodec = \"VP8\";\n                        }\n                    }\n                }\n                const codecPreferences = this.getCodecPreferences(trackType, preferredCodec);\n                // listen for 'ended' event on the track as it might be ended abruptly\n                // by an external factor as permission revokes, device disconnected, etc.\n                // keep in mind that `track.stop()` doesn't trigger this event.\n                track.addEventListener(\"ended\", handleTrackEnded);\n                if (!track.enabled) {\n                    track.enabled = true;\n                }\n                transceiver = this.pc.addTransceiver(track, {\n                    direction: \"sendonly\",\n                    streams: trackType === TrackType.VIDEO || trackType === TrackType.SCREEN_SHARE ? [\n                        mediaStream\n                    ] : undefined,\n                    sendEncodings: videoEncodings\n                });\n                logger$3(\"debug\", `Added ${TrackType[trackType]} transceiver`);\n                this.transceiverInitOrder.push(trackType);\n                this.transceiverRegistry[trackType] = transceiver;\n                this.publishOptionsPerTrackType.set(trackType, opts);\n                if (\"setCodecPreferences\" in transceiver && codecPreferences) {\n                    logger$3(\"info\", `Setting ${TrackType[trackType]} codec preferences`, codecPreferences);\n                    try {\n                        transceiver.setCodecPreferences(codecPreferences);\n                    } catch (err) {\n                        logger$3(\"warn\", `Couldn't set codec preferences`, err);\n                    }\n                }\n            } else {\n                const previousTrack = transceiver.sender.track;\n                // don't stop the track if we are re-publishing the same track\n                if (previousTrack && previousTrack !== track) {\n                    previousTrack.stop();\n                    previousTrack.removeEventListener(\"ended\", handleTrackEnded);\n                    track.addEventListener(\"ended\", handleTrackEnded);\n                }\n                if (!track.enabled) {\n                    track.enabled = true;\n                }\n                await transceiver.sender.replaceTrack(track);\n            }\n            await this.notifyTrackMuteStateChanged(mediaStream, trackType, false);\n        };\n        /**\n         * Stops publishing the given track type to the SFU, if it is currently being published.\n         * Underlying track will be stopped and removed from the publisher.\n         * @param trackType the track type to unpublish.\n         * @param stopTrack specifies whether track should be stopped or just disabled\n         */ this.unpublishStream = async (trackType, stopTrack)=>{\n            const transceiver = this.pc.getTransceivers().find((t)=>t === this.transceiverRegistry[trackType] && t.sender.track);\n            if (transceiver && transceiver.sender.track && (stopTrack ? transceiver.sender.track.readyState === \"live\" : transceiver.sender.track.enabled)) {\n                stopTrack ? transceiver.sender.track.stop() : transceiver.sender.track.enabled = false;\n                // We don't need to notify SFU if unpublishing in response to remote soft mute\n                if (this.state.localParticipant?.publishedTracks.includes(trackType)) {\n                    await this.notifyTrackMuteStateChanged(undefined, trackType, true);\n                }\n            }\n        };\n        /**\n         * Returns true if the given track type is currently being published to the SFU.\n         *\n         * @param trackType the track type to check.\n         */ this.isPublishing = (trackType)=>{\n            const transceiverForTrackType = this.transceiverRegistry[trackType];\n            if (transceiverForTrackType && transceiverForTrackType.sender) {\n                const sender = transceiverForTrackType.sender;\n                return !!sender.track && sender.track.readyState === \"live\" && sender.track.enabled;\n            }\n            return false;\n        };\n        /**\n         * Returns true if the given track type is currently live\n         *\n         * @param trackType the track type to check.\n         */ this.isLive = (trackType)=>{\n            const transceiverForTrackType = this.transceiverRegistry[trackType];\n            if (transceiverForTrackType && transceiverForTrackType.sender) {\n                const sender = transceiverForTrackType.sender;\n                return !!sender.track && sender.track.readyState === \"live\";\n            }\n            return false;\n        };\n        this.notifyTrackMuteStateChanged = async (mediaStream, trackType, isMuted)=>{\n            await this.sfuClient.updateMuteState(trackType, isMuted);\n            const audioOrVideoOrScreenShareStream = trackTypeToParticipantStreamKey(trackType);\n            if (isMuted) {\n                this.state.updateParticipant(this.sfuClient.sessionId, (p)=>({\n                        publishedTracks: p.publishedTracks.filter((t)=>t !== trackType),\n                        [audioOrVideoOrScreenShareStream]: undefined\n                    }));\n            } else {\n                this.state.updateParticipant(this.sfuClient.sessionId, (p)=>{\n                    return {\n                        publishedTracks: p.publishedTracks.includes(trackType) ? p.publishedTracks : [\n                            ...p.publishedTracks,\n                            trackType\n                        ],\n                        [audioOrVideoOrScreenShareStream]: mediaStream\n                    };\n                });\n            }\n        };\n        /**\n         * Stops publishing all tracks and stop all tracks.\n         */ this.stopPublishing = ()=>{\n            logger$3(\"debug\", \"Stopping publishing all tracks\");\n            this.pc.getSenders().forEach((s)=>{\n                s.track?.stop();\n                if (this.pc.signalingState !== \"closed\") {\n                    this.pc.removeTrack(s);\n                }\n            });\n        };\n        this.updateVideoPublishQuality = async (enabledLayers)=>{\n            logger$3(\"info\", \"Update publish quality, requested layers by SFU:\", enabledLayers);\n            const videoSender = this.transceiverRegistry[TrackType.VIDEO]?.sender;\n            if (!videoSender) {\n                logger$3(\"warn\", \"Update publish quality, no video sender found.\");\n                return;\n            }\n            const params = videoSender.getParameters();\n            if (params.encodings.length === 0) {\n                logger$3(\"warn\", \"Update publish quality, No suitable video encoding quality found\");\n                return;\n            }\n            let changed = false;\n            let enabledRids = enabledLayers.filter((ly)=>ly.active).map((ly)=>ly.name);\n            params.encodings.forEach((enc)=>{\n                // flip 'active' flag only when necessary\n                const shouldEnable = enabledRids.includes(enc.rid);\n                if (shouldEnable !== enc.active) {\n                    enc.active = shouldEnable;\n                    changed = true;\n                }\n                if (shouldEnable) {\n                    let layer = enabledLayers.find((vls)=>vls.name === enc.rid);\n                    if (layer !== undefined) {\n                        if (layer.scaleResolutionDownBy >= 1 && layer.scaleResolutionDownBy !== enc.scaleResolutionDownBy) {\n                            logger$3(\"debug\", \"[dynascale]: setting scaleResolutionDownBy from server\", \"layer\", layer.name, \"scale-resolution-down-by\", layer.scaleResolutionDownBy);\n                            enc.scaleResolutionDownBy = layer.scaleResolutionDownBy;\n                            changed = true;\n                        }\n                        if (layer.maxBitrate > 0 && layer.maxBitrate !== enc.maxBitrate) {\n                            logger$3(\"debug\", \"[dynascale] setting max-bitrate from the server\", \"layer\", layer.name, \"max-bitrate\", layer.maxBitrate);\n                            enc.maxBitrate = layer.maxBitrate;\n                            changed = true;\n                        }\n                        if (layer.maxFramerate > 0 && layer.maxFramerate !== enc.maxFramerate) {\n                            logger$3(\"debug\", \"[dynascale]: setting maxFramerate from server\", \"layer\", layer.name, \"max-framerate\", layer.maxFramerate);\n                            enc.maxFramerate = layer.maxFramerate;\n                            changed = true;\n                        }\n                    }\n                }\n            });\n            const activeLayers = params.encodings.filter((e)=>e.active);\n            if (changed) {\n                await videoSender.setParameters(params);\n                logger$3(\"info\", `Update publish quality, enabled rids: `, activeLayers);\n            } else {\n                logger$3(\"info\", `Update publish quality, no change: `, activeLayers);\n            }\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector\n         * @returns\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        this.getCodecPreferences = (trackType, preferredCodec)=>{\n            if (trackType === TrackType.VIDEO) {\n                return getPreferredCodecs(\"video\", preferredCodec || \"vp8\");\n            }\n            if (trackType === TrackType.AUDIO) {\n                const defaultAudioCodec = this.isRedEnabled ? \"red\" : \"opus\";\n                const codecToRemove = !this.isRedEnabled ? \"red\" : undefined;\n                return getPreferredCodecs(\"audio\", preferredCodec ?? defaultAudioCodec, codecToRemove);\n            }\n        };\n        this.onIceCandidate = (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                logger$3(\"debug\", \"null ice candidate\");\n                return;\n            }\n            this.sfuClient.iceTrickle({\n                iceCandidate: getIceCandidate(candidate),\n                peerType: PeerType.PUBLISHER_UNSPECIFIED\n            }).catch((err)=>{\n                logger$3(\"warn\", `ICETrickle failed`, err);\n            });\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Performs a migration of this publisher instance to a new SFU.\n         *\n         * Initiates a new `iceRestart` offer/answer exchange with the new SFU.\n         *\n         * @param sfuClient the new SFU client to migrate to.\n         * @param connectionConfig the new connection configuration to use.\n         */ this.migrateTo = async (sfuClient, connectionConfig)=>{\n            this.sfuClient = sfuClient;\n            this.pc.setConfiguration(connectionConfig);\n            this._connectionConfiguration = connectionConfig;\n            const shouldRestartIce = this.pc.iceConnectionState === \"connected\";\n            if (shouldRestartIce) {\n                // negotiate only if there are tracks to publish\n                await this.negotiate({\n                    iceRestart: true\n                });\n            }\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            logger$3(\"debug\", \"Restarting ICE connection\");\n            const signalingState = this.pc.signalingState;\n            if (this.isIceRestarting || signalingState === \"have-local-offer\") {\n                logger$3(\"debug\", \"ICE restart is already in progress\");\n                return;\n            }\n            await this.negotiate({\n                iceRestart: true\n            });\n        };\n        this.onNegotiationNeeded = ()=>{\n            this.negotiate().catch((err)=>logger$3(\"warn\", `Negotiation failed.`, err));\n        };\n        /**\n         * Initiates a new offer/answer exchange with the currently connected SFU.\n         *\n         * @param options the optional offer options to use.\n         */ this.negotiate = async (options)=>{\n            this.isIceRestarting = options?.iceRestart ?? false;\n            const offer = await this.pc.createOffer(options);\n            let sdp = this.mungeCodecs(offer.sdp);\n            if (sdp && this.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n                const transceiver = this.transceiverRegistry[TrackType.SCREEN_SHARE_AUDIO];\n                if (transceiver && transceiver.sender.track) {\n                    const mid = transceiver.mid ?? this.extractMid(sdp, transceiver.sender.track, TrackType.SCREEN_SHARE_AUDIO);\n                    sdp = enableHighQualityAudio(sdp, mid);\n                }\n            }\n            // set the munged SDP back to the offer\n            offer.sdp = sdp;\n            const trackInfos = this.getCurrentTrackInfos(offer.sdp);\n            if (trackInfos.length === 0) {\n                throw new Error(`Can't initiate negotiation without announcing any tracks`);\n            }\n            await this.pc.setLocalDescription(offer);\n            const { response } = await this.sfuClient.setPublisher({\n                sdp: offer.sdp || \"\",\n                tracks: trackInfos\n            });\n            try {\n                await this.pc.setRemoteDescription({\n                    type: \"answer\",\n                    sdp: response.sdp\n                });\n            } catch (e) {\n                logger$3(\"error\", `setRemoteDescription error`, {\n                    sdp: response.sdp,\n                    error: e\n                });\n            }\n            this.isIceRestarting = false;\n            this.sfuClient.iceTrickleBuffer.publisherCandidates.subscribe(async (candidate)=>{\n                try {\n                    const iceCandidate = JSON.parse(candidate.iceCandidate);\n                    await this.pc.addIceCandidate(iceCandidate);\n                } catch (e) {\n                    logger$3(\"warn\", `ICE candidate error`, [\n                        e,\n                        candidate\n                    ]);\n                }\n            });\n        };\n        this.mungeCodecs = (sdp)=>{\n            if (sdp) {\n                sdp = toggleDtx(sdp, this.isDtxEnabled);\n            }\n            return sdp;\n        };\n        this.extractMid = (sdp, track, trackType)=>{\n            if (!sdp) {\n                logger$3(\"warn\", \"No SDP found. Returning empty mid\");\n                return \"\";\n            }\n            logger$3(\"debug\", `No 'mid' found for track. Trying to find it from the Offer SDP`);\n            const parsedSdp = sdp_transform__WEBPACK_IMPORTED_MODULE_2__.parse(sdp);\n            const media = parsedSdp.media.find((m)=>{\n                return m.type === track.kind && // if `msid` is not present, we assume that the track is the first one\n                (m.msid?.includes(track.id) ?? true);\n            });\n            if (typeof media?.mid === \"undefined\") {\n                logger$3(\"debug\", `No mid found in SDP for track type ${track.kind} and id ${track.id}. Attempting to find a heuristic mid`);\n                const heuristicMid = this.transceiverInitOrder.indexOf(trackType);\n                if (heuristicMid !== -1) {\n                    return String(heuristicMid);\n                }\n                logger$3(\"debug\", \"No heuristic mid found. Returning empty mid\");\n                return \"\";\n            }\n            return String(media.mid);\n        };\n        this.getCurrentTrackInfos = (sdp)=>{\n            sdp = sdp || this.pc.localDescription?.sdp;\n            const { settings } = this.state;\n            const targetResolution = settings?.video.target_resolution;\n            return this.pc.getTransceivers().filter((t)=>t.direction === \"sendonly\" && t.sender.track).map((transceiver)=>{\n                const trackType = Number(Object.keys(this.transceiverRegistry).find((key)=>this.transceiverRegistry[key] === transceiver));\n                const track = transceiver.sender.track;\n                let optimalLayers;\n                if (track.readyState === \"live\") {\n                    const publishOpts = this.publishOptionsPerTrackType.get(trackType);\n                    optimalLayers = trackType === TrackType.VIDEO ? findOptimalVideoLayers(track, targetResolution) : trackType === TrackType.SCREEN_SHARE ? findOptimalScreenSharingLayers(track, publishOpts?.screenShareSettings) : [];\n                    this.trackLayersCache[trackType] = optimalLayers;\n                } else {\n                    // we report the last known optimal layers for ended tracks\n                    optimalLayers = this.trackLayersCache[trackType] || [];\n                    logger$3(\"debug\", `Track ${TrackType[trackType]} is ended. Announcing last known optimal layers`, optimalLayers);\n                }\n                const layers = optimalLayers.map((optimalLayer)=>({\n                        rid: optimalLayer.rid || \"\",\n                        bitrate: optimalLayer.maxBitrate || 0,\n                        fps: optimalLayer.maxFramerate || 0,\n                        quality: this.ridToVideoQuality(optimalLayer.rid || \"\"),\n                        videoDimension: {\n                            width: optimalLayer.width,\n                            height: optimalLayer.height\n                        }\n                    }));\n                const isAudioTrack = [\n                    TrackType.AUDIO,\n                    TrackType.SCREEN_SHARE_AUDIO\n                ].includes(trackType);\n                const trackSettings = track.getSettings();\n                const isStereo = isAudioTrack && trackSettings.channelCount === 2;\n                return {\n                    trackId: track.id,\n                    layers: layers,\n                    trackType,\n                    mid: transceiver.mid ?? this.extractMid(sdp, track, trackType),\n                    stereo: isStereo,\n                    dtx: isAudioTrack && this.isDtxEnabled,\n                    red: isAudioTrack && this.isRedEnabled\n                };\n            });\n        };\n        this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n            const iceState = this.pc.iceConnectionState;\n            const logLevel = iceState === \"connected\" || iceState === \"checking\" ? \"debug\" : \"warn\";\n            logger$3(logLevel, `ICE Candidate error`, errorMessage);\n        };\n        this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            logger$3(\"debug\", `ICE Connection state changed to`, state);\n            const hasNetworkConnection = this.state.callingState !== CallingState.OFFLINE;\n            if (state === \"failed\") {\n                logger$3(\"debug\", `Attempting to restart ICE`);\n                this.restartIce().catch((e)=>{\n                    logger$3(\"error\", `ICE restart error`, e);\n                    this.onUnrecoverableError?.();\n                });\n            } else if (state === \"disconnected\" && hasNetworkConnection) {\n                // when in `disconnected` state, the browser may recover automatically,\n                // hence, we delay the ICE restart\n                logger$3(\"debug\", `Scheduling ICE restart in ${this.iceRestartDelay} ms.`);\n                this.iceRestartTimeout = setTimeout(()=>{\n                    // check if the state is still `disconnected` or `failed`\n                    // as the connection may have recovered (or failed) in the meantime\n                    if (this.pc.iceConnectionState === \"disconnected\" || this.pc.iceConnectionState === \"failed\") {\n                        this.restartIce().catch((e)=>{\n                            logger$3(\"error\", `ICE restart error`, e);\n                            this.onUnrecoverableError?.();\n                        });\n                    } else {\n                        logger$3(\"debug\", `Scheduled ICE restart: connection recovered, canceled.`);\n                    }\n                }, this.iceRestartDelay);\n            }\n        };\n        this.onIceGatheringStateChange = ()=>{\n            logger$3(\"debug\", `ICE Gathering State`, this.pc.iceGatheringState);\n        };\n        this.onSignalingStateChange = ()=>{\n            logger$3(\"debug\", `Signaling state changed`, this.pc.signalingState);\n        };\n        this.ridToVideoQuality = (rid)=>{\n            return rid === \"q\" ? VideoQuality.LOW_UNSPECIFIED : rid === \"h\" ? VideoQuality.MID : VideoQuality.HIGH; // default to HIGH\n        };\n        this.pc = this.createPeerConnection(connectionConfig);\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.isDtxEnabled = isDtxEnabled;\n        this.isRedEnabled = isRedEnabled;\n        this.iceRestartDelay = iceRestartDelay;\n        this.onUnrecoverableError = onUnrecoverableError;\n        this.unsubscribeOnIceRestart = dispatcher.on(\"iceRestart\", (iceRestart)=>{\n            if (iceRestart.peerType !== PeerType.PUBLISHER_UNSPECIFIED) return;\n            this.restartIce().catch((err)=>{\n                logger$3(\"warn\", `ICERestart failed`, err);\n                this.onUnrecoverableError?.();\n            });\n        });\n    }\n}\nconst logger$2 = getLogger([\n    \"Subscriber\"\n]);\n/**\n * A wrapper around the `RTCPeerConnection` that handles the incoming\n * media streams from the SFU.\n */ class Subscriber {\n    /**\n     * Returns the current connection configuration.\n     *\n     * @internal\n     */ get connectionConfiguration() {\n        if (this.pc.getConfiguration) return this.pc.getConfiguration();\n        return this._connectionConfiguration;\n    }\n    /**\n     * Constructs a new `Subscriber` instance.\n     *\n     * @param sfuClient the SFU client to use.\n     * @param dispatcher the dispatcher to use.\n     * @param state the state of the call.\n     * @param connectionConfig the connection configuration to use.\n     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE when connection goes to `disconnected` state.\n     * @param onUnrecoverableError a callback to call when an unrecoverable error occurs.\n     */ constructor({ sfuClient, dispatcher, state, connectionConfig, iceRestartDelay = 2500, onUnrecoverableError }){\n        this.isIceRestarting = false;\n        /**\n         * Creates a new `RTCPeerConnection` instance with the given configuration.\n         *\n         * @param connectionConfig the connection configuration to use.\n         */ this.createPeerConnection = (connectionConfig)=>{\n            const pc = new RTCPeerConnection(connectionConfig);\n            this._connectionConfiguration = connectionConfig;\n            pc.addEventListener(\"icecandidate\", this.onIceCandidate);\n            pc.addEventListener(\"track\", this.handleOnTrack);\n            pc.addEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            pc.addEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            pc.addEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n            return pc;\n        };\n        /**\n         * Closes the `RTCPeerConnection` and unsubscribes from the dispatcher.\n         */ this.close = ()=>{\n            clearTimeout(this.iceRestartTimeout);\n            this.unregisterOnSubscriberOffer();\n            this.unregisterOnIceRestart();\n            this.pc.close();\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector\n         * @returns\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Migrates the subscriber to a new SFU client.\n         *\n         * @param sfuClient the new SFU client to migrate to.\n         * @param connectionConfig the new connection configuration to use.\n         */ this.migrateTo = (sfuClient, connectionConfig)=>{\n            this.setSfuClient(sfuClient);\n            // when migrating, we want to keep the previous subscriber open\n            // until the new one is connected\n            const previousPC = this.pc;\n            // we keep a record of previously available video tracks\n            // so that we can monitor when they become available on the new\n            // subscriber and close the previous one.\n            const trackIdsToMigrate = new Set();\n            previousPC.getReceivers().forEach((r)=>{\n                if (r.track.kind === \"video\") {\n                    trackIdsToMigrate.add(r.track.id);\n                }\n            });\n            // set up a new subscriber peer connection, configured to connect\n            // to the new SFU node\n            const pc = this.createPeerConnection(connectionConfig);\n            let migrationTimeoutId;\n            const cleanupMigration = ()=>{\n                previousPC.close();\n                clearTimeout(migrationTimeoutId);\n            };\n            // When migrating, we want to keep track of the video tracks\n            // that are migrating to the new subscriber.\n            // Once all of them are available, we can close the previous subscriber.\n            const handleTrackMigration = (e)=>{\n                logger$2(\"debug\", `[Migration]: Migrated track: ${e.track.id}, ${e.track.kind}`);\n                trackIdsToMigrate.delete(e.track.id);\n                if (trackIdsToMigrate.size === 0) {\n                    logger$2(\"debug\", `[Migration]: Migration complete`);\n                    pc.removeEventListener(\"track\", handleTrackMigration);\n                    cleanupMigration();\n                }\n            };\n            // When migrating, we want to keep track of the connection state\n            // of the new subscriber.\n            // Once it is connected, we give it a 2-second grace period to receive\n            // all the video tracks that are migrating from the previous subscriber.\n            // After this threshold, we abruptly close the previous subscriber.\n            const handleConnectionStateChange = ()=>{\n                if (pc.connectionState === \"connected\") {\n                    migrationTimeoutId = setTimeout(()=>{\n                        pc.removeEventListener(\"track\", handleTrackMigration);\n                        cleanupMigration();\n                    }, 2000);\n                    pc.removeEventListener(\"connectionstatechange\", handleConnectionStateChange);\n                }\n            };\n            pc.addEventListener(\"track\", handleTrackMigration);\n            pc.addEventListener(\"connectionstatechange\", handleConnectionStateChange);\n            // replace the PeerConnection instance\n            this.pc = pc;\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            logger$2(\"debug\", \"Restarting ICE connection\");\n            if (this.pc.signalingState === \"have-remote-offer\") {\n                logger$2(\"debug\", \"ICE restart is already in progress\");\n                return;\n            }\n            if (this.pc.connectionState === \"new\") {\n                logger$2(\"debug\", `ICE connection is not yet established, skipping restart.`);\n                return;\n            }\n            const previousIsIceRestarting = this.isIceRestarting;\n            try {\n                this.isIceRestarting = true;\n                await this.sfuClient.iceRestart({\n                    peerType: PeerType.SUBSCRIBER\n                });\n            } catch (e) {\n                // restore the previous state, as our intent for restarting ICE failed\n                this.isIceRestarting = previousIsIceRestarting;\n                throw e;\n            }\n        };\n        this.handleOnTrack = (e)=>{\n            const [primaryStream] = e.streams;\n            // example: `e3f6aaf8-b03d-4911-be36-83f47d37a76a:TRACK_TYPE_VIDEO`\n            const [trackId, trackType] = primaryStream.id.split(\":\");\n            const participantToUpdate = this.state.participants.find((p)=>p.trackLookupPrefix === trackId);\n            logger$2(\"debug\", `[onTrack]: Got remote ${trackType} track for userId: ${participantToUpdate?.userId}`, e.track.id, e.track);\n            if (!participantToUpdate) {\n                logger$2(\"warn\", `[onTrack]: Received track for unknown participant: ${trackId}`, e);\n                return;\n            }\n            const trackDebugInfo = `${participantToUpdate.userId} ${trackType}:${trackId}`;\n            e.track.addEventListener(\"mute\", ()=>{\n                logger$2(\"info\", `[onTrack]: Track muted: ${trackDebugInfo}`);\n            });\n            e.track.addEventListener(\"unmute\", ()=>{\n                logger$2(\"info\", `[onTrack]: Track unmuted: ${trackDebugInfo}`);\n            });\n            e.track.addEventListener(\"ended\", ()=>{\n                logger$2(\"info\", `[onTrack]: Track ended: ${trackDebugInfo}`);\n            });\n            const streamKindProp = {\n                TRACK_TYPE_AUDIO: \"audioStream\",\n                TRACK_TYPE_VIDEO: \"videoStream\",\n                TRACK_TYPE_SCREEN_SHARE: \"screenShareStream\",\n                TRACK_TYPE_SCREEN_SHARE_AUDIO: \"screenShareAudioStream\"\n            }[trackType];\n            if (!streamKindProp) {\n                logger$2(\"error\", `Unknown track type: ${trackType}`);\n                return;\n            }\n            const previousStream = participantToUpdate[streamKindProp];\n            if (previousStream) {\n                logger$2(\"info\", `[onTrack]: Cleaning up previous remote ${e.track.kind} tracks for userId: ${participantToUpdate.userId}`);\n                previousStream.getTracks().forEach((t)=>{\n                    t.stop();\n                    previousStream.removeTrack(t);\n                });\n            }\n            this.state.updateParticipant(participantToUpdate.sessionId, {\n                [streamKindProp]: primaryStream\n            });\n        };\n        this.onIceCandidate = (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                logger$2(\"debug\", \"null ice candidate\");\n                return;\n            }\n            this.sfuClient.iceTrickle({\n                iceCandidate: getIceCandidate(candidate),\n                peerType: PeerType.SUBSCRIBER\n            }).catch((err)=>{\n                logger$2(\"warn\", `ICETrickle failed`, err);\n            });\n        };\n        this.negotiate = async (subscriberOffer)=>{\n            logger$2(\"info\", `Received subscriberOffer`, subscriberOffer);\n            await this.pc.setRemoteDescription({\n                type: \"offer\",\n                sdp: subscriberOffer.sdp\n            });\n            this.sfuClient.iceTrickleBuffer.subscriberCandidates.subscribe(async (candidate)=>{\n                try {\n                    const iceCandidate = JSON.parse(candidate.iceCandidate);\n                    await this.pc.addIceCandidate(iceCandidate);\n                } catch (e) {\n                    logger$2(\"warn\", `ICE candidate error`, [\n                        e,\n                        candidate\n                    ]);\n                }\n            });\n            const answer = await this.pc.createAnswer();\n            await this.pc.setLocalDescription(answer);\n            await this.sfuClient.sendAnswer({\n                peerType: PeerType.SUBSCRIBER,\n                sdp: answer.sdp || \"\"\n            });\n            this.isIceRestarting = false;\n        };\n        this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            logger$2(\"debug\", `ICE connection state changed`, state);\n            // do nothing when ICE is restarting\n            if (this.isIceRestarting) return;\n            const hasNetworkConnection = this.state.callingState !== CallingState.OFFLINE;\n            if (state === \"failed\") {\n                logger$2(\"debug\", `Attempting to restart ICE`);\n                this.restartIce().catch((e)=>{\n                    logger$2(\"error\", `ICE restart failed`, e);\n                    this.onUnrecoverableError?.();\n                });\n            } else if (state === \"disconnected\" && hasNetworkConnection) {\n                // when in `disconnected` state, the browser may recover automatically,\n                // hence, we delay the ICE restart\n                logger$2(\"debug\", `Scheduling ICE restart in ${this.iceRestartDelay} ms.`);\n                this.iceRestartTimeout = setTimeout(()=>{\n                    // check if the state is still `disconnected` or `failed`\n                    // as the connection may have recovered (or failed) in the meantime\n                    if (this.pc.iceConnectionState === \"disconnected\" || this.pc.iceConnectionState === \"failed\") {\n                        this.restartIce().catch((e)=>{\n                            logger$2(\"error\", `ICE restart failed`, e);\n                            this.onUnrecoverableError?.();\n                        });\n                    } else {\n                        logger$2(\"debug\", `Scheduled ICE restart: connection recovered, canceled.`);\n                    }\n                }, this.iceRestartDelay);\n            }\n        };\n        this.onIceGatheringStateChange = ()=>{\n            logger$2(\"debug\", `ICE gathering state changed`, this.pc.iceGatheringState);\n        };\n        this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n            const iceState = this.pc.iceConnectionState;\n            const logLevel = iceState === \"connected\" || iceState === \"checking\" ? \"debug\" : \"warn\";\n            logger$2(logLevel, `ICE Candidate error`, errorMessage);\n        };\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.iceRestartDelay = iceRestartDelay;\n        this.onUnrecoverableError = onUnrecoverableError;\n        this.pc = this.createPeerConnection(connectionConfig);\n        this.unregisterOnSubscriberOffer = dispatcher.on(\"subscriberOffer\", (subscriberOffer)=>{\n            this.negotiate(subscriberOffer).catch((err)=>{\n                logger$2(\"warn\", `Negotiation failed.`, err);\n            });\n        });\n        this.unregisterOnIceRestart = dispatcher.on(\"iceRestart\", (iceRestart)=>{\n            if (iceRestart.peerType !== PeerType.SUBSCRIBER) return;\n            this.restartIce().catch((err)=>{\n                logger$2(\"warn\", `ICERestart failed`, err);\n                this.onUnrecoverableError?.();\n            });\n        });\n    }\n}\nconst createWebSocketSignalChannel = (opts)=>{\n    const logger = getLogger([\n        \"sfu-client\"\n    ]);\n    const { endpoint, onMessage } = opts;\n    const ws = new (isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default())(endpoint);\n    ws.binaryType = \"arraybuffer\"; // do we need this?\n    ws.addEventListener(\"error\", (e)=>{\n        logger(\"error\", \"Signaling WS channel error\", e);\n    });\n    ws.addEventListener(\"close\", (e)=>{\n        logger(\"info\", \"Signaling WS channel is closed\", e);\n    });\n    ws.addEventListener(\"open\", (e)=>{\n        logger(\"info\", \"Signaling WS channel is open\", e);\n    });\n    ws.addEventListener(\"message\", (e)=>{\n        try {\n            const message = e.data instanceof ArrayBuffer ? SfuEvent.fromBinary(new Uint8Array(e.data)) : SfuEvent.fromJsonString(e.data.toString());\n            onMessage(message);\n        } catch (err) {\n            logger(\"error\", \"Failed to decode a message. Check whether the Proto models match.\", {\n                event: e,\n                error: err\n            });\n        }\n    });\n    return ws;\n};\nconst sleep = (m)=>new Promise((r)=>setTimeout(r, m));\nfunction isFunction(value) {\n    return value && (Object.prototype.toString.call(value) === \"[object Function]\" || \"function\" === typeof value || value instanceof Function);\n}\n/**\n * A map of known error codes.\n */ const KnownCodes = {\n    TOKEN_EXPIRED: 40,\n    WS_CLOSED_SUCCESS: 1000,\n    WS_CLOSED_ABRUPTLY: 1006,\n    WS_POLICY_VIOLATION: 1008\n};\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */ function retryInterval(numberOfFailures) {\n    // try to reconnect in 0.25-5 seconds (random to spread out the load from failures)\n    const max = Math.min(500 + numberOfFailures * 2000, 5000);\n    const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 5000);\n    return Math.floor(Math.random() * (max - min) + min);\n}\nfunction randomId() {\n    return generateUUIDv4();\n}\nfunction hex(bytes) {\n    let s = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        s += bytes[i].toString(16).padStart(2, \"0\");\n    }\n    return s;\n}\n// https://tools.ietf.org/html/rfc4122\nfunction generateUUIDv4() {\n    const bytes = getRandomBytes(16);\n    bytes[6] = bytes[6] & 0x0f | 0x40; // version\n    bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n    return hex(bytes.subarray(0, 4)) + \"-\" + hex(bytes.subarray(4, 6)) + \"-\" + hex(bytes.subarray(6, 8)) + \"-\" + hex(bytes.subarray(8, 10)) + \"-\" + hex(bytes.subarray(10, 16));\n}\nfunction getRandomValuesWithMathRandom(bytes) {\n    const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n    for(let i = 0; i < bytes.length; i++){\n        bytes[i] = Math.random() * max;\n    }\n}\nconst getRandomValues = (()=>{\n    if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues !== \"undefined\") {\n        return crypto.getRandomValues.bind(crypto);\n    } else if (typeof msCrypto !== \"undefined\") {\n        return msCrypto.getRandomValues.bind(msCrypto);\n    } else {\n        return getRandomValuesWithMathRandom;\n    }\n})();\nfunction getRandomBytes(length) {\n    const bytes = new Uint8Array(length);\n    getRandomValues(bytes);\n    return bytes;\n}\nfunction convertErrorToJson(err) {\n    const jsonObj = {};\n    if (!err) return jsonObj;\n    try {\n        Object.getOwnPropertyNames(err).forEach((key)=>{\n            jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n        });\n    } catch (_) {\n        return {\n            error: \"failed to serialize the error\"\n        };\n    }\n    return jsonObj;\n}\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */ function isOnline(logger) {\n    const nav = typeof navigator !== \"undefined\" ? navigator :  false ? 0 : undefined;\n    if (!nav) {\n        logger(\"warn\", \"isOnline failed to access window.navigator and assume browser is online\");\n        return true;\n    }\n    // RN navigator has undefined for onLine\n    if (typeof nav.onLine !== \"boolean\") {\n        return true;\n    }\n    return nav.onLine;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */ function addConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction removeConnectionEventListeners(cb) {\n    if (false) {}\n}\n/**\n * The client used for exchanging information with the SFU.\n */ class StreamSfuClient {\n    /**\n     * Constructs a new SFU client.\n     *\n     * @param dispatcher the event dispatcher to use.\n     * @param sfuServer the SFU server to connect to.\n     * @param token the JWT token to use for authentication.\n     * @param sessionId the `sessionId` of the currently connected participant.\n     */ constructor({ dispatcher, sfuServer, token, sessionId }){\n        /**\n         * A buffer for ICE Candidates that are received before\n         * the PeerConnections are ready to handle them.\n         */ this.iceTrickleBuffer = new IceTrickleBuffer();\n        /**\n         * A flag indicating whether the client is currently migrating away\n         * from this SFU.\n         */ this.isMigratingAway = false;\n        /**\n         * A flag indicating that the client connection is broken for the current\n         * client and that a fast-reconnect with a new client should be attempted.\n         */ this.isFastReconnecting = false;\n        this.pingIntervalInMs = 10 * 1000;\n        this.unhealthyTimeoutInMs = this.pingIntervalInMs + 5 * 1000;\n        this.close = (code, reason)=>{\n            this.logger(\"debug\", `Closing SFU WS connection: ${code} - ${reason}`);\n            if (this.signalWs.readyState !== this.signalWs.CLOSED) {\n                this.signalWs.close(code, `js-client: ${reason}`);\n            }\n            this.unsubscribeIceTrickle();\n            clearInterval(this.keepAliveInterval);\n            clearTimeout(this.connectionCheckTimeout);\n        };\n        this.updateSubscriptions = async (subscriptions)=>{\n            return retryable(()=>this.rpc.updateSubscriptions({\n                    sessionId: this.sessionId,\n                    tracks: subscriptions\n                }), this.logger, \"debug\");\n        };\n        this.setPublisher = async (data)=>{\n            return retryable(()=>this.rpc.setPublisher({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.sendAnswer = async (data)=>{\n            return retryable(()=>this.rpc.sendAnswer({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.iceTrickle = async (data)=>{\n            return retryable(()=>this.rpc.iceTrickle({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.iceRestart = async (data)=>{\n            return retryable(()=>this.rpc.iceRestart({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.updateMuteState = async (trackType, muted)=>{\n            return this.updateMuteStates({\n                muteStates: [\n                    {\n                        trackType,\n                        muted\n                    }\n                ]\n            });\n        };\n        this.updateMuteStates = async (data)=>{\n            return retryable(()=>this.rpc.updateMuteStates({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.sendStats = async (stats)=>{\n            return retryable(()=>this.rpc.sendStats({\n                    ...stats,\n                    sessionId: this.sessionId\n                }), this.logger, \"debug\");\n        };\n        this.startNoiseCancellation = async ()=>{\n            return retryable(()=>this.rpc.startNoiseCancellation({\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.stopNoiseCancellation = async ()=>{\n            return retryable(()=>this.rpc.stopNoiseCancellation({\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.join = async (data)=>{\n            const joinRequest = JoinRequest.create({\n                ...data,\n                sessionId: this.sessionId,\n                token: this.token\n            });\n            return this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: \"joinRequest\",\n                    joinRequest\n                }\n            }));\n        };\n        this.send = async (message)=>{\n            return this.signalReady.then((signal)=>{\n                if (signal.readyState !== signal.OPEN) return;\n                this.logger(\"debug\", `Sending message to: ${this.edgeName}`, SfuRequest.toJson(message));\n                signal.send(SfuRequest.toBinary(message));\n            });\n        };\n        this.keepAlive = ()=>{\n            clearInterval(this.keepAliveInterval);\n            this.keepAliveInterval = setInterval(()=>{\n                this.logger(\"trace\", \"Sending healthCheckRequest to SFU\");\n                const message = SfuRequest.create({\n                    requestPayload: {\n                        oneofKind: \"healthCheckRequest\",\n                        healthCheckRequest: {}\n                    }\n                });\n                this.send(message).catch((e)=>{\n                    this.logger(\"error\", \"Error sending healthCheckRequest to SFU\", e);\n                });\n            }, this.pingIntervalInMs);\n        };\n        this.scheduleConnectionCheck = ()=>{\n            clearTimeout(this.connectionCheckTimeout);\n            this.connectionCheckTimeout = setTimeout(()=>{\n                if (this.lastMessageTimestamp) {\n                    const timeSinceLastMessage = new Date().getTime() - this.lastMessageTimestamp.getTime();\n                    if (timeSinceLastMessage > this.unhealthyTimeoutInMs) {\n                        this.close(StreamSfuClient.ERROR_CONNECTION_UNHEALTHY, `SFU connection unhealthy. Didn't receive any message for ${this.unhealthyTimeoutInMs}ms`);\n                    }\n                }\n            }, this.unhealthyTimeoutInMs);\n        };\n        this.sessionId = sessionId || generateUUIDv4();\n        this.sfuServer = sfuServer;\n        this.edgeName = sfuServer.edge_name;\n        this.token = token;\n        this.logger = getLogger([\n            \"sfu-client\"\n        ]);\n        const logInterceptor = {\n            interceptUnary: (next, method, input, options)=>{\n                this.logger(\"trace\", `Calling SFU RPC method ${method.name}`, {\n                    input,\n                    options\n                });\n                return next(method, input, options);\n            }\n        };\n        this.rpc = createSignalClient({\n            baseUrl: sfuServer.url,\n            interceptors: [\n                withHeaders({\n                    Authorization: `Bearer ${token}`\n                }),\n                logInterceptor\n            ]\n        });\n        // Special handling for the ICETrickle kind of events.\n        // These events might be triggered by the SFU before the initial RTC\n        // connection is established. In that case, those events (ICE candidates)\n        // need to be buffered and later added to the appropriate PeerConnection\n        // once the remoteDescription is known and set.\n        this.unsubscribeIceTrickle = dispatcher.on(\"iceTrickle\", (iceTrickle)=>{\n            this.iceTrickleBuffer.push(iceTrickle);\n        });\n        this.signalWs = createWebSocketSignalChannel({\n            endpoint: sfuServer.ws_endpoint,\n            onMessage: (message)=>{\n                this.lastMessageTimestamp = new Date();\n                this.scheduleConnectionCheck();\n                dispatcher.dispatch(message);\n            }\n        });\n        this.signalReady = new Promise((resolve)=>{\n            const onOpen = ()=>{\n                this.signalWs.removeEventListener(\"open\", onOpen);\n                this.keepAlive();\n                resolve(this.signalWs);\n            };\n            this.signalWs.addEventListener(\"open\", onOpen);\n        });\n    }\n}\n/**\n * The normal closure code. Used for controlled shutdowns.\n */ StreamSfuClient.NORMAL_CLOSURE = 1000;\n/**\n * The error code used when the SFU connection is unhealthy.\n * Usually, this means that no message has been received from the SFU for\n * a certain amount of time (`connectionCheckTimeout`).\n */ StreamSfuClient.ERROR_CONNECTION_UNHEALTHY = 4001;\n/**\n * The error code used when the SFU connection is broken.\n * Usually, this means that the WS connection has been closed unexpectedly.\n * This error code is used to announce a fast-reconnect.\n */ StreamSfuClient.ERROR_CONNECTION_BROKEN = 4002; // used in fast-reconnects\nconst MAX_RETRIES = 5;\n/**\n * Creates a closure which wraps the given RPC call and retries invoking\n * the RPC until it succeeds or the maximum number of retries is reached.\n *\n * Between each retry, there would be a random delay in order to avoid\n * request bursts towards the SFU.\n *\n * @param rpc the closure around the RPC call to execute.\n * @param logger a logger instance to use.\n * @param <I> the type of the request object.\n * @param <O> the type of the response object.\n */ const retryable = async (rpc, logger, level = \"error\")=>{\n    let retryAttempt = 0;\n    let rpcCallResult;\n    do {\n        // don't delay the first invocation\n        if (retryAttempt > 0) {\n            await sleep(retryInterval(retryAttempt));\n        }\n        rpcCallResult = await rpc();\n        // if the RPC call failed, log the error and retry\n        if (rpcCallResult.response.error) {\n            logger(level, `SFU RPC Error (${rpcCallResult.method.name}):`, rpcCallResult.response.error);\n        }\n        retryAttempt++;\n    }while (rpcCallResult.response.error?.shouldRetry && retryAttempt < MAX_RETRIES);\n    if (rpcCallResult.response.error) {\n        throw rpcCallResult.response.error;\n    }\n    return rpcCallResult;\n};\n/**\n * Event handler that watched the delivery of `call.accepted`.\n * Once the event is received, the call is joined.\n */ const watchCallAccepted = (call)=>{\n    return async function onCallAccepted(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { state } = call;\n        if (event.call.created_by.id === call.currentUserId && state.callingState === CallingState.RINGING) {\n            await call.join();\n        }\n    };\n};\n/**\n * Event handler that watches delivery of `call.rejected` Websocket event.\n * Once the event is received, the call is left.\n */ const watchCallRejected = (call)=>{\n    return async function onCallRejected(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { call: eventCall } = event;\n        const { session: callSession } = eventCall;\n        if (!callSession) {\n            call.logger(\"warn\", \"No call session provided. Ignoring call.rejected event.\", event);\n            return;\n        }\n        const rejectedBy = callSession.rejected_by;\n        const { members, callingState } = call.state;\n        if (callingState !== CallingState.RINGING) {\n            call.logger(\"info\", \"Call is not in ringing mode (it is either accepted or rejected already). Ignoring call.rejected event.\", event);\n            return;\n        }\n        if (call.isCreatedByMe) {\n            const everyoneElseRejected = members.filter((m)=>m.user_id !== call.currentUserId).every((m)=>rejectedBy[m.user_id]);\n            if (everyoneElseRejected) {\n                call.logger(\"info\", \"everyone rejected, leaving the call\");\n                await call.leave({\n                    reason: \"ring: everyone rejected\"\n                });\n            }\n        } else {\n            if (rejectedBy[eventCall.created_by.id]) {\n                call.logger(\"info\", \"call creator rejected, leaving call\");\n                await call.leave({\n                    reason: \"ring: creator rejected\"\n                });\n            }\n        }\n    };\n};\n/**\n * Event handler that watches the delivery of `call.ended` Websocket event.\n */ const watchCallEnded = (call)=>{\n    return async function onCallEnded() {\n        const { callingState } = call.state;\n        if (callingState === CallingState.RINGING || callingState === CallingState.JOINED || callingState === CallingState.JOINING) {\n            await call.leave({\n                reason: \"call.ended event received\"\n            });\n        }\n    };\n};\n/**\n * Event handler that watches for `callGrantsUpdated` events.\n *\n * @param state the call state to update.\n */ const watchCallGrantsUpdated = (state)=>{\n    return function onCallGrantsUpdated(event) {\n        const { currentGrants } = event;\n        if (currentGrants) {\n            const { canPublishAudio, canPublishVideo, canScreenshare } = currentGrants;\n            const update = {\n                [OwnCapability.SEND_AUDIO]: canPublishAudio,\n                [OwnCapability.SEND_VIDEO]: canPublishVideo,\n                [OwnCapability.SCREENSHARE]: canScreenshare\n            };\n            const nextCapabilities = state.ownCapabilities.filter((capability)=>update[capability] !== false);\n            Object.entries(update).forEach(([capability, value])=>{\n                if (value && !nextCapabilities.includes(capability)) {\n                    nextCapabilities.push(capability);\n                }\n            });\n            state.setOwnCapabilities(nextCapabilities);\n        }\n    };\n};\nconst logger$1 = getLogger([\n    \"events\"\n]);\n/**\n * An event responder which handles the `changePublishQuality` event.\n */ const watchChangePublishQuality = (dispatcher, call)=>{\n    return dispatcher.on(\"changePublishQuality\", (e)=>{\n        const { videoSenders } = e;\n        videoSenders.forEach((videoSender)=>{\n            const { layers } = videoSender;\n            call.updatePublishQuality(layers.filter((l)=>l.active));\n        });\n    });\n};\nconst watchConnectionQualityChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"connectionQualityChanged\", (e)=>{\n        const { connectionQualityUpdates } = e;\n        if (!connectionQualityUpdates) return;\n        state.updateParticipants(connectionQualityUpdates.reduce((patches, update)=>{\n            const { sessionId, connectionQuality } = update;\n            patches[sessionId] = {\n                connectionQuality\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Updates the approximate number of participants in the call by peeking at the\n * health check events that our SFU sends.\n */ const watchParticipantCountChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"healthCheckResponse\", (e)=>{\n        const { participantCount } = e;\n        if (participantCount) {\n            state.setParticipantCount(participantCount.total);\n            state.setAnonymousParticipantCount(participantCount.anonymous);\n        }\n    });\n};\nconst watchLiveEnded = (dispatcher, call)=>{\n    return dispatcher.on(\"error\", (e)=>{\n        if (e.error && e.error.code !== ErrorCode.LIVE_ENDED) return;\n        if (!call.permissionsContext.hasPermission(OwnCapability.JOIN_BACKSTAGE)) {\n            call.leave({\n                reason: \"live ended\"\n            }).catch((err)=>{\n                logger$1(\"error\", \"Failed to leave call after live ended\", err);\n            });\n        }\n    });\n};\n/**\n * Watches and logs the errors reported by the currently connected SFU.\n */ const watchSfuErrorReports = (dispatcher)=>{\n    return dispatcher.on(\"error\", (e)=>{\n        if (!e.error) return;\n        const { error } = e;\n        logger$1(\"error\", \"SFU reported error\", {\n            code: ErrorCode[error.code],\n            message: error.message,\n            shouldRetry: error.shouldRetry\n        });\n    });\n};\n/**\n * Watches for `pinsUpdated` events and updates the pinned state of participants\n * in the call.\n */ const watchPinsUpdated = (state)=>{\n    return function onPinsUpdated(e) {\n        const { pins } = e;\n        state.setServerSidePins(pins);\n    };\n};\n/**\n * An event handler that handles soft mutes.\n *\n * @param call the call.\n */ const handleRemoteSoftMute = (call)=>{\n    return call.on(\"trackUnpublished\", async (event)=>{\n        const { cause, type, sessionId } = event;\n        const { localParticipant } = call.state;\n        if (cause === TrackUnpublishReason.MODERATION && sessionId === localParticipant?.sessionId) {\n            const logger = call.logger;\n            logger(\"info\", `Local participant's ${TrackType[type]} track is muted remotely`);\n            try {\n                if (type === TrackType.VIDEO) {\n                    await call.camera.disable();\n                } else if (type === TrackType.AUDIO) {\n                    await call.microphone.disable();\n                } else {\n                    logger(\"warn\", \"Unsupported track type to soft mute\", TrackType[type]);\n                }\n                if (call.publisher?.isPublishing(type)) {\n                    await call.stopPublish(type);\n                }\n            } catch (error) {\n                logger(\"error\", \"Failed to stop publishing\", error);\n            }\n        }\n    });\n};\n/**\n * An event responder which handles the `participantJoined` event.\n */ const watchParticipantJoined = (state)=>{\n    return function onParticipantJoined(e) {\n        const { participant } = e;\n        if (!participant) return;\n        // `state.updateOrAddParticipant` acts as a safeguard against\n        // potential duplicate events from the SFU.\n        //\n        // Although the SFU should not send duplicate events, we have seen\n        // some race conditions in the past during the `join-flow` where\n        // the SFU would send participant info as part of the `join`\n        // response and then follow up with a `participantJoined` event for\n        // already announced participants.\n        state.updateOrAddParticipant(participant.sessionId, Object.assign(participant, {\n            viewportVisibilityState: {\n                videoTrack: VisibilityState.UNKNOWN,\n                screenShareTrack: VisibilityState.UNKNOWN\n            }\n        }));\n    };\n};\n/**\n * An event responder which handles the `participantLeft` event.\n */ const watchParticipantLeft = (state)=>{\n    return function onParticipantLeft(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.setParticipants((participants)=>participants.filter((p)=>p.sessionId !== participant.sessionId));\n    };\n};\n/**\n * An event responder which handles the `participantUpdated` event.\n */ const watchParticipantUpdated = (state)=>{\n    return function onParticipantUpdated(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.updateParticipant(participant.sessionId, participant);\n    };\n};\n/**\n * An event responder which handles the `trackPublished` event.\n * The SFU will send this event when a participant publishes a track.\n */ const watchTrackPublished = (state)=>{\n    return function onTrackPublished(e) {\n        const { type, sessionId, participant } = e;\n        // An optimization for large calls.\n        // After a certain threshold, the SFU would stop emitting `participantJoined`\n        // events, and instead, it would only provide the participant's information\n        // once they start publishing a track.\n        if (participant) {\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: [\n                        ...p.publishedTracks,\n                        type\n                    ].filter(unique)\n                }));\n        }\n    };\n};\n/**\n * An event responder which handles the `trackUnpublished` event.\n * The SFU will send this event when a participant unpublishes a track.\n */ const watchTrackUnpublished = (state)=>{\n    return function onTrackUnpublished(e) {\n        const { type, sessionId, participant } = e;\n        // An optimization for large calls. See `watchTrackPublished`.\n        if (participant) {\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: p.publishedTracks.filter((t)=>t !== type)\n                }));\n        }\n    };\n};\nconst unique = (v, i, arr)=>arr.indexOf(v) === i;\n/**\n * Watches for `dominantSpeakerChanged` events.\n */ const watchDominantSpeakerChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"dominantSpeakerChanged\", (e)=>{\n        const { sessionId } = e;\n        if (sessionId === state.dominantSpeaker?.sessionId) return;\n        state.setParticipants((participants)=>participants.map((participant)=>{\n                // mark the new dominant speaker\n                if (participant.sessionId === sessionId) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: true\n                    };\n                }\n                // unmark the old dominant speaker\n                if (participant.isDominantSpeaker) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: false\n                    };\n                }\n                return participant; // no change\n            }));\n    });\n};\n/**\n * Watches for `audioLevelChanged` events.\n */ const watchAudioLevelChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"audioLevelChanged\", (e)=>{\n        const { audioLevels } = e;\n        state.updateParticipants(audioLevels.reduce((patches, current)=>{\n            patches[current.sessionId] = {\n                audioLevel: current.level,\n                isSpeaking: current.isSpeaking\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Registers the default event handlers for a call during its lifecycle.\n *\n * @param call the call to register event handlers for.\n * @param state the call state.\n * @param dispatcher the dispatcher.\n */ const registerEventHandlers = (call, state, dispatcher)=>{\n    const eventHandlers = [\n        call.on(\"call.ended\", watchCallEnded(call)),\n        watchLiveEnded(dispatcher, call),\n        watchSfuErrorReports(dispatcher),\n        watchChangePublishQuality(dispatcher, call),\n        watchConnectionQualityChanged(dispatcher, state),\n        watchParticipantCountChanged(dispatcher, state),\n        call.on(\"participantJoined\", watchParticipantJoined(state)),\n        call.on(\"participantLeft\", watchParticipantLeft(state)),\n        call.on(\"participantUpdated\", watchParticipantUpdated(state)),\n        call.on(\"trackPublished\", watchTrackPublished(state)),\n        call.on(\"trackUnpublished\", watchTrackUnpublished(state)),\n        watchAudioLevelChanged(dispatcher, state),\n        watchDominantSpeakerChanged(dispatcher, state),\n        call.on(\"callGrantsUpdated\", watchCallGrantsUpdated(state)),\n        call.on(\"pinsUpdated\", watchPinsUpdated(state)),\n        handleRemoteSoftMute(call)\n    ];\n    if (call.ringing) {\n        // these events are only relevant when the call is ringing\n        eventHandlers.push(registerRingingCallEventHandlers(call));\n    }\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Registers event handlers for a call that is of ringing type.\n *\n * @param call the call to register event handlers for.\n */ const registerRingingCallEventHandlers = (call)=>{\n    const coordinatorRingEvents = {\n        \"call.accepted\": watchCallAccepted(call),\n        \"call.rejected\": watchCallRejected(call)\n    };\n    const eventHandlers = Object.keys(coordinatorRingEvents).map((event)=>{\n        const eventName = event;\n        return call.on(eventName, coordinatorRingEvents[eventName]);\n    });\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Collects all necessary information to join a call, talks to the coordinator\n * and returns the necessary information to join the call.\n *\n * @param httpClient the http client to use.\n * @param type the type of the call.\n * @param id the id of the call.\n * @param data the data for the call.\n */ const join = async (httpClient, type, id, data)=>{\n    const { call, credentials, members, own_capabilities, stats_options } = await doJoin(httpClient, type, id, data);\n    return {\n        connectionConfig: toRtcConfiguration(credentials.ice_servers),\n        sfuServer: credentials.server,\n        token: credentials.token,\n        metadata: call,\n        members,\n        ownCapabilities: own_capabilities,\n        statsOptions: stats_options\n    };\n};\nconst doJoin = async (httpClient, type, id, data)=>{\n    const location = await httpClient.getLocationHint();\n    const request = {\n        ...data,\n        location\n    };\n    return httpClient.post(`/call/${type}/${id}/join`, request);\n};\nconst toRtcConfiguration = (config)=>{\n    if (!config || config.length === 0) return undefined;\n    const rtcConfig = {\n        iceServers: config.map((ice)=>({\n                urls: ice.urls,\n                username: ice.username,\n                credential: ice.password\n            }))\n    };\n    return rtcConfig;\n};\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */ const flatten = (report)=>{\n    const stats = [];\n    report.forEach((s)=>{\n        stats.push(s);\n    });\n    return stats;\n};\nconst getSdkSignature = (clientDetails)=>{\n    const { sdk, ...platform } = clientDetails;\n    const sdkName = getSdkName(sdk);\n    const sdkVersion = getSdkVersion(sdk);\n    return {\n        sdkName,\n        sdkVersion,\n        ...platform\n    };\n};\nconst getSdkName = (sdk)=>{\n    return sdk && sdk.type === SdkType.REACT ? \"stream-react\" : sdk && sdk.type === SdkType.REACT_NATIVE ? \"stream-react-native\" : \"stream-js\";\n};\nconst getSdkVersion = (sdk)=>{\n    return sdk ? `${sdk.major}.${sdk.minor}.${sdk.patch}` : \"0.0.0-development\";\n};\n/**\n * Creates a new StatsReporter instance that collects metrics about the ongoing call and reports them to the state store\n */ const createStatsReporter = ({ subscriber, publisher, state, datacenter, pollingIntervalInMs = 2000 })=>{\n    const logger = getLogger([\n        \"stats\"\n    ]);\n    const getRawStatsForTrack = async (kind, selector)=>{\n        if (kind === \"subscriber\" && subscriber) {\n            return subscriber.getStats(selector);\n        } else if (kind === \"publisher\" && publisher) {\n            return publisher.getStats(selector);\n        } else {\n            return undefined;\n        }\n    };\n    const getStatsForStream = async (kind, mediaStream)=>{\n        const pc = kind === \"subscriber\" ? subscriber : publisher;\n        if (!pc) return [];\n        const statsForStream = [];\n        for (let track of mediaStream.getTracks()){\n            const report = await pc.getStats(track);\n            const stats = transform(report, {\n                // @ts-ignore\n                trackKind: track.kind,\n                kind\n            });\n            statsForStream.push(stats);\n        }\n        return statsForStream;\n    };\n    const startReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.add(sessionId);\n        void run();\n    };\n    const stopReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.delete(sessionId);\n        void run();\n    };\n    const sessionIdsToTrack = new Set();\n    /**\n     * The main stats reporting loop.\n     */ const run = async ()=>{\n        const participantStats = {};\n        const sessionIds = new Set(sessionIdsToTrack);\n        if (sessionIds.size > 0) {\n            for (let participant of state.participants){\n                if (!sessionIds.has(participant.sessionId)) continue;\n                const kind = participant.isLocalParticipant ? \"publisher\" : \"subscriber\";\n                try {\n                    const mergedStream = new MediaStream([\n                        ...participant.videoStream?.getVideoTracks() || [],\n                        ...participant.audioStream?.getAudioTracks() || []\n                    ]);\n                    participantStats[participant.sessionId] = await getStatsForStream(kind, mergedStream);\n                    mergedStream.getTracks().forEach((t)=>{\n                        mergedStream.removeTrack(t);\n                    });\n                } catch (e) {\n                    logger(\"error\", `Failed to collect stats for ${kind} of ${participant.userId}`, e);\n                }\n            }\n        }\n        const [subscriberStats, publisherStats] = await Promise.all([\n            subscriber.getStats().then((report)=>transform(report, {\n                    kind: \"subscriber\",\n                    trackKind: \"video\"\n                })).then(aggregate),\n            publisher ? publisher.getStats().then((report)=>transform(report, {\n                    kind: \"publisher\",\n                    trackKind: \"video\"\n                })).then(aggregate) : getEmptyStats()\n        ]);\n        const [subscriberRawStats, publisherRawStats] = await Promise.all([\n            getRawStatsForTrack(\"subscriber\"),\n            publisher ? getRawStatsForTrack(\"publisher\") : undefined\n        ]);\n        state.setCallStatsReport({\n            datacenter,\n            publisherStats,\n            subscriberStats,\n            subscriberRawStats,\n            publisherRawStats,\n            participants: participantStats,\n            timestamp: Date.now()\n        });\n    };\n    let timeoutId;\n    if (pollingIntervalInMs > 0) {\n        const loop = async ()=>{\n            await run().catch((e)=>{\n                logger(\"debug\", \"Failed to collect stats\", e);\n            });\n            timeoutId = setTimeout(loop, pollingIntervalInMs);\n        };\n        void loop();\n    }\n    const stop = ()=>{\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n    };\n    return {\n        getRawStatsForTrack,\n        getStatsForStream,\n        startReportingStatsFor,\n        stopReportingStatsFor,\n        stop\n    };\n};\n/**\n * Transforms raw RTC stats into a slimmer and uniform across browsers format.\n *\n * @param report the report to transform.\n * @param opts the transform options.\n */ const transform = (report, opts)=>{\n    const { trackKind, kind } = opts;\n    const direction = kind === \"subscriber\" ? \"inbound-rtp\" : \"outbound-rtp\";\n    const stats = flatten(report);\n    const streams = stats.filter((stat)=>stat.type === direction && stat.kind === trackKind).map((stat)=>{\n        const rtcStreamStats = stat;\n        const codec = stats.find((s)=>s.type === \"codec\" && s.id === rtcStreamStats.codecId); // FIXME OL: incorrect type!\n        const transport = stats.find((s)=>s.type === \"transport\" && s.id === rtcStreamStats.transportId);\n        let roundTripTime;\n        if (transport && transport.dtlsState === \"connected\") {\n            const candidatePair = stats.find((s)=>s.type === \"candidate-pair\" && s.id === transport.selectedCandidatePairId);\n            roundTripTime = candidatePair?.currentRoundTripTime;\n        }\n        return {\n            bytesSent: rtcStreamStats.bytesSent,\n            bytesReceived: rtcStreamStats.bytesReceived,\n            codec: codec?.mimeType,\n            currentRoundTripTime: roundTripTime,\n            frameHeight: rtcStreamStats.frameHeight,\n            frameWidth: rtcStreamStats.frameWidth,\n            framesPerSecond: rtcStreamStats.framesPerSecond,\n            jitter: rtcStreamStats.jitter,\n            kind: rtcStreamStats.kind,\n            // @ts-ignore: available in Chrome only, TS doesn't recognize this\n            qualityLimitationReason: rtcStreamStats.qualityLimitationReason,\n            rid: rtcStreamStats.rid,\n            ssrc: rtcStreamStats.ssrc\n        };\n    });\n    return {\n        rawStats: report,\n        streams,\n        timestamp: Date.now()\n    };\n};\nconst getEmptyStats = (stats)=>{\n    return {\n        rawReport: stats ?? {\n            streams: [],\n            timestamp: Date.now()\n        },\n        totalBytesSent: 0,\n        totalBytesReceived: 0,\n        averageJitterInMs: 0,\n        averageRoundTripTimeInMs: 0,\n        qualityLimitationReasons: \"none\",\n        highestFrameWidth: 0,\n        highestFrameHeight: 0,\n        highestFramesPerSecond: 0,\n        timestamp: Date.now()\n    };\n};\n/**\n * Aggregates generic stats.\n *\n * @param stats the stats to aggregate.\n */ const aggregate = (stats)=>{\n    const aggregatedStats = getEmptyStats(stats);\n    let maxArea = -1;\n    const area = (w, h)=>w * h;\n    const qualityLimitationReasons = new Set();\n    const streams = stats.streams;\n    const report = streams.reduce((acc, stream)=>{\n        acc.totalBytesSent += stream.bytesSent || 0;\n        acc.totalBytesReceived += stream.bytesReceived || 0;\n        acc.averageJitterInMs += stream.jitter || 0;\n        acc.averageRoundTripTimeInMs += stream.currentRoundTripTime || 0;\n        // naive calculation of the highest resolution\n        const streamArea = area(stream.frameWidth || 0, stream.frameHeight || 0);\n        if (streamArea > maxArea) {\n            acc.highestFrameWidth = stream.frameWidth || 0;\n            acc.highestFrameHeight = stream.frameHeight || 0;\n            acc.highestFramesPerSecond = stream.framesPerSecond || 0;\n            maxArea = streamArea;\n        }\n        qualityLimitationReasons.add(stream.qualityLimitationReason || \"\");\n        return acc;\n    }, aggregatedStats);\n    if (streams.length > 0) {\n        report.averageJitterInMs = Math.round(report.averageJitterInMs / streams.length * 1000);\n        report.averageRoundTripTimeInMs = Math.round(report.averageRoundTripTimeInMs / streams.length * 1000);\n    }\n    const qualityLimitationReason = [\n        qualityLimitationReasons.has(\"cpu\") && \"cpu\",\n        qualityLimitationReasons.has(\"bandwidth\") && \"bandwidth\",\n        qualityLimitationReasons.has(\"other\") && \"other\"\n    ].filter(Boolean).join(\", \");\n    if (qualityLimitationReason) {\n        report.qualityLimitationReasons = qualityLimitationReason;\n    }\n    return report;\n};\nclass SfuStatsReporter {\n    constructor(sfuClient, { options, clientDetails, subscriber, publisher }){\n        this.logger = getLogger([\n            \"SfuStatsReporter\"\n        ]);\n        this.run = async ()=>{\n            const [subscriberStats, publisherStats] = await Promise.all([\n                this.subscriber.getStats().then(flatten).then(JSON.stringify),\n                this.publisher?.getStats().then(flatten).then(JSON.stringify) ?? \"[]\"\n            ]);\n            await this.sfuClient.sendStats({\n                sdk: this.sdkName,\n                sdkVersion: this.sdkVersion,\n                webrtcVersion: this.webRTCVersion,\n                subscriberStats,\n                publisherStats\n            });\n        };\n        this.start = ()=>{\n            if (this.options.reporting_interval_ms <= 0) return;\n            this.intervalId = setInterval(()=>{\n                this.run().catch((err)=>{\n                    this.logger(\"warn\", \"Failed to report stats\", err);\n                });\n            }, this.options.reporting_interval_ms);\n        };\n        this.stop = ()=>{\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        };\n        this.sfuClient = sfuClient;\n        this.options = options;\n        this.subscriber = subscriber;\n        this.publisher = publisher;\n        const webRTCInfo = getWebRTCInfo();\n        const { sdk, browser } = clientDetails;\n        this.sdkName = getSdkName(sdk);\n        this.sdkVersion = getSdkVersion(sdk);\n        // The WebRTC version if passed from the SDK, it is taken else the browser info is sent.\n        this.webRTCVersion = webRTCInfo?.version || `${browser?.name || \"\"}-${browser?.version || \"\"}` || \"N/A\";\n    }\n}\nconst DEFAULT_THRESHOLD = 0.35;\nclass ViewportTracker {\n    constructor(){\n        /**\n         * @private\n         */ this.elementHandlerMap = new Map();\n        /**\n         * @private\n         */ this.observer = null;\n        // in React children render before viewport is set, add\n        // them to the queue and observe them once the observer is ready\n        /**\n         * @private\n         */ this.queueSet = new Set();\n        /**\n         * Method to set scrollable viewport as root for the IntersectionObserver, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param viewportElement\n         * @param options\n         * @returns Unobserve\n         */ this.setViewport = (viewportElement, options)=>{\n            const cleanup = ()=>{\n                this.observer?.disconnect();\n                this.observer = null;\n                this.elementHandlerMap.clear();\n            };\n            this.observer = new IntersectionObserver((entries)=>{\n                entries.forEach((entry)=>{\n                    const handler = this.elementHandlerMap.get(entry.target);\n                    handler?.(entry);\n                });\n            }, {\n                root: viewportElement,\n                ...options,\n                threshold: options?.threshold ?? DEFAULT_THRESHOLD\n            });\n            if (this.queueSet.size) {\n                this.queueSet.forEach(([queueElement, queueHandler])=>{\n                    // check if element which requested observation is\n                    // a child of a viewport element, skip if isn't\n                    if (!viewportElement.contains(queueElement)) return;\n                    this.observer.observe(queueElement);\n                    this.elementHandlerMap.set(queueElement, queueHandler);\n                });\n                this.queueSet.clear();\n            }\n            return cleanup;\n        };\n        /**\n         * Method to set element to observe and handler to be triggered whenever IntersectionObserver\n         * detects a possible change in element's visibility within specified viewport, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param element\n         * @param handler\n         * @returns Unobserve\n         */ this.observe = (element, handler)=>{\n            const queueItem = [\n                element,\n                handler\n            ];\n            const cleanup = ()=>{\n                this.elementHandlerMap.delete(element);\n                this.observer?.unobserve(element);\n                this.queueSet.delete(queueItem);\n            };\n            if (this.elementHandlerMap.has(element)) return cleanup;\n            if (!this.observer) {\n                this.queueSet.add(queueItem);\n                return cleanup;\n            }\n            if (this.observer.root.contains(element)) {\n                this.elementHandlerMap.set(element, handler);\n                this.observer.observe(element);\n            }\n            return cleanup;\n        };\n    }\n}\n/**\n * Checks whether the current browser is Safari.\n */ const isSafari = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || \"\");\n};\n/**\n * Checks whether the current browser is Firefox.\n */ const isFirefox = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.userAgent?.includes(\"Firefox\");\n};\n/**\n * Checks whether the current browser is Google Chrome.\n */ const isChrome = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.userAgent?.includes(\"Chrome\");\n};\nvar browsers = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    isChrome: isChrome,\n    isFirefox: isFirefox,\n    isSafari: isSafari\n});\nconst DEFAULT_VIEWPORT_VISIBILITY_STATE = {\n    videoTrack: VisibilityState.UNKNOWN,\n    screenShareTrack: VisibilityState.UNKNOWN\n};\n/**\n * A manager class that handles dynascale related tasks like:\n *\n * - binding video elements to session ids\n * - binding audio elements to session ids\n * - tracking element visibility\n * - updating subscriptions based on viewport visibility\n * - updating subscriptions based on video element dimensions\n * - updating subscriptions based on published tracks\n */ class DynascaleManager {\n    /**\n     * Creates a new DynascaleManager instance.\n     *\n     * @param call the call to manage.\n     */ constructor(call){\n        /**\n         * The viewport tracker instance.\n         */ this.viewportTracker = new ViewportTracker();\n        this.logger = getLogger([\n            \"DynascaleManager\"\n        ]);\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         * @returns Untrack.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            const cleanup = this.viewportTracker.observe(element, (entry)=>{\n                this.call.state.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    // observer triggers when the element is \"moved\" to be a fullscreen element\n                    // keep it VISIBLE if that happens to prevent fullscreen with placeholder\n                    const isVisible = entry.isIntersecting || document.fullscreenElement === element ? VisibilityState.VISIBLE : VisibilityState.INVISIBLE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: isVisible\n                        }\n                    };\n                });\n            });\n            return ()=>{\n                cleanup();\n                // reset visibility state to UNKNOWN upon cleanup\n                // so that the layouts that are not actively observed\n                // can still function normally (runtime layout switching)\n                this.call.state.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: VisibilityState.UNKNOWN\n                        }\n                    };\n                });\n            };\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.viewportTracker.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const boundParticipant = this.call.state.findParticipantBySessionId(sessionId);\n            if (!boundParticipant) return;\n            const requestTrackWithDimensions = (debounceType, dimension)=>{\n                if (dimension && (dimension.width === 0 || dimension.height === 0)) {\n                    // ignore 0x0 dimensions. this can happen when the video element\n                    // is not visible (e.g., has display: none).\n                    // we treat this as \"unsubscription\" as we don't want to keep\n                    // consuming bandwidth for a video that is not visible on the screen.\n                    this.logger(\"debug\", `Ignoring 0x0 dimension`, boundParticipant);\n                    dimension = undefined;\n                }\n                this.call.updateSubscriptionsPartial(trackType, {\n                    [sessionId]: {\n                        dimension\n                    }\n                }, debounceType);\n            };\n            const participant$ = this.call.state.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.find((participant)=>participant.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.takeWhile)((participant)=>!!participant), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            /**\n             * Since the video elements are now being removed from the DOM (React SDK) upon\n             * visibility change, this subscription is not in use an stays here only for the\n             * plain JS integrations where integrators might choose not to remove the video\n             * elements from the DOM.\n             */ // keep copy for resize observer handler\n            let viewportVisibilityState;\n            const viewportVisibilityStateSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((p)=>p.viewportVisibilityState?.[trackType]), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)()).subscribe((nextViewportVisibilityState)=>{\n                // skip initial trigger\n                if (!viewportVisibilityState) {\n                    viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                    return;\n                }\n                viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                if (nextViewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return requestTrackWithDimensions(DebounceType.MEDIUM, undefined);\n                }\n                requestTrackWithDimensions(DebounceType.MEDIUM, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n            });\n            let lastDimensions;\n            const resizeObserver = boundParticipant.isLocalParticipant ? null : new ResizeObserver(()=>{\n                const currentDimensions = `${videoElement.clientWidth},${videoElement.clientHeight}`;\n                // skip initial trigger\n                if (!lastDimensions) {\n                    lastDimensions = currentDimensions;\n                    return;\n                }\n                if (lastDimensions === currentDimensions || viewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return;\n                }\n                requestTrackWithDimensions(DebounceType.SLOW, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n                lastDimensions = currentDimensions;\n            });\n            resizeObserver?.observe(videoElement);\n            // element renders and gets bound - track subscription gets\n            // triggered first other ones get skipped on initial subscriptions\n            const publishedTracksSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilKeyChanged)(\"publishedTracks\"), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((p)=>trackType === \"videoTrack\" ? hasVideo(p) : hasScreenShare(p)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)()).subscribe((isPublishing)=>{\n                if (isPublishing) {\n                    // the participant just started to publish a track\n                    requestTrackWithDimensions(DebounceType.FAST, {\n                        width: videoElement.clientWidth,\n                        height: videoElement.clientHeight\n                    });\n                } else {\n                    // the participant just stopped publishing a track\n                    requestTrackWithDimensions(DebounceType.FAST, undefined);\n                }\n            });\n            videoElement.autoplay = true;\n            videoElement.playsInline = true;\n            // explicitly marking the element as muted will allow autoplay to work\n            // without prior user interaction:\n            // https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide\n            videoElement.muted = true;\n            const streamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilKeyChanged)(trackType === \"videoTrack\" ? \"videoStream\" : \"screenShareStream\")).subscribe((p)=>{\n                const source = trackType === \"videoTrack\" ? p.videoStream : p.screenShareStream;\n                if (videoElement.srcObject === source) return;\n                videoElement.srcObject = source ?? null;\n                if (isSafari() || isFirefox()) {\n                    setTimeout(()=>{\n                        videoElement.srcObject = source ?? null;\n                        videoElement.play().catch((e)=>{\n                            this.logger(\"warn\", `Failed to play stream`, e);\n                        });\n                    // we add extra delay until we attempt to force-play\n                    // the participant's media stream in Firefox and Safari,\n                    // as they seem to have some timing issues\n                    }, 25);\n                }\n            });\n            return ()=>{\n                requestTrackWithDimensions(DebounceType.FAST, undefined);\n                viewportVisibilityStateSubscription?.unsubscribe();\n                publishedTracksSubscription?.unsubscribe();\n                streamSubscription.unsubscribe();\n                resizeObserver?.disconnect();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         * @returns a cleanup function that will unbind the audio element.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType)=>{\n            const participant = this.call.state.findParticipantBySessionId(sessionId);\n            if (!participant || participant.isLocalParticipant) return;\n            const participant$ = this.call.state.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.find((p)=>p.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.takeWhile)((p)=>!!p), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            const updateMediaStreamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilKeyChanged)(trackType === \"screenShareAudioTrack\" ? \"screenShareAudioStream\" : \"audioStream\")).subscribe((p)=>{\n                const source = trackType === \"screenShareAudioTrack\" ? p.screenShareAudioStream : p.audioStream;\n                if (audioElement.srcObject === source) return;\n                setTimeout(()=>{\n                    audioElement.srcObject = source ?? null;\n                    if (audioElement.srcObject) {\n                        audioElement.play().catch((e)=>{\n                            this.logger(\"warn\", `Failed to play stream`, e);\n                        });\n                        // audio output device shall be set after the audio element is played\n                        // otherwise, the browser will not pick it up, and will always\n                        // play audio through the system's default device\n                        const { selectedDevice } = this.call.speaker.state;\n                        if (selectedDevice && \"setSinkId\" in audioElement) {\n                            audioElement.setSinkId(selectedDevice);\n                        }\n                    }\n                });\n            });\n            const sinkIdSubscription = !(\"setSinkId\" in audioElement) ? null : this.call.speaker.state.selectedDevice$.subscribe((deviceId)=>{\n                if (deviceId) {\n                    audioElement.setSinkId(deviceId);\n                }\n            });\n            const volumeSubscription = (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n                this.call.speaker.state.volume$,\n                participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilKeyChanged)(\"audioVolume\"))\n            ]).subscribe(([volume, p])=>{\n                audioElement.volume = p.audioVolume ?? volume;\n            });\n            audioElement.autoplay = true;\n            return ()=>{\n                sinkIdSubscription?.unsubscribe();\n                volumeSubscription.unsubscribe();\n                updateMediaStreamSubscription.unsubscribe();\n            };\n        };\n        this.call = call;\n    }\n}\n/**\n * Stores the permissions for the current user and exposes\n * a few helper methods which make it easier to work with permissions.\n *\n * This is an internal class meant to be used in combination with\n * a {@link Call} instance.\n *\n * @internal\n */ class PermissionsContext {\n    constructor(){\n        this.permissions = [];\n        /**\n         * Sets the permissions for the current user.\n         *\n         * @param permissions the permissions to set.\n         */ this.setPermissions = (permissions)=>{\n            this.permissions = permissions || [];\n        };\n        /**\n         * Sets the settings for the bound call.\n         * @param settings\n         */ this.setCallSettings = (settings)=>{\n            this.settings = settings;\n        };\n        /**\n         * Checks if the current user has a specific permission.\n         *\n         * @param permission the permission to check for.\n         */ this.hasPermission = (permission)=>{\n            return this.permissions.includes(permission);\n        };\n        /**\n         * Checks if the current user can request a specific permission\n         * within the call.\n         *\n         * @param permission the permission to check for.\n         * @param settings the call settings to check against (optional).\n         */ this.canRequest = (permission, settings = this.settings)=>{\n            if (!settings) return false;\n            const { audio, video, screensharing } = settings;\n            switch(permission){\n                case OwnCapability.SEND_AUDIO:\n                    return audio.access_request_enabled;\n                case OwnCapability.SEND_VIDEO:\n                    return video.access_request_enabled;\n                case OwnCapability.SCREENSHARE:\n                    return screensharing.access_request_enabled;\n                default:\n                    return false;\n            }\n        };\n    }\n}\n/**\n * Represents a call type.\n */ class CallType {\n    /**\n     * Constructs a new CallType.\n     *\n     * @param name the name of the call type.\n     * @param options the options for the call type.\n     */ constructor(name, options = {\n        sortParticipantsBy: defaultSortPreset\n    }){\n        this.name = name;\n        this.options = options;\n    }\n}\n/**\n * A registry of {@link CallType}s.\n * You can register and unregister call types.\n */ class CallTypesRegistry {\n    /**\n     * Constructs a new CallTypesRegistry.\n     *\n     * @param callTypes the initial call types to register.\n     */ constructor(callTypes){\n        /**\n         * Registers a new call type.\n         *\n         * @param callType the call type to register.\n         */ this.register = (callType)=>{\n            this.callTypes[callType.name] = callType;\n        };\n        /**\n         * Unregisters a call type.\n         *\n         * @param name the name of the call type to unregister.\n         */ this.unregister = (name)=>{\n            delete this.callTypes[name];\n        };\n        /**\n         * Gets a call type by name.\n         *\n         * @param name the name of the call type to get.\n         */ this.get = (name)=>{\n            if (!this.callTypes[name]) {\n                this.register(new CallType(name));\n            }\n            return this.callTypes[name];\n        };\n        this.callTypes = callTypes.reduce((acc, callType)=>{\n            acc[callType.name] = callType;\n            return acc;\n        }, {});\n    }\n}\n/**\n * The default call types registry.\n * You can use this instance to dynamically register and unregister call types.\n */ const CallTypes = new CallTypesRegistry([\n    new CallType(\"default\", {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType(\"development\", {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType(\"livestream\", {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    }),\n    new CallType(\"audio_room\", {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    })\n]);\nclass BrowserPermission {\n    constructor(permission){\n        this.permission = permission;\n        this.disposeController = new AbortController();\n        this.wasPrompted = false;\n        this.listeners = new Set();\n        this.logger = getLogger([\n            \"permissions\"\n        ]);\n        const signal = this.disposeController.signal;\n        this.ready = (async ()=>{\n            const assumeGranted = (error)=>{\n                this.setState(\"granted\");\n            };\n            if (!canQueryPermissions()) {\n                return assumeGranted();\n            }\n            try {\n                const status = await navigator.permissions.query({\n                    name: permission.queryName\n                });\n                if (!signal.aborted) {\n                    this.setState(status.state);\n                    status.addEventListener(\"change\", ()=>this.setState(status.state), {\n                        signal\n                    });\n                }\n            } catch (err) {\n                assumeGranted();\n            }\n        })();\n    }\n    dispose() {\n        this.state = undefined;\n        this.disposeController.abort();\n    }\n    async getState() {\n        await this.ready;\n        if (!this.state) {\n            throw new Error(\"BrowserPermission instance possibly disposed\");\n        }\n        return this.state;\n    }\n    async prompt({ forcePrompt = false, throwOnNotAllowed = false } = {}) {\n        await withoutConcurrency(`permission-prompt-${this.permission.queryName}`, async ()=>{\n            if (await this.getState() !== \"prompt\" || this.wasPrompted && !forcePrompt) {\n                const isGranted = this.state === \"granted\";\n                if (!isGranted && throwOnNotAllowed) {\n                    throw new DOMException(\"Permission was not granted previously, and prompting again is not allowed\", \"NotAllowedError\");\n                }\n                return isGranted;\n            }\n            try {\n                this.wasPrompted = true;\n                const stream = await navigator.mediaDevices.getUserMedia(this.permission.constraints);\n                disposeOfMediaStream(stream);\n                return true;\n            } catch (e) {\n                if (e instanceof DOMException && e.name === \"NotAllowedError\") {\n                    this.logger(\"info\", \"Browser permission was not granted\", {\n                        permission: this.permission\n                    });\n                    if (throwOnNotAllowed) {\n                        throw e;\n                    }\n                    return false;\n                }\n                this.logger(\"error\", `Failed to getUserMedia`, {\n                    error: e,\n                    permission: this.permission\n                });\n                throw e;\n            }\n        });\n    }\n    listen(cb) {\n        this.listeners.add(cb);\n        if (this.state) cb(this.state);\n        return ()=>this.listeners.delete(cb);\n    }\n    asObservable() {\n        return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_23__.fromEventPattern)((handler)=>this.listen(handler), (handler, unlisten)=>unlisten()).pipe(// In some browsers, the 'change' event doesn't reliably emit and hence,\n        // permissionState stays in 'prompt' state forever.\n        // Typically, this happens when a user grants one-time permission.\n        // Instead of checking if a permission is granted, we check if it isn't denied\n        (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((state)=>state !== \"denied\"));\n    }\n    setState(state) {\n        if (this.state !== state) {\n            this.state = state;\n            this.listeners.forEach((listener)=>listener(state));\n        }\n    }\n}\nfunction canQueryPermissions() {\n    return !isReactNative() && typeof navigator !== \"undefined\" && !!navigator.permissions?.query;\n}\nconst uninitialized = Symbol(\"uninitialized\");\n/**\n * Lazily creates a value using a provided factory\n */ function lazy(factory) {\n    let value = uninitialized;\n    return ()=>{\n        if (value === uninitialized) {\n            value = factory();\n        }\n        return value;\n    };\n}\n/**\n * Returns an Observable that emits the list of available devices\n * that meet the given constraints.\n *\n * @param constraints the constraints to use when requesting the devices.\n * @param kind the kind of devices to enumerate.\n */ const getDevices = (permission, kind)=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__.from)((async ()=>{\n        let devices = await navigator.mediaDevices.enumerateDevices();\n        // for privacy reasons, most browsers don't give you device labels\n        // unless you have a corresponding camera or microphone permission\n        const shouldPromptForBrowserPermission = devices.some((device)=>device.kind === kind && device.label === \"\");\n        if (shouldPromptForBrowserPermission) {\n            await permission.prompt({\n                throwOnNotAllowed: true\n            });\n            devices = await navigator.mediaDevices.enumerateDevices();\n        }\n        return devices.filter((d)=>d.kind === kind);\n    })());\n};\n/**\n * Tells if the browser supports audio output change on 'audio' elements,\n * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId.\n */ const checkIfAudioOutputChangeSupported = ()=>{\n    if (typeof document === \"undefined\") return false;\n    const element = document.createElement(\"audio\");\n    return \"setSinkId\" in element;\n};\n/**\n * The default constraints used to request audio devices.\n */ const audioDeviceConstraints = {\n    audio: {\n        autoGainControl: true,\n        noiseSuppression: true,\n        echoCancellation: true\n    }\n};\n/**\n * The default constraints used to request video devices.\n */ const videoDeviceConstraints = {\n    video: {\n        width: 1280,\n        height: 720\n    }\n};\n/**\n * Keeps track of the browser permission to use microphone. This permission also\n * affects an ability to enumerate audio devices.\n */ const getAudioBrowserPermission = lazy(()=>new BrowserPermission({\n        constraints: audioDeviceConstraints,\n        queryName: \"microphone\"\n    }));\n/**\n * Keeps track of the browser permission to use camera. This permission also\n * affects an ability to enumerate video devices.\n */ const getVideoBrowserPermission = lazy(()=>new BrowserPermission({\n        constraints: videoDeviceConstraints,\n        queryName: \"camera\"\n    }));\nconst getDeviceChangeObserver = lazy(()=>{\n    // 'addEventListener' is not available in React Native, returning\n    // an observable that will never fire\n    if (!navigator.mediaDevices.addEventListener) return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__.from)([]);\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_25__.fromEvent)(navigator.mediaDevices, \"devicechange\").pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)(()=>undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_26__.debounceTime)(500));\n});\n/**\n * Prompts the user for a permission to use audio devices (if not already granted\n * and was not prompted before) and lists the available 'audioinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getAudioDevices = lazy(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__.merge)(getDeviceChangeObserver(), getAudioBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.concatMap)(()=>getDevices(getAudioBrowserPermission(), \"audioinput\")), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1));\n});\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'videoinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getVideoDevices = ()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__.merge)(getDeviceChangeObserver(), getVideoBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.concatMap)(()=>getDevices(getVideoBrowserPermission(), \"videoinput\")), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1));\n};\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'audiooutput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getAudioOutputDevices = ()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__.merge)(getDeviceChangeObserver(), getAudioBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.concatMap)(()=>getDevices(getAudioBrowserPermission(), \"audiooutput\")), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1));\n};\nconst getStream = async (constraints)=>{\n    return await navigator.mediaDevices.getUserMedia(constraints);\n};\n/**\n * Returns an audio media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns the new `MediaStream` fulfilling the given constraints.\n */ const getAudioStream = async (trackConstraints)=>{\n    const constraints = {\n        audio: {\n            ...audioDeviceConstraints.audio,\n            ...trackConstraints\n        }\n    };\n    try {\n        await getAudioBrowserPermission().prompt({\n            throwOnNotAllowed: true,\n            forcePrompt: true\n        });\n        return getStream(constraints);\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", \"Failed to get audio stream\", {\n            error: e,\n            constraints: constraints\n        });\n        throw e;\n    }\n};\n/**\n * Returns a video media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */ const getVideoStream = async (trackConstraints)=>{\n    const constraints = {\n        video: {\n            ...videoDeviceConstraints.video,\n            ...trackConstraints\n        }\n    };\n    try {\n        await getVideoBrowserPermission().prompt({\n            throwOnNotAllowed: true,\n            forcePrompt: true\n        });\n        return getStream(constraints);\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", \"Failed to get video stream\", {\n            error: e,\n            constraints: constraints\n        });\n        throw e;\n    }\n};\n/**\n * Prompts the user for a permission to share a screen.\n * If the user grants the permission, a screen sharing stream is returned. Throws otherwise.\n *\n * The callers of this API are responsible to handle the possible errors.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n *\n * @param options any additional options to pass to the [`getDisplayMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia) API.\n */ const getScreenShareStream = async (options)=>{\n    try {\n        return await navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: {\n                channelCount: {\n                    ideal: 2\n                },\n                echoCancellation: false,\n                autoGainControl: false,\n                noiseSuppression: false\n            },\n            // @ts-expect-error - not present in types yet\n            systemAudio: \"include\",\n            ...options\n        });\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", \"Failed to get screen share stream\", e);\n        throw e;\n    }\n};\nconst deviceIds$ = typeof navigator !== \"undefined\" && typeof navigator.mediaDevices !== \"undefined\" ? getDeviceChangeObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.concatMap)(()=>navigator.mediaDevices.enumerateDevices()), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1)) : undefined;\n/**\n * Deactivates MediaStream (stops and removes tracks) to be later garbage collected\n *\n * @param stream MediaStream\n * @returns void\n */ const disposeOfMediaStream = (stream)=>{\n    if (!stream.active) return;\n    stream.getTracks().forEach((track)=>{\n        track.stop();\n        stream.removeTrack(track);\n    });\n    // @ts-expect-error release() is present in react-native-webrtc and must be called to dispose the stream\n    if (typeof stream.release === \"function\") {\n        // @ts-expect-error\n        stream.release();\n    }\n};\nclass InputMediaDeviceManager {\n    constructor(call, state, trackType){\n        this.call = call;\n        this.state = state;\n        this.trackType = trackType;\n        /**\n         * if true, stops the media stream when call is left\n         */ this.stopOnLeave = true;\n        this.subscriptions = [];\n        this.isTrackStoppedDueToTrackEnd = false;\n        this.filters = [];\n        this.statusChangeConcurrencyTag = Symbol(\"statusChangeConcurrencyTag\");\n        this.filterRegistrationConcurrencyTag = Symbol(\"filterRegistrationConcurrencyTag\");\n        /**\n         * Disposes the manager.\n         *\n         * @internal\n         */ this.dispose = ()=>{\n            this.subscriptions.forEach((s)=>s());\n        };\n        this.logger = getLogger([\n            `${TrackType[trackType].toLowerCase()} manager`\n        ]);\n        if (deviceIds$ && !isReactNative() && (this.trackType === TrackType.AUDIO || this.trackType === TrackType.VIDEO)) {\n            this.handleDisconnectedOrReplacedDevices();\n        }\n    }\n    /**\n     * Lists the available audio/video devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        return this.getDevices();\n    }\n    /**\n     * Starts stream.\n     */ async enable() {\n        if (this.state.optimisticStatus === \"enabled\") {\n            return;\n        }\n        this.state.setPendingStatus(\"enabled\");\n        await withCancellation(this.statusChangeConcurrencyTag, async (signal)=>{\n            try {\n                await this.unmuteStream();\n                this.state.setStatus(\"enabled\");\n            } finally{\n                if (!signal.aborted) {\n                    this.state.setPendingStatus(this.state.status);\n                }\n            }\n        });\n    }\n    /**\n     * Stops or pauses the stream based on state.disableMode\n     * @param {boolean} [forceStop=false] when true, stops the tracks regardless of the state.disableMode\n     */ async disable(forceStop = false) {\n        this.state.prevStatus = this.state.status;\n        if (!forceStop && this.state.optimisticStatus === \"disabled\") {\n            return;\n        }\n        this.state.setPendingStatus(\"disabled\");\n        await withCancellation(this.statusChangeConcurrencyTag, async (signal)=>{\n            try {\n                const stopTracks = forceStop || this.state.disableMode === \"stop-tracks\";\n                await this.muteStream(stopTracks);\n                this.state.setStatus(\"disabled\");\n            } finally{\n                if (!signal.aborted) {\n                    this.state.setPendingStatus(this.state.status);\n                }\n            }\n        });\n    }\n    /**\n     * Returns a promise that resolves when all pe\n     */ async statusChangeSettled() {\n        await settled(this.statusChangeConcurrencyTag);\n    }\n    /**\n     * If status was previously enabled, it will re-enable the device.\n     */ async resume() {\n        if (this.state.prevStatus === \"enabled\" && this.state.status === \"disabled\") {\n            await this.enable();\n        }\n    }\n    /**\n     * If the current device status is disabled, it will enable the device,\n     * else it will disable it.\n     */ async toggle() {\n        if (this.state.optimisticStatus === \"enabled\") {\n            return await this.disable();\n        } else {\n            return await this.enable();\n        }\n    }\n    /**\n     * Registers a filter that will be applied to the stream.\n     *\n     * The registered filter will get the existing stream, and it should return\n     * a new stream with the applied filter.\n     *\n     * @param filter the filter to register.\n     * @returns MediaStreamFilterRegistrationResult\n     */ registerFilter(filter) {\n        const entry = {\n            start: filter,\n            stop: undefined\n        };\n        const registered = withoutConcurrency(this.filterRegistrationConcurrencyTag, async ()=>{\n            this.filters.push(entry);\n            await this.applySettingsToStream();\n        });\n        return {\n            registered,\n            unregister: ()=>withoutConcurrency(this.filterRegistrationConcurrencyTag, async ()=>{\n                    entry.stop?.();\n                    this.filters = this.filters.filter((f)=>f !== entry);\n                    await this.applySettingsToStream();\n                })\n        };\n    }\n    /**\n     * Will set the default constraints for the device.\n     *\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.state.setDefaultConstraints(constraints);\n    }\n    /**\n     * Selects a device.\n     *\n     * Note: This method is not supported in React Native\n     * @param deviceId the device id to select.\n     */ async select(deviceId) {\n        if (isReactNative()) {\n            throw new Error(\"This method is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for reference.\");\n        }\n        if (deviceId === this.state.selectedDevice) {\n            return;\n        }\n        this.state.setDevice(deviceId);\n        await this.applySettingsToStream();\n    }\n    async applySettingsToStream() {\n        if (this.state.status === \"enabled\") {\n            await this.muteStream();\n            await this.unmuteStream();\n        }\n    }\n    getTracks() {\n        return this.state.mediaStream?.getTracks() ?? [];\n    }\n    async muteStream(stopTracks = true) {\n        if (!this.state.mediaStream) return;\n        this.logger(\"debug\", `${stopTracks ? \"Stopping\" : \"Disabling\"} stream`);\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.stopPublishStream(stopTracks);\n        }\n        this.muteLocalStream(stopTracks);\n        const allEnded = this.getTracks().every((t)=>t.readyState === \"ended\");\n        if (allEnded) {\n            if (this.state.mediaStream && // @ts-expect-error release() is present in react-native-webrtc\n            typeof this.state.mediaStream.release === \"function\") {\n                // @ts-expect-error called to dispose the stream in RN\n                this.state.mediaStream.release();\n            }\n            this.state.setMediaStream(undefined, undefined);\n            this.filters.forEach((entry)=>entry.stop?.());\n        }\n    }\n    muteTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.enabled) track.enabled = false;\n        });\n    }\n    unmuteTracks() {\n        this.getTracks().forEach((track)=>{\n            if (!track.enabled) track.enabled = true;\n        });\n    }\n    stopTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.readyState === \"live\") track.stop();\n        });\n    }\n    muteLocalStream(stopTracks) {\n        if (!this.state.mediaStream) {\n            return;\n        }\n        if (stopTracks) {\n            this.stopTracks();\n        } else {\n            this.muteTracks();\n        }\n    }\n    async unmuteStream() {\n        this.logger(\"debug\", \"Starting stream\");\n        let stream;\n        let rootStream;\n        if (this.state.mediaStream && this.getTracks().every((t)=>t.readyState === \"live\")) {\n            stream = this.state.mediaStream;\n            this.unmuteTracks();\n        } else {\n            const defaultConstraints = this.state.defaultConstraints;\n            const constraints = {\n                ...defaultConstraints,\n                deviceId: this.state.selectedDevice\n            };\n            /**\n             * Chains two media streams together.\n             *\n             * In our case, filters MediaStreams are derived from their parent MediaStream.\n             * However, once a child filter's track is stopped,\n             * the tracks of the parent MediaStream aren't automatically stopped.\n             * This leads to a situation where the camera indicator light is still on\n             * even though the user stopped publishing video.\n             *\n             * This function works around this issue by stopping the parent MediaStream's tracks\n             * as well once the child filter's tracks are stopped.\n             *\n             * It works by patching the stop() method of the child filter's tracks to also stop\n             * the parent MediaStream's tracks of the same type. Here we assume that\n             * the parent MediaStream has only one track of each type.\n             *\n             * @param parentStream the parent MediaStream. Omit for the root stream.\n             */ const chainWith = (parentStream)=>async (filterStream)=>{\n                    if (!parentStream) return filterStream;\n                    // TODO OL: take care of track.enabled property as well\n                    const parent = await parentStream;\n                    filterStream.getTracks().forEach((track)=>{\n                        const originalStop = track.stop;\n                        track.stop = function stop() {\n                            originalStop.call(track);\n                            parent.getTracks().forEach((parentTrack)=>{\n                                if (parentTrack.kind === track.kind) {\n                                    parentTrack.stop();\n                                }\n                            });\n                        };\n                    });\n                    parent.getTracks().forEach((parentTrack)=>{\n                        // When the parent stream abruptly ends, we propagate the event\n                        // to the filter stream.\n                        // This usually happens when the camera/microphone permissions\n                        // are revoked or when the device is disconnected.\n                        const handleParentTrackEnded = ()=>{\n                            filterStream.getTracks().forEach((track)=>{\n                                if (parentTrack.kind !== track.kind) return;\n                                track.stop();\n                                track.dispatchEvent(new Event(\"ended\")); // propagate the event\n                            });\n                        };\n                        parentTrack.addEventListener(\"ended\", handleParentTrackEnded);\n                        this.subscriptions.push(()=>{\n                            parentTrack.removeEventListener(\"ended\", handleParentTrackEnded);\n                        });\n                    });\n                    return filterStream;\n                };\n            // the rootStream represents the stream coming from the actual device\n            // e.g. camera or microphone stream\n            rootStream = this.getStream(constraints);\n            // we publish the last MediaStream of the chain\n            stream = await this.filters.reduce((parent, entry)=>parent.then((inputStream)=>{\n                    const { stop, output } = entry.start(inputStream);\n                    entry.stop = stop;\n                    return output;\n                }).then(chainWith(parent), (error)=>{\n                    this.logger(\"warn\", \"Fitler failed to start and will be ignored\", error);\n                    return parent;\n                }), rootStream);\n        }\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.publishStream(stream);\n        }\n        if (this.state.mediaStream !== stream) {\n            this.state.setMediaStream(stream, await rootStream);\n            this.getTracks().forEach((track)=>{\n                track.addEventListener(\"ended\", async ()=>{\n                    await this.statusChangeSettled();\n                    if (this.state.status === \"enabled\") {\n                        this.isTrackStoppedDueToTrackEnd = true;\n                        setTimeout(()=>{\n                            this.isTrackStoppedDueToTrackEnd = false;\n                        }, 2000);\n                        await this.disable();\n                    }\n                });\n            });\n        }\n    }\n    get mediaDeviceKind() {\n        if (this.trackType === TrackType.AUDIO) {\n            return \"audioinput\";\n        }\n        if (this.trackType === TrackType.VIDEO) {\n            return \"videoinput\";\n        }\n        return \"\";\n    }\n    handleDisconnectedOrReplacedDevices() {\n        this.subscriptions.push(createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n            deviceIds$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_30__.pairwise)()),\n            this.state.selectedDevice$\n        ]), async ([[prevDevices, currentDevices], deviceId])=>{\n            try {\n                if (!deviceId) return;\n                await this.statusChangeSettled();\n                let isDeviceDisconnected = false;\n                let isDeviceReplaced = false;\n                const currentDevice = this.findDeviceInList(currentDevices, deviceId);\n                const prevDevice = this.findDeviceInList(prevDevices, deviceId);\n                if (!currentDevice && prevDevice) {\n                    isDeviceDisconnected = true;\n                } else if (currentDevice && prevDevice && currentDevice.deviceId === prevDevice.deviceId && currentDevice.groupId !== prevDevice.groupId) {\n                    isDeviceReplaced = true;\n                }\n                if (isDeviceDisconnected) {\n                    await this.disable();\n                    await this.select(undefined);\n                }\n                if (isDeviceReplaced) {\n                    if (this.isTrackStoppedDueToTrackEnd && this.state.status === \"disabled\") {\n                        await this.enable();\n                        this.isTrackStoppedDueToTrackEnd = false;\n                    } else {\n                        await this.applySettingsToStream();\n                    }\n                }\n            } catch (err) {\n                this.logger(\"warn\", \"Unexpected error while handling disconnected or replaced device\", err);\n            }\n        }));\n    }\n    findDeviceInList(devices, deviceId) {\n        return devices.find((d)=>d.deviceId === deviceId && d.kind === this.mediaDeviceKind);\n    }\n}\nclass InputMediaDeviceManagerState {\n    /**\n     * Constructs new InputMediaDeviceManagerState instance.\n     *\n     * @param disableMode the disable mode to use.\n     * @param permission the BrowserPermission to use for querying.\n     * `undefined` means no permission is required.\n     */ constructor(disableMode = \"stop-tracks\", permission){\n        this.disableMode = disableMode;\n        this.statusSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.optimisticStatusSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.mediaStreamSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.defaultConstraintsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current media stream, or `undefined` if the device is currently disabled.\n         *\n         */ this.mediaStream$ = this.mediaStreamSubject.asObservable();\n        /**\n         * An Observable that emits the currently selected device\n         */ this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the device status\n         */ this.status$ = this.statusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        /**\n         * An Observable the reflects the requested device status. Useful for optimistic UIs\n         */ this.optimisticStatus$ = this.optimisticStatusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        /**\n         * The default constraints for the device.\n         */ this.defaultConstraints$ = this.defaultConstraintsSubject.asObservable();\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        this.hasBrowserPermission$ = permission ? permission.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1)) : (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_31__.of)(true);\n    }\n    /**\n     * The device status\n     */ get status() {\n        return this.getCurrentValue(this.status$);\n    }\n    /**\n     * The requested device status. Useful for optimistic UIs\n     */ get optimisticStatus() {\n        return this.getCurrentValue(this.optimisticStatus$);\n    }\n    /**\n     * The currently selected device\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The current media stream, or `undefined` if the device is currently disabled.\n     */ get mediaStream() {\n        return this.getCurrentValue(this.mediaStream$);\n    }\n    /**\n     * @internal\n     * @param status\n     */ setStatus(status) {\n        this.setCurrentValue(this.statusSubject, status);\n    }\n    /**\n     * @internal\n     * @param pendingStatus\n     */ setPendingStatus(pendingStatus) {\n        this.setCurrentValue(this.optimisticStatusSubject, pendingStatus);\n    }\n    /**\n     * Updates the `mediaStream` state variable.\n     *\n     * @internal\n     * @param stream the stream to set.\n     * @param rootStream the root stream, applicable when filters are used\n     * as this is the stream that holds the actual deviceId information.\n     */ setMediaStream(stream, rootStream) {\n        this.setCurrentValue(this.mediaStreamSubject, stream);\n        if (rootStream) {\n            this.setDevice(this.getDeviceIdFromStream(rootStream));\n        }\n    }\n    /**\n     * @internal\n     * @param deviceId the device id to set.\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * Gets the default constraints for the device.\n     */ get defaultConstraints() {\n        return this.getCurrentValue(this.defaultConstraints$);\n    }\n    /**\n     * Sets the default constraints for the device.\n     *\n     * @internal\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.setCurrentValue(this.defaultConstraintsSubject, constraints);\n    }\n}\nclass CameraManagerState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(\"stop-tracks\", getVideoBrowserPermission());\n        this.directionSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.direction$ = this.directionSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n    }\n    /**\n     * The preferred camera direction\n     * front - means the camera facing the user\n     * back - means the camera facing the environment\n     */ get direction() {\n        return this.getCurrentValue(this.direction$);\n    }\n    /**\n     * @internal\n     */ setDirection(direction) {\n        this.setCurrentValue(this.directionSubject, direction);\n    }\n    /**\n     * @internal\n     */ setMediaStream(stream, rootStream) {\n        super.setMediaStream(stream, rootStream);\n        if (stream) {\n            // RN getSettings() doesn't return facingMode, so we don't verify camera direction\n            const direction = isReactNative() ? this.direction : stream.getVideoTracks()[0]?.getSettings().facingMode === \"environment\" ? \"back\" : \"front\";\n            this.setDirection(direction);\n        }\n    }\n    getDeviceIdFromStream(stream) {\n        const [track] = stream.getVideoTracks();\n        return track?.getSettings().deviceId;\n    }\n}\nclass CameraManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new CameraManagerState(), TrackType.VIDEO);\n        this.targetResolution = {\n            width: 1280,\n            height: 720\n        };\n    }\n    /**\n     * Select the camera direction.\n     *\n     * @param direction the direction of the camera to select.\n     */ async selectDirection(direction) {\n        this.state.setDirection(direction);\n        // Providing both device id and direction doesn't work, so we deselect the device\n        this.state.setDevice(undefined);\n        await this.applySettingsToStream();\n    }\n    /**\n     * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.\n     *\n     * Note: if there is no available camera with the desired direction, this method will do nothing.\n     * @returns\n     */ async flip() {\n        const newDirection = this.state.direction === \"front\" ? \"back\" : \"front\";\n        await this.selectDirection(newDirection);\n    }\n    /**\n     * @internal\n     */ async selectTargetResolution(resolution) {\n        this.targetResolution.height = resolution.height;\n        this.targetResolution.width = resolution.width;\n        if (this.state.optimisticStatus === \"enabled\") {\n            try {\n                await this.statusChangeSettled();\n            } catch (error) {\n                // couldn't enable device, target resolution will be applied the next time user attempts to start the device\n                this.logger(\"warn\", \"could not apply target resolution\", error);\n            }\n        }\n        if (this.state.status === \"enabled\") {\n            const { width, height } = this.state.mediaStream.getVideoTracks()[0]?.getSettings();\n            if (width !== this.targetResolution.width || height !== this.targetResolution.height) {\n                await this.applySettingsToStream();\n                this.logger(\"debug\", `${width}x${height} target resolution applied to media stream`);\n            }\n        }\n    }\n    /**\n     * Sets the preferred codec for encoding the video.\n     *\n     * @internal internal use only, not part of the public API.\n     * @param codec the codec to use for encoding the video.\n     */ setPreferredCodec(codec) {\n        this.preferredCodec = codec;\n    }\n    getDevices() {\n        return getVideoDevices();\n    }\n    getStream(constraints) {\n        constraints.width = this.targetResolution.width;\n        constraints.height = this.targetResolution.height;\n        // We can't set both device id and facing mode\n        // Device id has higher priority\n        if (!constraints.deviceId && this.state.direction) {\n            constraints.facingMode = this.state.direction === \"front\" ? \"user\" : \"environment\";\n        }\n        return getVideoStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishVideoStream(stream, {\n            preferredCodec: this.preferredCodec\n        });\n    }\n    stopPublishStream(stopTracks) {\n        return this.call.stopPublish(TrackType.VIDEO, stopTracks);\n    }\n}\nclass MicrophoneManagerState extends InputMediaDeviceManagerState {\n    constructor(disableMode){\n        super(disableMode, getAudioBrowserPermission());\n        this.speakingWhileMutedSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(false);\n        this.speakingWhileMuted$ = this.speakingWhileMutedSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n    }\n    /**\n     * `true` if the user's microphone is muted but they'are speaking.\n     *\n     * This feature is not available in the React Native SDK.\n     */ get speakingWhileMuted() {\n        return this.getCurrentValue(this.speakingWhileMuted$);\n    }\n    /**\n     * @internal\n     */ setSpeakingWhileMuted(isSpeaking) {\n        this.setCurrentValue(this.speakingWhileMutedSubject, isSpeaking);\n    }\n    getDeviceIdFromStream(stream) {\n        const [track] = stream.getAudioTracks();\n        return track?.getSettings().deviceId;\n    }\n}\nconst DETECTION_FREQUENCY_IN_MS = 500;\nconst AUDIO_LEVEL_THRESHOLD$1 = 150;\nconst FFT_SIZE = 128;\n/**\n * Creates a new sound detector.\n *\n * @param audioStream the audio stream to observe. Depending on the provided configuration, this stream might be destroyed when the sound detector is stopped.\n * @param onSoundDetectedStateChanged a callback which is called when the sound state changes.\n * @param options custom options for the sound detector.\n * @returns a clean-up function which once invoked stops the sound detector.\n */ const createSoundDetector = (audioStream, onSoundDetectedStateChanged, options = {})=>{\n    const { detectionFrequencyInMs = DETECTION_FREQUENCY_IN_MS, audioLevelThreshold = AUDIO_LEVEL_THRESHOLD$1, fftSize = FFT_SIZE, destroyStreamOnStop = true } = options;\n    const audioContext = new AudioContext();\n    const analyser = audioContext.createAnalyser();\n    analyser.fftSize = fftSize;\n    const microphone = audioContext.createMediaStreamSource(audioStream);\n    microphone.connect(analyser);\n    const intervalId = setInterval(()=>{\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(data);\n        const isSoundDetected = data.some((value)=>value >= audioLevelThreshold);\n        const averagedDataValue = data.reduce((pv, cv)=>pv + cv, 0) / data.length;\n        const percentage = averagedDataValue > audioLevelThreshold ? 100 : Math.round(averagedDataValue / audioLevelThreshold * 100);\n        // When the track is disabled, it takes time for the buffer to empty\n        // This check will ensure that we don't send anything if the track is disabled\n        if (audioStream.getAudioTracks()[0]?.enabled) {\n            onSoundDetectedStateChanged({\n                isSoundDetected,\n                audioLevel: percentage\n            });\n        } else {\n            onSoundDetectedStateChanged({\n                isSoundDetected: false,\n                audioLevel: 0\n            });\n        }\n    }, detectionFrequencyInMs);\n    return async function stop() {\n        clearInterval(intervalId);\n        // clean-up the AudioContext elements\n        microphone.disconnect();\n        analyser.disconnect();\n        if (audioContext.state !== \"closed\") {\n            await audioContext.close();\n        }\n        // stop the stream\n        if (destroyStreamOnStop) {\n            audioStream.getTracks().forEach((track)=>{\n                track.stop();\n                audioStream.removeTrack(track);\n            });\n        }\n    };\n};\nconst AUDIO_LEVEL_THRESHOLD = 0.2;\nclass RNSpeechDetector {\n    constructor(){\n        this.pc1 = new RTCPeerConnection({});\n        this.pc2 = new RTCPeerConnection({});\n    }\n    /**\n     * Starts the speech detection.\n     */ async start() {\n        try {\n            const audioStream = await navigator.mediaDevices.getUserMedia({\n                audio: true\n            });\n            this.pc1.addEventListener(\"icecandidate\", async (e)=>{\n                await this.pc2.addIceCandidate(e.candidate);\n            });\n            this.pc2.addEventListener(\"icecandidate\", async (e)=>{\n                await this.pc1.addIceCandidate(e.candidate);\n            });\n            audioStream.getTracks().forEach((track)=>this.pc1.addTrack(track, audioStream));\n            const offer = await this.pc1.createOffer({});\n            await this.pc2.setRemoteDescription(offer);\n            await this.pc1.setLocalDescription(offer);\n            const answer = await this.pc2.createAnswer();\n            await this.pc1.setRemoteDescription(answer);\n            await this.pc2.setLocalDescription(answer);\n            const audioTracks = audioStream.getAudioTracks();\n            // We need to mute the audio track for this temporary stream, or else you will hear yourself twice while in the call.\n            audioTracks.forEach((track)=>track.enabled = false);\n        } catch (error) {\n            console.error(\"Error connecting and negotiating between PeerConnections:\", error);\n        }\n    }\n    /**\n     * Stops the speech detection and releases all allocated resources.\n     */ stop() {\n        this.pc1.close();\n        this.pc2.close();\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n        }\n    }\n    /**\n     * Public method that detects the audio levels and returns the status.\n     */ onSpeakingDetectedStateChange(onSoundDetectedStateChanged) {\n        this.intervalId = setInterval(async ()=>{\n            const stats = await this.pc1.getStats();\n            const report = flatten(stats);\n            // Audio levels are present inside stats of type `media-source` and of kind `audio`\n            const audioMediaSourceStats = report.find((stat)=>stat.type === \"media-source\" && stat.kind === \"audio\");\n            if (audioMediaSourceStats) {\n                const { audioLevel } = audioMediaSourceStats;\n                if (audioLevel) {\n                    if (audioLevel >= AUDIO_LEVEL_THRESHOLD) {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: true,\n                            audioLevel\n                        });\n                    } else {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: false,\n                            audioLevel: 0\n                        });\n                    }\n                }\n            }\n        }, 1000);\n        return ()=>{\n            clearInterval(this.intervalId);\n        };\n    }\n}\nclass MicrophoneManager extends InputMediaDeviceManager {\n    constructor(call, disableMode = isReactNative() ? \"disable-tracks\" : \"stop-tracks\"){\n        super(call, new MicrophoneManagerState(disableMode), TrackType.AUDIO);\n        this.speakingWhileMutedNotificationEnabled = true;\n        this.soundDetectorConcurrencyTag = Symbol(\"soundDetectorConcurrencyTag\");\n        this.subscriptions.push(createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n            this.call.state.callingState$,\n            this.call.state.ownCapabilities$,\n            this.state.selectedDevice$,\n            this.state.status$\n        ]), async ([callingState, ownCapabilities, deviceId, status])=>{\n            try {\n                if (callingState === CallingState.LEFT) {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n                if (callingState !== CallingState.JOINED) return;\n                if (!this.speakingWhileMutedNotificationEnabled) return;\n                if (ownCapabilities.includes(OwnCapability.SEND_AUDIO)) {\n                    if (status === \"disabled\") {\n                        await this.startSpeakingWhileMutedDetection(deviceId);\n                    } else {\n                        await this.stopSpeakingWhileMutedDetection();\n                    }\n                } else {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n            } catch (err) {\n                this.logger(\"warn\", \"Could not enable speaking while muted\", err);\n            }\n        }));\n        this.subscriptions.push(createSubscription(this.call.state.callingState$, (callingState)=>{\n            // do nothing when noise filtering isn't turned on\n            if (!this.noiseCancellationRegistration || !this.noiseCancellation) return;\n            const autoOn = this.call.state.settings?.audio.noise_cancellation?.mode === NoiseCancellationSettingsModeEnum.AUTO_ON;\n            if (autoOn && callingState === CallingState.JOINED) {\n                this.noiseCancellationRegistration.then(()=>this.noiseCancellation?.enable()).catch((err)=>{\n                    this.logger(\"warn\", `Failed to enable noise cancellation`, err);\n                    return this.call.notifyNoiseCancellationStopped();\n                });\n            } else if (callingState === CallingState.LEFT) {\n                this.noiseCancellationRegistration.then(()=>this.noiseCancellation?.disable()).catch((err)=>{\n                    this.logger(\"warn\", `Failed to disable noise cancellation`, err);\n                });\n            }\n        }));\n    }\n    /**\n     * Enables noise cancellation for the microphone.\n     *\n     * Note: not supported in React Native.\n     * @param noiseCancellation - a noise cancellation instance to use.\n     */ async enableNoiseCancellation(noiseCancellation) {\n        if (isReactNative()) {\n            throw new Error(\"Noise cancellation is not supported in React Native\");\n        }\n        const { ownCapabilities, settings } = this.call.state;\n        const hasNoiseCancellationCapability = ownCapabilities.includes(OwnCapability.ENABLE_NOISE_CANCELLATION);\n        if (!hasNoiseCancellationCapability) {\n            throw new Error(\"Noise cancellation is not available.\");\n        }\n        const noiseCancellationSettings = settings?.audio.noise_cancellation;\n        if (!noiseCancellationSettings || noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.DISABLED) {\n            throw new Error(\"Noise cancellation is disabled for this call type.\");\n        }\n        try {\n            this.noiseCancellation = noiseCancellation;\n            // listen for change events and notify the SFU\n            this.noiseCancellationChangeUnsubscribe = this.noiseCancellation.on(\"change\", (enabled)=>{\n                if (enabled) {\n                    this.call.notifyNoiseCancellationStarting().catch((err)=>{\n                        this.logger(\"warn\", `notifyNoiseCancellationStart failed`, err);\n                    });\n                } else {\n                    this.call.notifyNoiseCancellationStopped().catch((err)=>{\n                        this.logger(\"warn\", `notifyNoiseCancellationStop failed`, err);\n                    });\n                }\n            });\n            const registrationResult = this.registerFilter(noiseCancellation.toFilter());\n            this.noiseCancellationRegistration = registrationResult.registered;\n            this.uregisterNoiseCancellation = registrationResult.unregister;\n            await this.noiseCancellationRegistration;\n            // handles an edge case where a noise cancellation is enabled after\n            // the participant as joined the call -> we immediately enable NC\n            if (noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.AUTO_ON && this.call.state.callingState === CallingState.JOINED) {\n                noiseCancellation.enable();\n            }\n        } catch (e) {\n            this.logger(\"warn\", \"Failed to enable noise cancellation\", e);\n            await this.disableNoiseCancellation().catch((err)=>{\n                this.logger(\"warn\", \"Failed to disable noise cancellation\", err);\n            });\n        }\n    }\n    /**\n     * Disables noise cancellation for the microphone.\n     *\n     * Note: not supported in React Native.\n     */ async disableNoiseCancellation() {\n        if (isReactNative()) {\n            throw new Error(\"Noise cancellation is not supported in React Native\");\n        }\n        await (this.uregisterNoiseCancellation?.() ?? Promise.resolve()).then(()=>this.noiseCancellation?.disable()).then(()=>this.noiseCancellationChangeUnsubscribe?.()).catch((err)=>{\n            this.logger(\"warn\", \"Failed to unregister noise cancellation\", err);\n        });\n        await this.call.notifyNoiseCancellationStopped();\n    }\n    /**\n     * Enables speaking while muted notification.\n     */ async enableSpeakingWhileMutedNotification() {\n        this.speakingWhileMutedNotificationEnabled = true;\n        if (this.state.status === \"disabled\") {\n            await this.startSpeakingWhileMutedDetection(this.state.selectedDevice);\n        }\n    }\n    /**\n     * Disables speaking while muted notification.\n     */ async disableSpeakingWhileMutedNotification() {\n        this.speakingWhileMutedNotificationEnabled = false;\n        await this.stopSpeakingWhileMutedDetection();\n    }\n    getDevices() {\n        return getAudioDevices();\n    }\n    getStream(constraints) {\n        return getAudioStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishAudioStream(stream);\n    }\n    stopPublishStream(stopTracks) {\n        return this.call.stopPublish(TrackType.AUDIO, stopTracks);\n    }\n    async startSpeakingWhileMutedDetection(deviceId) {\n        await withoutConcurrency(this.soundDetectorConcurrencyTag, async ()=>{\n            await this.stopSpeakingWhileMutedDetection();\n            if (isReactNative()) {\n                this.rnSpeechDetector = new RNSpeechDetector();\n                await this.rnSpeechDetector.start();\n                const unsubscribe = this.rnSpeechDetector?.onSpeakingDetectedStateChange((event)=>{\n                    this.state.setSpeakingWhileMuted(event.isSoundDetected);\n                });\n                this.soundDetectorCleanup = ()=>{\n                    unsubscribe();\n                    this.rnSpeechDetector?.stop();\n                    this.rnSpeechDetector = undefined;\n                };\n            } else {\n                // Need to start a new stream that's not connected to publisher\n                const stream = await this.getStream({\n                    deviceId\n                });\n                this.soundDetectorCleanup = createSoundDetector(stream, (event)=>{\n                    this.state.setSpeakingWhileMuted(event.isSoundDetected);\n                });\n            }\n        });\n    }\n    async stopSpeakingWhileMutedDetection() {\n        await withoutConcurrency(this.soundDetectorConcurrencyTag, async ()=>{\n            if (!this.soundDetectorCleanup) return;\n            const soundDetectorCleanup = this.soundDetectorCleanup;\n            this.soundDetectorCleanup = undefined;\n            this.state.setSpeakingWhileMuted(false);\n            await soundDetectorCleanup();\n        });\n    }\n}\nclass ScreenShareState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(...arguments);\n        this.audioEnabledSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(true);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current screen share audio status.\n         */ this.audioEnabled$ = this.audioEnabledSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the current screen share settings.\n         */ this.settings$ = this.settingsSubject.asObservable();\n        /**\n         * @internal\n         */ this.getDeviceIdFromStream = (stream)=>{\n            const [track] = stream.getTracks();\n            return track?.getSettings().deviceId;\n        };\n    }\n    /**\n     * The current screen share audio status.\n     */ get audioEnabled() {\n        return this.getCurrentValue(this.audioEnabled$);\n    }\n    /**\n     * Set the current screen share audio status.\n     */ setAudioEnabled(isEnabled) {\n        this.setCurrentValue(this.audioEnabledSubject, isEnabled);\n    }\n    /**\n     * The current screen share settings.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Set the current screen share settings.\n     *\n     * @param settings the screen share settings to set.\n     */ setSettings(settings) {\n        this.setCurrentValue(this.settingsSubject, settings);\n    }\n}\nclass ScreenShareManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new ScreenShareState(), TrackType.SCREEN_SHARE);\n        this.subscriptions.push(createSubscription(call.state.settings$, (settings)=>{\n            const maybeTargetResolution = settings?.screensharing.target_resolution;\n            if (maybeTargetResolution) {\n                this.setDefaultConstraints({\n                    video: {\n                        width: maybeTargetResolution.width,\n                        height: maybeTargetResolution.height\n                    }\n                });\n            }\n        }));\n    }\n    /**\n     * Will enable screen share audio options on supported platforms.\n     *\n     * Note: for ongoing screen share, audio won't be enabled until you\n     * re-publish the screen share stream.\n     */ enableScreenShareAudio() {\n        this.state.setAudioEnabled(true);\n    }\n    /**\n     * Will disable screen share audio options on supported platforms.\n     */ async disableScreenShareAudio() {\n        this.state.setAudioEnabled(false);\n        if (this.call.publisher?.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n            await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, true);\n        }\n    }\n    /**\n     * Returns the current screen share settings.\n     */ getSettings() {\n        return this.state.settings;\n    }\n    /**\n     * Sets the current screen share settings.\n     *\n     * @param settings the settings to set.\n     */ setSettings(settings) {\n        this.state.setSettings(settings);\n    }\n    getDevices() {\n        return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_31__.of)([]); // there are no devices to be listed for Screen Share\n    }\n    getStream(constraints) {\n        if (!this.state.audioEnabled) {\n            constraints.audio = false;\n        }\n        return getScreenShareStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishScreenShareStream(stream, {\n            screenShareSettings: this.state.settings\n        });\n    }\n    async stopPublishStream(stopTracks) {\n        await this.call.stopPublish(TrackType.SCREEN_SHARE, stopTracks);\n        await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, stopTracks);\n    }\n    /**\n     * Overrides the default `select` method to throw an error.\n     *\n     * @param deviceId ignored.\n     */ async select(deviceId) {\n        throw new Error(\"This method is not supported in for Screen Share\");\n    }\n}\nclass SpeakerState {\n    constructor(){\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(\"\");\n        this.volumeSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(1);\n        /**\n         * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n         */ this.isDeviceSelectionSupported = checkIfAudioOutputChangeSupported();\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        this.volume$ = this.volumeSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n    }\n    /**\n     * The currently selected device\n     *\n     * Note: this feature is not supported in React Native\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The currently selected volume\n     *\n     * Note: this feature is not supported in React Native\n     */ get volume() {\n        return this.getCurrentValue(this.volume$);\n    }\n    /**\n     * @internal\n     * @param deviceId\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * @internal\n     * @param volume\n     */ setVolume(volume) {\n        this.setCurrentValue(this.volumeSubject, volume);\n    }\n}\nclass SpeakerManager {\n    constructor(call){\n        this.state = new SpeakerState();\n        this.subscriptions = [];\n        /**\n         * Disposes the manager.\n         *\n         * @internal\n         */ this.dispose = ()=>{\n            this.subscriptions.forEach((s)=>s.unsubscribe());\n        };\n        this.call = call;\n        if (deviceIds$ && !isReactNative()) {\n            this.subscriptions.push((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n                deviceIds$,\n                this.state.selectedDevice$\n            ]).subscribe(([devices, deviceId])=>{\n                if (!deviceId) {\n                    return;\n                }\n                const device = devices.find((d)=>d.deviceId === deviceId && d.kind === \"audiooutput\");\n                if (!device) {\n                    this.select(\"\");\n                }\n            }));\n        }\n    }\n    /**\n     * Lists the available audio output devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     * Note: This method is not supported in React Native\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        return getAudioOutputDevices();\n    }\n    /**\n     * Select a device.\n     *\n     * Note: This method is not supported in React Native\n     *\n     * @param deviceId empty string means the system default\n     */ select(deviceId) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        this.state.setDevice(deviceId);\n    }\n    /**\n     * Set the volume of the audio elements\n     * @param volume a number between 0 and 1.\n     *\n     * Note: This method is not supported in React Native\n     */ setVolume(volume) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error(\"Volume must be between 0 and 1\");\n        }\n        this.state.setVolume(volume);\n    }\n    /**\n     * Set the volume of a participant.\n     *\n     * Note: This method is not supported in React Native.\n     *\n     * @param sessionId the participant's session id.\n     * @param volume a number between 0 and 1. Set it to `undefined` to use the default volume.\n     */ setParticipantVolume(sessionId, volume) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error(\"Volume must be between 0 and 1, or undefined\");\n        }\n        this.call.state.updateParticipant(sessionId, {\n            audioVolume: volume\n        });\n    }\n}\n/**\n * An object representation of a `Call`.\n */ class Call {\n    /**\n     * Constructs a new `Call` instance.\n     *\n     * NOTE: Don't call the constructor directly, instead\n     * Use the [`StreamVideoClient.call`](./StreamVideoClient.md/#call)\n     * method to construct a `Call` instance.\n     */ constructor({ type, id, streamClient, members, ownCapabilities, sortParticipantsBy, clientStore, ringing = false, watching = false }){\n        /**\n         * The state of this call.\n         */ this.state = new CallState();\n        /**\n         * The DynascaleManager instance.\n         */ this.dynascaleManager = new DynascaleManager(this);\n        /**\n         * The permissions context of this call.\n         */ this.permissionsContext = new PermissionsContext();\n        /**\n         * The event dispatcher instance dedicated to this Call instance.\n         * @private\n         */ this.dispatcher = new Dispatcher();\n        this.trackSubscriptionsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject({\n            type: DebounceType.MEDIUM,\n            data: []\n        });\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 10;\n        this.isLeaving = false;\n        this.initialized = false;\n        this.joinLeaveConcurrencyTag = Symbol(\"joinLeaveConcurrencyTag\");\n        /**\n         * A list hooks/functions to invoke when the call is left.\n         * A typical use case is to clean up some global event handlers.\n         * @private\n         */ this.leaveCallHooks = new Set();\n        this.streamClientEventHandlers = new Map();\n        /**\n         * You can subscribe to WebSocket events provided by the API. To remove a subscription, call the `off` method.\n         * Please note that subscribing to WebSocket events is an advanced use-case.\n         * For most use-cases, it should be enough to watch for state changes.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.on = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.on(eventName, fn);\n            }\n            const offHandler = this.streamClient.on(eventName, (e)=>{\n                const event = e;\n                if (event.call_cid && event.call_cid === this.cid) {\n                    fn(event);\n                }\n            });\n            // keep the 'off' reference returned by the stream client\n            this.streamClientEventHandlers.set(fn, offHandler);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.off = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.off(eventName, fn);\n            }\n            // unsubscribe from the stream client event by using the 'off' reference\n            const registeredOffHandler = this.streamClientEventHandlers.get(fn);\n            if (registeredOffHandler) {\n                registeredOffHandler();\n            }\n        };\n        /**\n         * Leave the call and stop the media streams that were published by the call.\n         */ this.leave = async ({ reject = false, reason = \"user is leaving the call\" } = {})=>{\n            await withoutConcurrency(this.joinLeaveConcurrencyTag, async ()=>{\n                const callingState = this.state.callingState;\n                if (callingState === CallingState.LEFT) {\n                    throw new Error(\"Cannot leave call that has already been left.\");\n                }\n                if (callingState === CallingState.JOINING) {\n                    await this.assertCallJoined();\n                }\n                this.isLeaving = true;\n                if (this.ringing) {\n                    // I'm the one who started the call, so I should cancel it.\n                    const hasOtherParticipants = this.state.remoteParticipants.length > 0;\n                    if (this.isCreatedByMe && !hasOtherParticipants && callingState === CallingState.RINGING) {\n                        // Signals other users that I have cancelled my call to them\n                        // before they accepted it.\n                        await this.reject();\n                    } else if (reject && callingState === CallingState.RINGING) {\n                        // Signals other users that I have rejected the incoming call.\n                        await this.reject();\n                    }\n                }\n                this.statsReporter?.stop();\n                this.statsReporter = undefined;\n                this.sfuStatsReporter?.stop();\n                this.sfuStatsReporter = undefined;\n                this.subscriber?.close();\n                this.subscriber = undefined;\n                this.publisher?.close();\n                this.publisher = undefined;\n                this.sfuClient?.close(StreamSfuClient.NORMAL_CLOSURE, reason);\n                this.sfuClient = undefined;\n                this.state.setCallingState(CallingState.LEFT);\n                // Call all leave call hooks, e.g. to clean up global event handlers\n                this.leaveCallHooks.forEach((hook)=>hook());\n                this.initialized = false;\n                this.clientStore.unregisterCall(this);\n                this.camera.dispose();\n                this.microphone.dispose();\n                this.screenShare.dispose();\n                this.speaker.dispose();\n                const stopOnLeavePromises = [];\n                if (this.camera.stopOnLeave) {\n                    stopOnLeavePromises.push(this.camera.disable(true));\n                }\n                if (this.microphone.stopOnLeave) {\n                    stopOnLeavePromises.push(this.microphone.disable(true));\n                }\n                if (this.screenShare.stopOnLeave) {\n                    stopOnLeavePromises.push(this.screenShare.disable(true));\n                }\n                await Promise.all(stopOnLeavePromises);\n            });\n        };\n        /**\n         * Loads the information about the call.\n         *\n         * @param params.ring if set to true, a `call.ring` event will be sent to the call members.\n         * @param params.notify if set to true, a `call.notification` event will be sent to the call members.\n         * @param params.members_limit the total number of members to return as part of the response.\n         */ this.get = async (params)=>{\n            await this.setup();\n            const response = await this.streamClient.get(this.streamClientBasePath, params);\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (params?.ring || this.ringing) {\n                // the call response can indicate where the call is still ringing or not\n                this.ringingSubject.next(true);\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            await this.applyDeviceConfig();\n            return response;\n        };\n        /**\n         * Loads the information about the call and creates it if it doesn't exist.\n         *\n         * @param data the data to create the call with.\n         */ this.getOrCreate = async (data)=>{\n            await this.setup();\n            const response = await this.streamClient.post(this.streamClientBasePath, data);\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (data?.ring || this.ringing) {\n                // the call response can indicate where the call is still ringing or not\n                this.ringingSubject.next(true);\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            await this.applyDeviceConfig();\n            return response;\n        };\n        /**\n         * Creates a call\n         *\n         * @param data the data to create the call with.\n         */ this.create = async (data)=>{\n            return this.getOrCreate(data);\n        };\n        /**\n         * A shortcut for {@link Call.get} with `ring` parameter set to `true`.\n         * Will send a `call.ring` event to the call members.\n         */ this.ring = async ()=>{\n            return await this.get({\n                ring: true\n            });\n        };\n        /**\n         * A shortcut for {@link Call.get} with `notify` parameter set to `true`.\n         * Will send a `call.notification` event to the call members.\n         */ this.notify = async ()=>{\n            return await this.get({\n                notify: true\n            });\n        };\n        /**\n         * Marks the incoming call as accepted.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.join} invokes this method automatically for you when joining a call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         */ this.accept = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/accept`);\n        };\n        /**\n         * Marks the incoming call as rejected.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.leave} invokes this method automatically for you when you leave or reject this call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         *\n         * @param reason the reason for rejecting the call.\n         */ this.reject = async (reason)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reject`, {\n                reason: reason\n            });\n        };\n        /**\n         * Will start to watch for call related WebSocket events and initiate a call session with the server.\n         *\n         * @returns a promise which resolves once the call join-flow has finished.\n         */ this.join = async (data)=>{\n            await this.setup();\n            const callingState = this.state.callingState;\n            if ([\n                CallingState.JOINED,\n                CallingState.JOINING\n            ].includes(callingState)) {\n                this.logger(\"warn\", \"Join method called twice, you should only call this once\");\n                throw new Error(`Illegal State: Already joined.`);\n            }\n            const isMigrating = callingState === CallingState.MIGRATING;\n            const isReconnecting = callingState === CallingState.RECONNECTING;\n            this.state.setCallingState(CallingState.JOINING);\n            this.logger(\"debug\", \"Starting join flow\");\n            if (data?.ring && !this.ringing) {\n                this.ringingSubject.next(true);\n            }\n            if (this.ringing && !this.isCreatedByMe) {\n                // signals other users that I have accepted the incoming call.\n                await this.accept();\n            }\n            let sfuServer;\n            let sfuToken;\n            let connectionConfig;\n            let statsOptions;\n            try {\n                if (this.sfuClient?.isFastReconnecting) {\n                    // use previous SFU configuration and values\n                    connectionConfig = this.publisher?.connectionConfiguration;\n                    sfuServer = this.sfuClient.sfuServer;\n                    sfuToken = this.sfuClient.token;\n                    statsOptions = this.sfuStatsReporter?.options;\n                } else {\n                    // full join flow - let the Coordinator pick a new SFU for us\n                    const call = await join(this.streamClient, this.type, this.id, data);\n                    this.state.updateFromCallResponse(call.metadata);\n                    this.state.setMembers(call.members);\n                    this.state.setOwnCapabilities(call.ownCapabilities);\n                    connectionConfig = call.connectionConfig;\n                    sfuServer = call.sfuServer;\n                    sfuToken = call.token;\n                    statsOptions = call.statsOptions;\n                }\n                if (this.streamClient._hasConnectionID()) {\n                    this.watching = true;\n                    this.clientStore.registerCall(this);\n                }\n            } catch (error) {\n                // restore the previous call state if the join-flow fails\n                this.state.setCallingState(callingState);\n                throw error;\n            }\n            const previousSfuClient = this.sfuClient;\n            const sfuClient = this.sfuClient = new StreamSfuClient({\n                dispatcher: this.dispatcher,\n                sfuServer,\n                token: sfuToken,\n                sessionId: previousSfuClient?.sessionId\n            });\n            /**\n             * A closure which hides away the re-connection logic.\n             */ const reconnect = async (strategy, reason)=>{\n                const currentState = this.state.callingState;\n                if (currentState === CallingState.MIGRATING || currentState === CallingState.RECONNECTING) {\n                    // prevent parallel reconnection attempts\n                    return;\n                }\n                this.reconnectAttempts++;\n                this.state.setCallingState(strategy === \"migrate\" ? CallingState.MIGRATING : CallingState.RECONNECTING);\n                if (strategy === \"migrate\") {\n                    this.logger(\"debug\", `[Migration]: migrating call ${this.cid} away from ${sfuServer.edge_name}`);\n                    sfuClient.isMigratingAway = true;\n                } else {\n                    this.logger(\"debug\", `[Rejoin]: ${strategy} rejoin call ${this.cid} (${this.reconnectAttempts})...`);\n                }\n                // take a snapshot of the current \"local participant\" state\n                // we'll need it for restoring the previous publishing state later\n                const localParticipant = this.state.localParticipant;\n                if (strategy === \"fast\") {\n                    sfuClient.close(StreamSfuClient.ERROR_CONNECTION_BROKEN, `attempting fast reconnect: ${reason}`);\n                } else if (strategy === \"full\") {\n                    // in migration or recovery scenarios, we don't want to\n                    // wait before attempting to reconnect to an SFU server\n                    await sleep(retryInterval(this.reconnectAttempts));\n                    // in full-reconnect, we need to dispose all Peer Connections\n                    this.subscriber?.close();\n                    this.subscriber = undefined;\n                    this.publisher?.close({\n                        stopTracks: false\n                    });\n                    this.publisher = undefined;\n                    this.statsReporter?.stop();\n                    this.statsReporter = undefined;\n                    this.sfuStatsReporter?.stop();\n                    this.sfuStatsReporter = undefined;\n                    // clean up current connection\n                    sfuClient.close(StreamSfuClient.NORMAL_CLOSURE, `attempting full reconnect: ${reason}`);\n                }\n                await this.join({\n                    ...data,\n                    ...strategy === \"migrate\" && {\n                        migrating_from: sfuServer.edge_name\n                    }\n                });\n                // clean up previous connection\n                if (strategy === \"migrate\") {\n                    sfuClient.close(StreamSfuClient.NORMAL_CLOSURE, \"attempting migration\");\n                }\n                this.logger(\"info\", `[Rejoin]: Attempt ${this.reconnectAttempts} successful!`);\n                // we shouldn't be republishing the streams if we're migrating\n                // as the underlying peer connection will take care of it as part\n                // of the ice-restart process\n                if (localParticipant && strategy === \"full\") {\n                    const { audioStream, videoStream, screenShareStream, screenShareAudioStream } = localParticipant;\n                    let screenShare;\n                    if (screenShareStream || screenShareAudioStream) {\n                        screenShare = new MediaStream();\n                        screenShareStream?.getVideoTracks().forEach((track)=>{\n                            screenShare?.addTrack(track);\n                        });\n                        screenShareAudioStream?.getAudioTracks().forEach((track)=>{\n                            screenShare?.addTrack(track);\n                        });\n                    }\n                    // restore previous publishing state\n                    if (audioStream) await this.publishAudioStream(audioStream);\n                    if (videoStream) {\n                        await this.publishVideoStream(videoStream, {\n                            preferredCodec: this.camera.preferredCodec\n                        });\n                    }\n                    if (screenShare) await this.publishScreenShareStream(screenShare);\n                    this.logger(\"info\", `[Rejoin]: State restored. Attempt: ${this.reconnectAttempts}`);\n                }\n            };\n            // reconnect if the connection was closed unexpectedly. example:\n            // - SFU crash or restart\n            // - network change\n            sfuClient.signalReady.then(()=>{\n                // register a handler for the \"goAway\" event\n                const unregisterGoAway = this.dispatcher.on(\"goAway\", (event)=>{\n                    const { reason } = event;\n                    this.logger(\"info\", `[Migration]: Going away from SFU... Reason: ${GoAwayReason[reason]}`);\n                    reconnect(\"migrate\", GoAwayReason[reason]).catch((err)=>{\n                        this.logger(\"warn\", `[Migration]: Failed to migrate to another SFU.`, err);\n                    });\n                });\n                sfuClient.signalWs.addEventListener(\"close\", (e)=>{\n                    // unregister the \"goAway\" handler, as we won't need it anymore for this connection.\n                    // the upcoming re-join will register a new handler anyway\n                    unregisterGoAway();\n                    // when the user has initiated \"call.leave()\" operation, we shouldn't\n                    // care for the WS close code and we shouldn't ever attempt to reconnect\n                    if (this.isLeaving) return;\n                    // do nothing if the connection was closed on purpose\n                    if (e.code === StreamSfuClient.NORMAL_CLOSURE) return;\n                    // do nothing if the connection was closed because of a policy violation\n                    // e.g., the user has been blocked by an admin or moderator\n                    if (e.code === KnownCodes.WS_POLICY_VIOLATION) return;\n                    // When the SFU is being shut down, it sends a goAway message.\n                    // While we migrate to another SFU, we might have the WS connection\n                    // to the old SFU closed abruptly. In this case, we don't want\n                    // to reconnect to the old SFU, but rather to the new one.\n                    const isMigratingAway = e.code === KnownCodes.WS_CLOSED_ABRUPTLY && sfuClient.isMigratingAway;\n                    const isFastReconnecting = e.code === KnownCodes.WS_CLOSED_ABRUPTLY && sfuClient.isFastReconnecting;\n                    if (isMigratingAway || isFastReconnecting) return;\n                    // do nothing if the connection was closed because of a fast reconnect\n                    if (e.code === StreamSfuClient.ERROR_CONNECTION_BROKEN) return;\n                    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                        sfuClient.isFastReconnecting = this.reconnectAttempts === 0;\n                        const strategy = sfuClient.isFastReconnecting ? \"fast\" : \"full\";\n                        reconnect(strategy, `SFU closed the WS with code: ${e.code}`).catch((err)=>{\n                            this.logger(\"error\", `[Rejoin]: ${strategy} rejoin failed for ${this.reconnectAttempts} times. Giving up.`, err);\n                            this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                        });\n                    } else {\n                        this.logger(\"error\", \"[Rejoin]: Reconnect attempts exceeded. Giving up...\");\n                        this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                    }\n                });\n            });\n            // handlers for connection online/offline events\n            const unsubscribeOnlineEvent = this.streamClient.on(\"connection.changed\", async (e)=>{\n                if (e.type !== \"connection.changed\") return;\n                if (!e.online) return;\n                unsubscribeOnlineEvent();\n                const currentCallingState = this.state.callingState;\n                const shouldReconnect = currentCallingState === CallingState.OFFLINE || currentCallingState === CallingState.RECONNECTING_FAILED;\n                if (!shouldReconnect) return;\n                this.logger(\"info\", \"[Rejoin]: Going online...\");\n                let isFirstReconnectAttempt = true;\n                do {\n                    try {\n                        sfuClient.isFastReconnecting = isFirstReconnectAttempt;\n                        await reconnect(isFirstReconnectAttempt ? \"fast\" : \"full\", \"Network: online\");\n                        return; // break the loop if rejoin is successful\n                    } catch (err) {\n                        this.logger(\"error\", `[Rejoin][Network]: Rejoin failed for attempt ${this.reconnectAttempts}`, err);\n                    }\n                    // wait for a bit before trying to reconnect again\n                    await sleep(retryInterval(this.reconnectAttempts));\n                    isFirstReconnectAttempt = false;\n                }while (this.reconnectAttempts < this.maxReconnectAttempts);\n                // if we're here, it means that we've exhausted all the reconnect attempts\n                this.logger(\"error\", `[Rejoin][Network]: Rejoin failed. Giving up.`);\n                this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n            });\n            const unsubscribeOfflineEvent = this.streamClient.on(\"connection.changed\", (e)=>{\n                if (e.type !== \"connection.changed\") return;\n                if (e.online) return;\n                unsubscribeOfflineEvent();\n                this.state.setCallingState(CallingState.OFFLINE);\n            });\n            this.leaveCallHooks.add(()=>{\n                unsubscribeOnlineEvent();\n                unsubscribeOfflineEvent();\n            });\n            if (!this.subscriber) {\n                this.subscriber = new Subscriber({\n                    sfuClient,\n                    dispatcher: this.dispatcher,\n                    state: this.state,\n                    connectionConfig,\n                    onUnrecoverableError: ()=>{\n                        reconnect(\"full\", \"unrecoverable subscriber error\").catch((err)=>{\n                            this.logger(\"debug\", \"[Rejoin]: Rejoin failed\", err);\n                        });\n                    }\n                });\n            }\n            // anonymous users can't publish anything hence, there is no need\n            // to create Publisher Peer Connection for them\n            const isAnonymous = this.streamClient.user?.type === \"anonymous\";\n            if (!this.publisher && !isAnonymous) {\n                const audioSettings = this.state.settings?.audio;\n                const isDtxEnabled = !!audioSettings?.opus_dtx_enabled;\n                const isRedEnabled = !!audioSettings?.redundant_coding_enabled;\n                this.publisher = new Publisher({\n                    sfuClient,\n                    dispatcher: this.dispatcher,\n                    state: this.state,\n                    connectionConfig,\n                    isDtxEnabled,\n                    isRedEnabled,\n                    onUnrecoverableError: ()=>{\n                        reconnect(\"full\", \"unrecoverable publisher error\").catch((err)=>{\n                            this.logger(\"debug\", \"[Rejoin]: Rejoin failed\", err);\n                        });\n                    }\n                });\n            }\n            if (!this.statsReporter) {\n                this.statsReporter = createStatsReporter({\n                    subscriber: this.subscriber,\n                    publisher: this.publisher,\n                    state: this.state,\n                    datacenter: this.sfuClient.edgeName\n                });\n            }\n            const clientDetails = getClientDetails();\n            if (!this.sfuStatsReporter && statsOptions) {\n                this.sfuStatsReporter = new SfuStatsReporter(sfuClient, {\n                    clientDetails,\n                    options: statsOptions,\n                    subscriber: this.subscriber,\n                    publisher: this.publisher\n                });\n                this.sfuStatsReporter.start();\n            }\n            try {\n                // 1. wait for the signal server to be ready before sending \"joinRequest\"\n                sfuClient.signalReady.catch((err)=>this.logger(\"error\", \"Signal ready failed\", err))// prepare a generic SDP and send it to the SFU.\n                // this is a throw-away SDP that the SFU will use to determine\n                // the capabilities of the client (codec support, etc.)\n                .then(()=>getGenericSdp(\"recvonly\")).then((sdp)=>{\n                    const subscriptions = getCurrentValue(this.trackSubscriptionsSubject);\n                    const migration = isMigrating ? {\n                        fromSfuId: data?.migrating_from || \"\",\n                        subscriptions: subscriptions.data || [],\n                        announcedTracks: this.publisher?.getCurrentTrackInfos() || []\n                    } : undefined;\n                    return sfuClient.join({\n                        subscriberSdp: sdp || \"\",\n                        clientDetails,\n                        migration,\n                        fastReconnect: previousSfuClient?.isFastReconnecting ?? false\n                    });\n                });\n                // 2. in parallel, wait for the SFU to send us the \"joinResponse\"\n                // this will throw an error if the SFU rejects the join request or\n                // fails to respond in time\n                const { callState, reconnected } = await this.waitForJoinResponse();\n                if (isReconnecting) {\n                    this.logger(\"debug\", \"[Rejoin] fast reconnected:\", reconnected);\n                }\n                if (isMigrating) {\n                    await this.subscriber.migrateTo(sfuClient, connectionConfig);\n                    await this.publisher?.migrateTo(sfuClient, connectionConfig);\n                } else if (isReconnecting) {\n                    if (reconnected) {\n                        // update the SFU client instance on the subscriber and publisher\n                        this.subscriber.setSfuClient(sfuClient);\n                        // publisher might not be there (anonymous users)\n                        if (this.publisher) {\n                            this.publisher.setSfuClient(sfuClient);\n                            // and perform a full ICE restart on the publisher\n                            await this.publisher.restartIce();\n                        }\n                    } else if (previousSfuClient?.isFastReconnecting) {\n                        // reconnection wasn't possible, so we need to do a full rejoin\n                        return await reconnect(\"full\", \"re-attempting\").catch((err)=>{\n                            this.logger(\"error\", `[Rejoin]: Rejoin failed forced full rejoin.`, err);\n                        });\n                    }\n                }\n                const currentParticipants = callState?.participants || [];\n                const participantCount = callState?.participantCount;\n                const startedAt = callState?.startedAt ? Timestamp.toDate(callState.startedAt) : new Date();\n                const pins = callState?.pins ?? [];\n                this.state.setParticipants(()=>{\n                    const participantLookup = this.state.getParticipantLookupBySessionId();\n                    return currentParticipants.map((p)=>{\n                        // We need to preserve the local state of the participant\n                        // (e.g. videoDimension, visibilityState, pinnedAt, etc.)\n                        // as it doesn't exist on the server.\n                        const existingParticipant = participantLookup[p.sessionId];\n                        return Object.assign(p, existingParticipant, {\n                            isLocalParticipant: p.sessionId === sfuClient.sessionId,\n                            viewportVisibilityState: existingParticipant?.viewportVisibilityState ?? {\n                                videoTrack: VisibilityState.UNKNOWN,\n                                screenShareTrack: VisibilityState.UNKNOWN\n                            }\n                        });\n                    });\n                });\n                this.state.setParticipantCount(participantCount?.total || 0);\n                this.state.setAnonymousParticipantCount(participantCount?.anonymous || 0);\n                this.state.setStartedAt(startedAt);\n                this.state.setServerSidePins(pins);\n                this.reconnectAttempts = 0; // reset the reconnect attempts counter\n                this.state.setCallingState(CallingState.JOINED);\n                try {\n                    await this.initCamera({\n                        setStatus: true\n                    });\n                    await this.initMic({\n                        setStatus: true\n                    });\n                } catch (error) {\n                    this.logger(\"warn\", \"Camera and/or mic init failed during join call\", error);\n                }\n                // 3. once we have the \"joinResponse\", and possibly reconciled the local state\n                // we schedule a fast subscription update for all remote participants\n                // that were visible before we reconnected or migrated to a new SFU.\n                const { remoteParticipants } = this.state;\n                if (remoteParticipants.length > 0) {\n                    this.updateSubscriptions(remoteParticipants, DebounceType.FAST);\n                }\n                this.logger(\"info\", `Joined call ${this.cid}`);\n            } catch (err) {\n                // join failed, try to rejoin\n                if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                    this.logger(\"error\", `[Rejoin]: Rejoin ${this.reconnectAttempts} failed.`, err);\n                    await reconnect(\"full\", \"previous attempt failed\");\n                    this.logger(\"info\", `[Rejoin]: Rejoin ${this.reconnectAttempts} successful!`);\n                } else {\n                    this.logger(\"error\", `[Rejoin]: Rejoin failed for ${this.reconnectAttempts} times. Giving up.`);\n                    this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                    throw new Error(\"Join failed\");\n                }\n            }\n        };\n        this.waitForJoinResponse = (timeout = 5000)=>{\n            return new Promise((resolve, reject)=>{\n                const unsubscribe = this.on(\"joinResponse\", (event)=>{\n                    clearTimeout(timeoutId);\n                    unsubscribe();\n                    resolve(event);\n                });\n                const timeoutId = setTimeout(()=>{\n                    unsubscribe();\n                    reject(new Error('Waiting for \"joinResponse\" has timed out'));\n                }, timeout);\n            });\n        };\n        /**\n         * Starts publishing the given video stream to the call.\n         * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n         *\n         * Consecutive calls to this method will replace the previously published stream.\n         * The previous video stream will be stopped.\n         *\n         * @param videoStream the video stream to publish.\n         * @param opts the options to use when publishing the stream.\n         */ this.publishVideoStream = async (videoStream, opts = {})=>{\n            // we should wait until we get a JoinResponse from the SFU,\n            // otherwise we risk breaking the ICETrickle flow.\n            await this.assertCallJoined();\n            if (!this.publisher) {\n                this.logger(\"error\", \"Trying to publish video before join is completed\");\n                throw new Error(`Call not joined yet.`);\n            }\n            const [videoTrack] = videoStream.getVideoTracks();\n            if (!videoTrack) {\n                this.logger(\"error\", `There is no video track to publish in the stream.`);\n                return;\n            }\n            await this.publisher.publishStream(videoStream, videoTrack, TrackType.VIDEO, opts);\n        };\n        /**\n         * Starts publishing the given audio stream to the call.\n         * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n         *\n         * Consecutive calls to this method will replace the audio stream that is currently being published.\n         * The previous audio stream will be stopped.\n         *\n         * @param audioStream the audio stream to publish.\n         */ this.publishAudioStream = async (audioStream)=>{\n            // we should wait until we get a JoinResponse from the SFU,\n            // otherwise we risk breaking the ICETrickle flow.\n            await this.assertCallJoined();\n            if (!this.publisher) {\n                this.logger(\"error\", \"Trying to publish audio before join is completed\");\n                throw new Error(`Call not joined yet.`);\n            }\n            const [audioTrack] = audioStream.getAudioTracks();\n            if (!audioTrack) {\n                this.logger(\"error\", `There is no audio track in the stream to publish`);\n                return;\n            }\n            await this.publisher.publishStream(audioStream, audioTrack, TrackType.AUDIO);\n        };\n        /**\n         * Starts publishing the given screen-share stream to the call.\n         *\n         * Consecutive calls to this method will replace the previous screen-share stream.\n         * The previous screen-share stream will be stopped.\n         *\n         * @param screenShareStream the screen-share stream to publish.\n         * @param opts the options to use when publishing the stream.\n         */ this.publishScreenShareStream = async (screenShareStream, opts = {})=>{\n            // we should wait until we get a JoinResponse from the SFU,\n            // otherwise we risk breaking the ICETrickle flow.\n            await this.assertCallJoined();\n            if (!this.publisher) {\n                this.logger(\"error\", \"Trying to publish screen share before join is completed\");\n                throw new Error(`Call not joined yet.`);\n            }\n            const [screenShareTrack] = screenShareStream.getVideoTracks();\n            if (!screenShareTrack) {\n                this.logger(\"error\", `There is no video track in the screen share stream to publish`);\n                return;\n            }\n            await this.publisher.publishStream(screenShareStream, screenShareTrack, TrackType.SCREEN_SHARE, opts);\n            const [screenShareAudioTrack] = screenShareStream.getAudioTracks();\n            if (screenShareAudioTrack) {\n                await this.publisher.publishStream(screenShareStream, screenShareAudioTrack, TrackType.SCREEN_SHARE_AUDIO, opts);\n            }\n        };\n        /**\n         * Stops publishing the given track type to the call, if it is currently being published.\n         * Underlying track will be stopped and removed from the publisher.\n         *\n         * @param trackType the track type to stop publishing.\n         * @param stopTrack if `true` the track will be stopped, else it will be just disabled\n         */ this.stopPublish = async (trackType, stopTrack = true)=>{\n            this.logger(\"info\", `stopPublish ${TrackType[trackType]}, stop tracks: ${stopTrack}`);\n            await this.publisher?.unpublishStream(trackType, stopTrack);\n        };\n        /**\n         * Notifies the SFU that a noise cancellation process has started.\n         *\n         * @internal\n         */ this.notifyNoiseCancellationStarting = async ()=>{\n            return this.sfuClient?.startNoiseCancellation().catch((err)=>{\n                this.logger(\"warn\", \"Failed to notify start of noise cancellation\", err);\n            });\n        };\n        /**\n         * Notifies the SFU that a noise cancellation process has stopped.\n         *\n         * @internal\n         */ this.notifyNoiseCancellationStopped = async ()=>{\n            return this.sfuClient?.stopNoiseCancellation().catch((err)=>{\n                this.logger(\"warn\", \"Failed to notify stop of noise cancellation\", err);\n            });\n        };\n        /**\n         * Update track subscription configuration for one or more participants.\n         * You have to create a subscription for each participant for all the different kinds of tracks you want to receive.\n         * You can only subscribe for tracks after the participant started publishing the given kind of track.\n         *\n         * @param trackType the kind of subscription to update.\n         * @param changes the list of subscription changes to do.\n         * @param type the debounce type to use for the update.\n         */ this.updateSubscriptionsPartial = (trackType, changes, type = DebounceType.SLOW)=>{\n            if (trackType === \"video\") {\n                this.logger(\"warn\", `updateSubscriptionsPartial: ${trackType} is deprecated. Please switch to 'videoTrack'`);\n                trackType = \"videoTrack\";\n            } else if (trackType === \"screen\") {\n                this.logger(\"warn\", `updateSubscriptionsPartial: ${trackType} is deprecated. Please switch to 'screenShareTrack'`);\n                trackType = \"screenShareTrack\";\n            }\n            const participants = this.state.updateParticipants(Object.entries(changes).reduce((acc, [sessionId, change])=>{\n                if (change.dimension?.height) {\n                    change.dimension.height = Math.ceil(change.dimension.height);\n                }\n                if (change.dimension?.width) {\n                    change.dimension.width = Math.ceil(change.dimension.width);\n                }\n                const prop = trackType === \"videoTrack\" ? \"videoDimension\" : trackType === \"screenShareTrack\" ? \"screenShareDimension\" : undefined;\n                if (prop) {\n                    acc[sessionId] = {\n                        [prop]: change.dimension\n                    };\n                }\n                return acc;\n            }, {}));\n            if (participants) {\n                this.updateSubscriptions(participants, type);\n            }\n        };\n        this.updateSubscriptions = (participants, type = DebounceType.SLOW)=>{\n            const subscriptions = [];\n            for (const p of participants){\n                // we don't want to subscribe to our own tracks\n                if (p.isLocalParticipant) continue;\n                // NOTE: audio tracks don't have to be requested explicitly\n                // as the SFU will implicitly subscribe us to all of them,\n                // once they become available.\n                if (p.videoDimension && hasVideo(p)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.VIDEO,\n                        dimension: p.videoDimension\n                    });\n                }\n                if (p.screenShareDimension && hasScreenShare(p)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.SCREEN_SHARE,\n                        dimension: p.screenShareDimension\n                    });\n                }\n                if (hasScreenShareAudio(p)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.SCREEN_SHARE_AUDIO\n                    });\n                }\n            }\n            // schedule update\n            this.trackSubscriptionsSubject.next({\n                type,\n                data: subscriptions\n            });\n        };\n        /**\n         * Will enhance the reported stats with additional participant-specific information (`callStatsReport$` state [store variable](./StreamVideoClient.md/#readonlystatestore)).\n         * This is usually helpful when detailed stats for a specific participant are needed.\n         *\n         * @param sessionId the sessionId to start reporting for.\n         */ this.startReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.startReportingStatsFor(sessionId);\n        };\n        /**\n         * Opposite of `startReportingStatsFor`.\n         * Will turn off stats reporting for a specific participant.\n         *\n         * @param sessionId the sessionId to stop reporting for.\n         */ this.stopReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.stopReportingStatsFor(sessionId);\n        };\n        /**\n         * Resets the last sent reaction for the user holding the given `sessionId`. This is a local action, it won't reset the reaction on the backend.\n         *\n         * @param sessionId the session id.\n         */ this.resetReaction = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                reaction: undefined\n            });\n        };\n        /**\n         * Sets the list of criteria to sort the participants by.\n         *\n         * @param criteria the list of criteria to sort the participants by.\n         */ this.setSortParticipantsBy = (criteria)=>{\n            return this.state.setSortParticipantsBy(criteria);\n        };\n        /**\n         * Updates the list of video layers to publish.\n         *\n         * @internal\n         * @param enabledLayers the list of layers to enable.\n         */ this.updatePublishQuality = async (enabledLayers)=>{\n            return this.publisher?.updateVideoPublishQuality(enabledLayers);\n        };\n        this.assertCallJoined = ()=>{\n            return new Promise((resolve)=>{\n                this.state.callingState$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.takeWhile)((state)=>state !== CallingState.JOINED, true), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_32__.filter)((s)=>s === CallingState.JOINED)).subscribe(()=>resolve());\n            });\n        };\n        /**\n         * Sends a reaction to the other call participants.\n         *\n         * @param reaction the reaction to send.\n         */ this.sendReaction = async (reaction)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reaction`, reaction);\n        };\n        /**\n         * Blocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to block.\n         */ this.blockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/block`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Unblocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to unblock.\n         */ this.unblockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unblock`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Mutes the current user.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteSelf = (type)=>{\n            const myUserId = this.currentUserId;\n            if (myUserId) {\n                return this.muteUser(myUserId, type);\n            }\n        };\n        /**\n         * Mutes all the other participants.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteOthers = (type)=>{\n            const trackType = muteTypeToTrackType(type);\n            if (!trackType) return;\n            const userIdsToMute = [];\n            for (const participant of this.state.remoteParticipants){\n                if (participant.publishedTracks.includes(trackType)) {\n                    userIdsToMute.push(participant.userId);\n                }\n            }\n            if (userIdsToMute.length > 0) {\n                return this.muteUser(userIdsToMute, type);\n            }\n        };\n        /**\n         * Mutes the user with the given `userId`.\n         *\n         * @param userId the id of the user to mute.\n         * @param type the type of the mute operation.\n         */ this.muteUser = (userId, type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                user_ids: Array.isArray(userId) ? userId : [\n                    userId\n                ],\n                [type]: true\n            });\n        };\n        /**\n         * Will mute all users in the call.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteAllUsers = (type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                mute_all_users: true,\n                [type]: true\n            });\n        };\n        /**\n         * Starts recording the call\n         */ this.startRecording = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_recording`, request ? request : {});\n        };\n        /**\n         * Stops recording the call\n         */ this.stopRecording = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_recording`, {});\n        };\n        /**\n         * Starts the transcription of the call.\n         *\n         * @param request the request data.\n         */ this.startTranscription = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_transcription`, request);\n        };\n        /**\n         * Stops the transcription of the call.\n         */ this.stopTranscription = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_transcription`);\n        };\n        /**\n         * Sends a `call.permission_request` event to all users connected to the call. The call settings object contains infomration about which permissions can be requested during a call (for example a user might be allowed to request permission to publish audio, but not video).\n         */ this.requestPermissions = async (data)=>{\n            const { permissions } = data;\n            const canRequestPermissions = permissions.every((permission)=>this.permissionsContext.canRequest(permission));\n            if (!canRequestPermissions) {\n                throw new Error(`You are not allowed to request permissions: ${permissions.join(\", \")}`);\n            }\n            return this.streamClient.post(`${this.streamClientBasePath}/request_permission`, data);\n        };\n        /**\n         * Allows you to grant certain permissions to a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be granted are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to grant permissions to.\n         * @param permissions the permissions to grant.\n         */ this.grantPermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                grant_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to revoke certain permissions from a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be revoked are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to revoke permissions from.\n         * @param permissions the permissions to revoke.\n         */ this.revokePermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                revoke_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to grant or revoke a specific permission to a user in a call. The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * When revoking a permission, this endpoint will also mute the relevant track from the user. This is similar to muting a user with the difference that the user will not be able to unmute afterwards.\n         *\n         * Supported permissions that can be granted or revoked: `send-audio`, `send-video` and `screenshare`.\n         *\n         * `call.permissions_updated` event is sent to all members of the call.\n         *\n         */ this.updateUserPermissions = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/user_permissions`, data);\n        };\n        /**\n         * Starts the livestreaming of the call.\n         *\n         * @param data the request data.\n         * @param params the request params.\n         */ this.goLive = async (data = {}, params)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/go_live`, data, params);\n        };\n        /**\n         * Stops the livestreaming of the call.\n         */ this.stopLive = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_live`, {});\n        };\n        /**\n         * Starts the broadcasting of the call.\n         */ this.startHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_broadcasting`, {});\n        };\n        /**\n         * Stops the broadcasting of the call.\n         */ this.stopHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_broadcasting`, {});\n        };\n        /**\n         * Updates the call settings or custom data.\n         *\n         * @param updates the updates to apply to the call.\n         */ this.update = async (updates)=>{\n            const response = await this.streamClient.patch(`${this.streamClientBasePath}`, updates);\n            const { call, members, own_capabilities } = response;\n            this.state.updateFromCallResponse(call);\n            this.state.setMembers(members);\n            this.state.setOwnCapabilities(own_capabilities);\n            return response;\n        };\n        /**\n         * Ends the call. Once the call is ended, it cannot be re-joined.\n         */ this.endCall = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mark_ended`);\n        };\n        /**\n         * Pins the given session to the top of the participants list.\n         *\n         * @param sessionId the sessionId to pin.\n         */ this.pin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: {\n                    isLocalPin: true,\n                    pinnedAt: Date.now()\n                }\n            });\n        };\n        /**\n         * Unpins the given session from the top of the participants list.\n         *\n         * @param sessionId the sessionId to unpin.\n         */ this.unpin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: undefined\n            });\n        };\n        /**\n         * Pins the given session to the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.pinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/pin`, request);\n        };\n        /**\n         * Unpins the given session from the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.unpinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unpin`, request);\n        };\n        /**\n         * Query call members with filter query. The result won't be stored in call state.\n         * @param request\n         * @returns\n         */ this.queryMembers = (request)=>{\n            return this.streamClient.post(\"/call/members\", {\n                ...request || {},\n                id: this.id,\n                type: this.type\n            });\n        };\n        /**\n         * Will update the call members.\n         *\n         * @param data the request data.\n         */ this.updateCallMembers = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/members`, data);\n        };\n        /**\n         * Schedules an auto-drop timeout based on the call settings.\n         * Applicable only for ringing calls.\n         */ this.scheduleAutoDrop = ()=>{\n            clearTimeout(this.dropTimeout);\n            this.leaveCallHooks.add(createSubscription(this.state.settings$, (settings)=>{\n                if (!settings) return;\n                // ignore if the call is not ringing\n                if (this.state.callingState !== CallingState.RINGING) return;\n                const timeoutInMs = settings.ring.auto_cancel_timeout_ms;\n                // 0 means no auto-drop\n                if (timeoutInMs <= 0) return;\n                clearTimeout(this.dropTimeout);\n                this.dropTimeout = setTimeout(()=>{\n                    this.leave({\n                        reason: \"ring: timeout\"\n                    }).catch((err)=>{\n                        this.logger(\"error\", \"Failed to drop call\", err);\n                    });\n                }, timeoutInMs);\n            }));\n        };\n        /**\n         * Retrieves the list of recordings for the current call or call session.\n         *\n         * If `callSessionId` is provided, it will return the recordings for that call session.\n         * Otherwise, all recordings for the current call will be returned.\n         *\n         * @param callSessionId the call session id to retrieve recordings for.\n         */ this.queryRecordings = async (callSessionId)=>{\n            let endpoint = this.streamClientBasePath;\n            if (callSessionId) {\n                endpoint = `${endpoint}/${callSessionId}`;\n            }\n            return this.streamClient.get(`${endpoint}/recordings`);\n        };\n        /**\n         * Retrieves the list of transcriptions for the current call.\n         *\n         * @returns the list of transcriptions.\n         */ this.queryTranscriptions = async ()=>{\n            return this.streamClient.get(`${this.streamClientBasePath}/transcriptions`);\n        };\n        /**\n         * Retrieve call statistics for a particular call session (historical).\n         * Here `callSessionID` is mandatory.\n         *\n         * @param callSessionID the call session ID to retrieve statistics for.\n         * @returns The call stats.\n         */ this.getCallStats = async (callSessionID)=>{\n            const endpoint = `${this.streamClientBasePath}/stats/${callSessionID}`;\n            return this.streamClient.get(endpoint);\n        };\n        /**\n         * Submit user feedback for the call\n         *\n         * @param rating Rating between 1 and 5 denoting the experience of the user in the call\n         * @param reason The reason/description for the rating\n         * @param custom Custom data\n         * @returns\n         */ this.submitFeedback = async (rating, { reason, custom } = {})=>{\n            if (rating < 1 || rating > 5) {\n                throw new Error(\"Rating must be between 1 and 5\");\n            }\n            const callSessionId = this.state.session?.id;\n            if (!callSessionId) {\n                throw new Error(\"Feedback can be submitted only in the context of a call session\");\n            }\n            const { sdkName, sdkVersion, ...platform } = getSdkSignature(getClientDetails());\n            // user sessionId is not available once the call has been left\n            // until we relax the backend validation, we'll send N/A\n            const userSessionId = this.sfuClient?.sessionId ?? \"N/A\";\n            const endpoint = `${this.streamClientBasePath}/feedback/${callSessionId}`;\n            return this.streamClient.post(endpoint, {\n                rating,\n                reason,\n                user_session_id: userSessionId,\n                sdk: sdkName,\n                sdk_version: sdkVersion,\n                custom: {\n                    ...custom,\n                    \"x-stream-platform-data\": platform\n                }\n            });\n        };\n        /**\n         * Sends a custom event to all call participants.\n         *\n         * @param payload the payload to send.\n         */ this.sendCustomEvent = async (payload)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/event`, {\n                custom: payload\n            });\n        };\n        /**\n         * Applies the device configuration from the backend.\n         *\n         * @internal\n         */ this.applyDeviceConfig = async ()=>{\n            await this.initCamera({\n                setStatus: false\n            }).catch((err)=>{\n                this.logger(\"warn\", \"Camera init failed\", err);\n            });\n            await this.initMic({\n                setStatus: false\n            }).catch((err)=>{\n                this.logger(\"warn\", \"Mic init failed\", err);\n            });\n        };\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the video mode.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            return this.dynascaleManager.trackElementVisibility(element, sessionId, trackType);\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.dynascaleManager.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const unbind = this.dynascaleManager.bindVideoElement(videoElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType = \"audioTrack\")=>{\n            const unbind = this.dynascaleManager.bindAudioElement(audioElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <img> element to this call's thumbnail (if enabled in settings).\n         *\n         * @param imageElement the image element to bind to.\n         * @param opts options for the binding.\n         */ this.bindCallThumbnailElement = (imageElement, opts = {})=>{\n            const handleError = ()=>{\n                imageElement.src = opts.fallbackImageSource || \"https://getstream.io/random_svg/?name=x&id=x\";\n            };\n            const unsubscribe = createSubscription(this.state.thumbnails$, (thumbnails)=>{\n                if (!thumbnails) return;\n                imageElement.addEventListener(\"error\", handleError);\n                const thumbnailUrl = new URL(thumbnails.image_url);\n                thumbnailUrl.searchParams.set(\"w\", String(imageElement.clientWidth));\n                thumbnailUrl.searchParams.set(\"h\", String(imageElement.clientHeight));\n                imageElement.src = thumbnailUrl.toString();\n            });\n            return ()=>{\n                unsubscribe();\n                imageElement.removeEventListener(\"error\", handleError);\n            };\n        };\n        this.type = type;\n        this.id = id;\n        this.cid = `${type}:${id}`;\n        this.ringingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(ringing);\n        this.watching = watching;\n        this.streamClient = streamClient;\n        this.clientStore = clientStore;\n        this.streamClientBasePath = `/call/${this.type}/${this.id}`;\n        this.logger = getLogger([\n            \"Call\"\n        ]);\n        const callTypeConfig = CallTypes.get(type);\n        const participantSorter = sortParticipantsBy || callTypeConfig.options.sortParticipantsBy;\n        if (participantSorter) {\n            this.state.setSortParticipantsBy(participantSorter);\n        }\n        this.state.setMembers(members || []);\n        this.state.setOwnCapabilities(ownCapabilities || []);\n        this.state.setCallingState(ringing ? CallingState.RINGING : CallingState.IDLE);\n        this.camera = new CameraManager(this);\n        this.microphone = new MicrophoneManager(this);\n        this.speaker = new SpeakerManager(this);\n        this.screenShare = new ScreenShareManager(this);\n    }\n    async setup() {\n        await withoutConcurrency(this.joinLeaveConcurrencyTag, async ()=>{\n            if (this.initialized) {\n                return;\n            }\n            this.leaveCallHooks.add(this.on(\"all\", (event)=>{\n                // update state with the latest event data\n                this.state.updateFromEvent(event);\n            }));\n            this.leaveCallHooks.add(registerEventHandlers(this, this.state, this.dispatcher));\n            this.registerEffects();\n            this.leaveCallHooks.add(createSubscription(this.trackSubscriptionsSubject.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_33__.debounce)((v)=>(0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_34__.timer)(v.type)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((v)=>v.data)), (subscriptions)=>this.sfuClient?.updateSubscriptions(subscriptions).catch((err)=>{\n                    this.logger(\"debug\", `Failed to update track subscriptions`, err);\n                })));\n            if (this.state.callingState === CallingState.LEFT) {\n                this.state.setCallingState(CallingState.IDLE);\n            }\n            this.initialized = true;\n        });\n    }\n    registerEffects() {\n        this.leaveCallHooks.add(// handles updating the permissions context when the settings change.\n        createSubscription(this.state.settings$, (settings)=>{\n            if (!settings) return;\n            this.permissionsContext.setCallSettings(settings);\n        }));\n        this.leaveCallHooks.add(// handle the case when the user permissions are modified.\n        createSubscription(this.state.ownCapabilities$, (ownCapabilities)=>{\n            // update the permission context.\n            this.permissionsContext.setPermissions(ownCapabilities);\n            if (!this.publisher) return;\n            // check if the user still has publishing permissions and stop publishing if not.\n            const permissionToTrackType = {\n                [OwnCapability.SEND_AUDIO]: TrackType.AUDIO,\n                [OwnCapability.SEND_VIDEO]: TrackType.VIDEO,\n                [OwnCapability.SCREENSHARE]: TrackType.SCREEN_SHARE\n            };\n            for (const [permission, trackType] of Object.entries(permissionToTrackType)){\n                const hasPermission = this.permissionsContext.hasPermission(permission);\n                if (!hasPermission && (this.publisher.isPublishing(trackType) || this.publisher.isLive(trackType))) {\n                    // Stop tracks, then notify device manager\n                    this.stopPublish(trackType).catch((err)=>{\n                        this.logger(\"error\", `Error stopping publish ${trackType}`, err);\n                    }).then(()=>{\n                        if (trackType === TrackType.VIDEO && this.camera.state.status === \"enabled\") {\n                            this.camera.disable().catch((err)=>this.logger(\"error\", `Error disabling camera after permission revoked`, err));\n                        }\n                        if (trackType === TrackType.AUDIO && this.microphone.state.status === \"enabled\") {\n                            this.microphone.disable().catch((err)=>this.logger(\"error\", `Error disabling microphone after permission revoked`, err));\n                        }\n                    });\n                }\n            }\n        }));\n        this.leaveCallHooks.add(// handles the case when the user is blocked by the call owner.\n        createSubscription(this.state.blockedUserIds$, async (blockedUserIds)=>{\n            if (!blockedUserIds || blockedUserIds.length === 0) return;\n            const currentUserId = this.currentUserId;\n            if (currentUserId && blockedUserIds.includes(currentUserId)) {\n                this.logger(\"info\", \"Leaving call because of being blocked\");\n                await this.leave({\n                    reason: \"user blocked\"\n                }).catch((err)=>{\n                    this.logger(\"error\", \"Error leaving call after being blocked\", err);\n                });\n            }\n        }));\n        this.leaveCallHooks.add(// watch for auto drop cancellation\n        createSubscription(this.state.callingState$, (callingState)=>{\n            if (!this.ringing) return;\n            if (callingState === CallingState.JOINED || callingState === CallingState.JOINING || callingState === CallingState.LEFT) {\n                clearTimeout(this.dropTimeout);\n                this.dropTimeout = undefined;\n            }\n        }));\n        this.leaveCallHooks.add(// \"ringing\" mode effects and event handlers\n        createSubscription(this.ringingSubject, (isRinging)=>{\n            if (!isRinging) return;\n            const callSession = this.state.session;\n            const receiver_id = this.clientStore.connectedUser?.id;\n            const ended_at = callSession?.ended_at;\n            const created_by_id = this.state.createdBy?.id;\n            const rejected_by = callSession?.rejected_by;\n            const accepted_by = callSession?.accepted_by;\n            let leaveCallIdle = false;\n            if (ended_at) {\n                // call was ended before it was accepted or rejected so we should leave it to idle\n                leaveCallIdle = true;\n            } else if (created_by_id && rejected_by) {\n                if (rejected_by[created_by_id]) {\n                    // call was cancelled by the caller\n                    leaveCallIdle = true;\n                }\n            } else if (receiver_id && rejected_by) {\n                if (rejected_by[receiver_id]) {\n                    // call was rejected by the receiver in some other device\n                    leaveCallIdle = true;\n                }\n            } else if (receiver_id && accepted_by) {\n                if (accepted_by[receiver_id]) {\n                    // call was accepted by the receiver in some other device\n                    leaveCallIdle = true;\n                }\n            }\n            if (leaveCallIdle) {\n                if (this.state.callingState !== CallingState.IDLE) {\n                    this.state.setCallingState(CallingState.IDLE);\n                }\n            } else {\n                if (this.state.callingState === CallingState.IDLE) {\n                    this.state.setCallingState(CallingState.RINGING);\n                }\n                this.scheduleAutoDrop();\n                this.leaveCallHooks.add(registerRingingCallEventHandlers(this));\n            }\n        }));\n    }\n    /**\n     * A flag indicating whether the call is \"ringing\" type of call.\n     */ get ringing() {\n        return getCurrentValue(this.ringingSubject);\n    }\n    /**\n     * Retrieves the current user ID.\n     */ get currentUserId() {\n        return this.clientStore.connectedUser?.id;\n    }\n    /**\n     * A flag indicating whether the call was created by the current user.\n     */ get isCreatedByMe() {\n        return this.state.createdBy?.id === this.currentUserId;\n    }\n    async initCamera(options) {\n        // Wait for any in progress camera operation\n        await this.camera.statusChangeSettled();\n        if (this.state.localParticipant?.videoStream || !this.permissionsContext.hasPermission(\"send-video\")) {\n            return;\n        }\n        // Set camera direction if it's not yet set\n        if (!this.camera.state.direction && !this.camera.state.selectedDevice) {\n            let defaultDirection = \"front\";\n            const backendSetting = this.state.settings?.video.camera_facing;\n            if (backendSetting) {\n                defaultDirection = backendSetting === \"front\" ? \"front\" : \"back\";\n            }\n            this.camera.state.setDirection(defaultDirection);\n        }\n        // Set target resolution\n        const targetResolution = this.state.settings?.video.target_resolution;\n        if (targetResolution) {\n            await this.camera.selectTargetResolution(targetResolution);\n        }\n        if (options.setStatus) {\n            // Publish already that was set before we joined\n            if (this.camera.state.status === \"enabled\" && this.camera.state.mediaStream && !this.publisher?.isPublishing(TrackType.VIDEO)) {\n                await this.publishVideoStream(this.camera.state.mediaStream, {\n                    preferredCodec: this.camera.preferredCodec\n                });\n            }\n            // Start camera if backend config specifies, and there is no local setting\n            if (this.camera.state.status === undefined && this.state.settings?.video.camera_default_on) {\n                await this.camera.enable();\n            }\n        }\n    }\n    async initMic(options) {\n        // Wait for any in progress mic operation\n        await this.microphone.statusChangeSettled();\n        if (this.state.localParticipant?.audioStream || !this.permissionsContext.hasPermission(\"send-audio\")) {\n            return;\n        }\n        if (options.setStatus) {\n            // Publish media stream that was set before we joined\n            if (this.microphone.state.status === \"enabled\" && this.microphone.state.mediaStream && !this.publisher?.isPublishing(TrackType.AUDIO)) {\n                await this.publishAudioStream(this.microphone.state.mediaStream);\n            }\n            // Start mic if backend config specifies, and there is no local setting\n            if (this.microphone.state.status === undefined && this.state.settings?.audio.mic_default_on) {\n                await this.microphone.enable();\n            }\n        }\n    }\n}\nclass InsightMetrics {\n    constructor(){\n        this.connectionStartTimestamp = null;\n        this.wsTotalFailures = 0;\n        this.wsConsecutiveFailures = 0;\n        this.instanceClientId = randomId();\n    }\n}\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */ const postInsights = async (insightType, insights)=>{\n    const maxAttempts = 3;\n    for(let i = 0; i < maxAttempts; i++){\n        try {\n            await axios__WEBPACK_IMPORTED_MODULE_35__[\"default\"].post(`https://chat-insights.getstream.io/insights/${insightType}`, insights);\n        } catch (e) {\n            await sleep((i + 1) * 3000);\n            continue;\n        }\n        break;\n    }\n};\nfunction buildWsFatalInsight(connection, event) {\n    return {\n        ...event,\n        ...buildWsBaseInsight(connection)\n    };\n}\nfunction buildWsBaseInsight(connection) {\n    const { client } = connection;\n    return {\n        ready_state: connection.ws?.readyState,\n        url: connection._buildUrl(),\n        api_key: client.key,\n        start_ts: client.insightMetrics.connectionStartTimestamp,\n        end_ts: new Date().getTime(),\n        auth_type: client.getAuthType(),\n        token: client.tokenManager.token,\n        user_id: client.userID,\n        user_details: client._user,\n        // device: client.options.device,\n        device: \"browser\",\n        client_id: connection.connectionID,\n        ws_details: connection.ws,\n        ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n        ws_total_failures: client.insightMetrics.wsTotalFailures,\n        request_id: connection.requestID,\n        online: typeof navigator !== \"undefined\" ? navigator?.onLine : null,\n        user_agent: typeof navigator !== \"undefined\" ? navigator?.userAgent : null,\n        instance_client_id: client.insightMetrics.instanceClientId\n    };\n}\nfunction buildWsSuccessAfterFailureInsight(connection) {\n    return buildWsBaseInsight(connection);\n}\n// Type guards to check WebSocket error type\nconst isCloseEvent = (res)=>res.code !== undefined;\nconst isErrorEvent = (res)=>res.error !== undefined;\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */ class StableWSConnection {\n    constructor(client){\n        this._log = (msg, extra = {}, level = \"info\")=>{\n            this.client.logger(level, \"connection:\" + msg, {\n                ...extra\n            });\n        };\n        this.setClient = (client)=>{\n            this.client = client;\n        };\n        /**\n         * Builds and returns the url for websocket.\n         * @private\n         * @returns url string\n         */ this._buildUrl = ()=>{\n            const params = new URLSearchParams();\n            // const qs = encodeURIComponent(this.client._buildWSPayload(this.requestID));\n            // params.set('json', qs);\n            params.set(\"api_key\", this.client.key);\n            params.set(\"stream-auth-type\", this.client.getAuthType());\n            params.set(\"X-Stream-Client\", this.client.getUserAgent());\n            // params.append('authorization', this.client._getToken()!);\n            return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n        };\n        /**\n         * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n         *\n         * @param {Event} event Event with type online or offline\n         *\n         */ this.onlineStatusChanged = (event)=>{\n            if (event.type === \"offline\") {\n                // mark the connection as down\n                this._log(\"onlineStatusChanged() - Status changing to offline\");\n                // we know that the app is offline so dispatch the unhealthy connection event immediately\n                this._setHealth(false, true);\n            } else if (event.type === \"online\") {\n                // retry right now...\n                // We check this.isHealthy, not sure if it's always\n                // smart to create a new WS connection if the old one is still up and running.\n                // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n                this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n                if (!this.isHealthy) {\n                    this._reconnect({\n                        interval: 10\n                    });\n                }\n            }\n        };\n        this.onopen = (wsID)=>{\n            if (this.wsID !== wsID) return;\n            const user = this.client.user;\n            if (!user) {\n                this.client.logger(\"error\", `User not set, can't connect to WS`);\n                return;\n            }\n            const token = this.client._getToken();\n            if (!token) {\n                this.client.logger(\"error\", `Token not set, can't connect authenticate`);\n                return;\n            }\n            const authMessage = {\n                token,\n                user_details: {\n                    id: user.id,\n                    name: user.name,\n                    image: user.image,\n                    custom: user.custom\n                }\n            };\n            this.authenticationSent = true;\n            this.ws?.send(JSON.stringify(authMessage));\n            this._log(\"onopen() - onopen callback\", {\n                wsID\n            });\n        };\n        this.onmessage = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log(\"onmessage() - onmessage callback\", {\n                event,\n                wsID\n            });\n            const data = typeof event.data === \"string\" ? JSON.parse(event.data) : null;\n            // we wait till the first message before we consider the connection open.\n            // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n            // after that a ws.onclose.\n            if (!this.isResolved && data && data.type === \"connection.error\") {\n                this.isResolved = true;\n                if (data.error) {\n                    // @ts-expect-error - the types of _errorFromWSEvent are incorrect\n                    this.rejectPromise?.(this._errorFromWSEvent(data, false));\n                    return;\n                }\n            }\n            // trigger the event..\n            this.lastEvent = new Date();\n            if (data && (data.type === \"health.check\" || data.type === \"connection.ok\")) {\n                // the initial health-check should come from the client\n                this.scheduleNextPing();\n            }\n            if (data && data.type === \"connection.ok\") {\n                this.resolvePromise?.(data);\n                this._setHealth(true);\n            }\n            if (data && data.type === \"connection.error\" && data.error) {\n                const { code } = data.error;\n                this.isHealthy = false;\n                this.isConnecting = false;\n                this.consecutiveFailures += 1;\n                if (code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                    clearTimeout(this.connectionCheckTimeoutRef);\n                    this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                    this._reconnect({\n                        refreshToken: true\n                    });\n                }\n            }\n            if (data) {\n                this.client.dispatchEvent(data);\n            }\n            this.scheduleConnectionCheck();\n        };\n        this.onclose = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log(\"onclose() - onclose callback - \" + event.code, {\n                event,\n                wsID\n            });\n            if (event.code === KnownCodes.WS_CLOSED_SUCCESS) {\n                // this is a permanent error raised by stream..\n                // usually caused by invalid auth details\n                const error = new Error(`WS connection reject with error ${event.reason}`);\n                error.reason = event.reason;\n                error.code = event.code;\n                error.wasClean = event.wasClean;\n                error.target = event.target;\n                this.rejectPromise?.(error);\n                this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n                    event\n                });\n            } else {\n                this.consecutiveFailures += 1;\n                this.totalFailures += 1;\n                this._setHealth(false);\n                this.isConnecting = false;\n                this.rejectPromise?.(this._errorFromWSEvent(event));\n                this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n                    event\n                });\n                // reconnect if its an abnormal failure\n                this._reconnect();\n            }\n        };\n        this.onerror = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this.consecutiveFailures += 1;\n            this.totalFailures += 1;\n            this._setHealth(false);\n            this.isConnecting = false;\n            this.rejectPromise?.(this._errorFromWSEvent(event));\n            this._log(`onerror() - WS connection resulted into error`, {\n                event\n            });\n            this._reconnect();\n        };\n        /**\n         * _setHealth - Sets the connection to healthy or unhealthy.\n         * Broadcasts an event in case the connection status changed.\n         *\n         * @param {boolean} healthy boolean indicating if the connection is healthy or not\n         * @param {boolean} dispatchImmediately boolean indicating to dispatch event immediately even if the connection is unhealthy\n         *\n         */ this._setHealth = (healthy, dispatchImmediately = false)=>{\n            if (healthy === this.isHealthy) return;\n            this.isHealthy = healthy;\n            if (this.isHealthy || dispatchImmediately) {\n                this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: this.isHealthy\n                });\n                return;\n            }\n            // we're offline, wait few seconds and fire and event if still offline\n            setTimeout(()=>{\n                if (this.isHealthy) return;\n                this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: this.isHealthy\n                });\n            }, 5000);\n        };\n        /**\n         * _errorFromWSEvent - Creates an error object for the WS event\n         *\n         */ this._errorFromWSEvent = (event, isWSFailure = true)=>{\n            let code;\n            let statusCode;\n            let message;\n            if (isCloseEvent(event)) {\n                code = event.code;\n                statusCode = \"unknown\";\n                message = event.reason;\n            }\n            if (isErrorEvent(event)) {\n                code = event.error.code;\n                statusCode = event.error.StatusCode;\n                message = event.error.message;\n            }\n            // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n            this._log(`_errorFromWSEvent() - WS failed with code ${code}`, {\n                event\n            }, \"warn\");\n            const error = new Error(`WS failed with code ${code} and reason - ${message}`);\n            error.code = code;\n            /**\n             * StatusCode does not exist on any event types but has been left\n             * as is to preserve JS functionality during the TS implementation\n             */ error.StatusCode = statusCode;\n            error.isWSFailure = isWSFailure;\n            return error;\n        };\n        /**\n         * _setupPromise - sets up the this.connectOpen promise\n         */ this._setupConnectionPromise = ()=>{\n            this.isResolved = false;\n            /** a promise that is resolved once ws.open is called */ this.connectionOpen = new Promise((resolve, reject)=>{\n                this.resolvePromise = resolve;\n                this.rejectPromise = reject;\n            });\n        };\n        /**\n         * Schedules a next health check ping for websocket.\n         */ this.scheduleNextPing = ()=>{\n            if (this.healthCheckTimeoutRef) {\n                clearTimeout(this.healthCheckTimeoutRef);\n            }\n            // 30 seconds is the recommended interval (messenger uses this)\n            this.healthCheckTimeoutRef = setTimeout(()=>{\n                // send the healthcheck..., server replies with a health check event\n                const data = [\n                    {\n                        type: \"health.check\",\n                        client_id: this.client.clientID\n                    }\n                ];\n                // try to send on the connection\n                try {\n                    this.ws?.send(JSON.stringify(data));\n                } catch (e) {\n                // error will already be detected elsewhere\n                }\n            }, this.pingInterval);\n        };\n        /**\n         * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n         * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n         * to be reconnected.\n         */ this.scheduleConnectionCheck = ()=>{\n            if (this.connectionCheckTimeoutRef) {\n                clearTimeout(this.connectionCheckTimeoutRef);\n            }\n            this.connectionCheckTimeoutRef = setTimeout(()=>{\n                const now = new Date();\n                if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n                    this._log(\"scheduleConnectionCheck - going to reconnect\");\n                    this._setHealth(false);\n                    this._reconnect();\n                }\n            }, this.connectionCheckTimeout);\n        };\n        this.client = client;\n        /** consecutive failures influence the duration of the timeout */ this.consecutiveFailures = 0;\n        /** keep track of the total number of failures */ this.totalFailures = 0;\n        /** We only make 1 attempt to reconnect at the same time.. */ this.isConnecting = false;\n        /** True after the auth payload is sent to the server */ this.authenticationSent = false;\n        /** To avoid reconnect if client is disconnected */ this.isDisconnected = false;\n        /** Boolean that indicates if the connection promise is resolved */ this.isResolved = false;\n        /** Boolean that indicates if we have a working connection to the server */ this.isHealthy = false;\n        /** Incremented when a new WS connection is made */ this.wsID = 1;\n        /** Store the last event time for health checks */ this.lastEvent = null;\n        /** Send a health check message every 25 seconds */ this.pingInterval = 25 * 1000;\n        this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n        addConnectionEventListeners(this.onlineStatusChanged);\n    }\n    /**\n     * connect - Connect to the WS URL\n     * the default 15s timeout allows between 2~3 tries\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async connect(timeout = 15000) {\n        if (this.isConnecting) {\n            throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n        }\n        this.isDisconnected = false;\n        try {\n            const healthCheck = await this._connect();\n            this.consecutiveFailures = 0;\n            this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (// @ts-ignore\n            error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                this._reconnect({\n                    refreshToken: true\n                });\n            } else {\n                // @ts-ignore\n                if (!error.isWSFailure) {\n                    // API rejected the connection and we should not retry\n                    throw new Error(JSON.stringify({\n                        // @ts-ignore\n                        code: error.code,\n                        // @ts-ignore\n                        StatusCode: error.StatusCode,\n                        // @ts-ignore\n                        message: error.message,\n                        // @ts-ignore\n                        isWSFailure: error.isWSFailure\n                    }));\n                }\n            }\n        }\n        return await this._waitForHealthy(timeout);\n    }\n    /**\n     * _waitForHealthy polls the promise connection to see if its resolved until it times out\n     * the default 15s timeout allows between 2~3 tries\n     * @param timeout duration(ms)\n     */ async _waitForHealthy(timeout = 15000) {\n        return Promise.race([\n            (async ()=>{\n                const interval = 50; // ms\n                for(let i = 0; i <= timeout; i += interval){\n                    try {\n                        return await this.connectionOpen;\n                    } catch (error) {\n                        if (i === timeout) {\n                            throw new Error(JSON.stringify({\n                                code: error.code,\n                                StatusCode: error.StatusCode,\n                                message: error.message,\n                                isWSFailure: error.isWSFailure\n                            }));\n                        }\n                        await sleep(interval);\n                    }\n                }\n            })(),\n            (async ()=>{\n                await sleep(timeout);\n                this.isConnecting = false;\n                throw new Error(JSON.stringify({\n                    code: \"\",\n                    StatusCode: \"\",\n                    message: \"initial WS connection could not be established\",\n                    isWSFailure: true\n                }));\n            })()\n        ]);\n    }\n    /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */ disconnect(timeout) {\n        this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n        this.wsID += 1;\n        this.isConnecting = false;\n        this.isDisconnected = true;\n        // start by removing all the listeners\n        if (this.healthCheckTimeoutRef) {\n            clearInterval(this.healthCheckTimeoutRef);\n        }\n        if (this.connectionCheckTimeoutRef) {\n            clearInterval(this.connectionCheckTimeoutRef);\n        }\n        removeConnectionEventListeners(this.onlineStatusChanged);\n        this.isHealthy = false;\n        // remove ws handlers...\n        if (this.ws && this.ws.removeAllListeners) {\n            this.ws.removeAllListeners();\n        }\n        let isClosedPromise;\n        // and finally close...\n        // Assigning to local here because we will remove it from this before the\n        // promise resolves.\n        const { ws } = this;\n        if (ws && ws.close && ws.readyState === ws.OPEN) {\n            isClosedPromise = new Promise((resolve)=>{\n                const onclose = (event)=>{\n                    this._log(`disconnect() - resolving isClosedPromise ${event ? \"with\" : \"without\"} close frame`, {\n                        event\n                    });\n                    resolve();\n                };\n                ws.onclose = onclose;\n                // In case we don't receive close frame websocket server in time,\n                // lets not wait for more than 1 second.\n                setTimeout(onclose, timeout != null ? timeout : 1000);\n            });\n            this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n            ws.close(KnownCodes.WS_CLOSED_SUCCESS, \"Manually closed connection by calling client.disconnect()\");\n        } else {\n            this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n            isClosedPromise = Promise.resolve();\n        }\n        delete this.ws;\n        return isClosedPromise;\n    }\n    /**\n     * _connect - Connect to the WS endpoint\n     *\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async _connect() {\n        if (this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback) return; // simply ignore _connect if it's currently trying to connect\n        this.isConnecting = true;\n        this.requestID = randomId();\n        this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n        let isTokenReady = false;\n        try {\n            this._log(`_connect() - waiting for token`);\n            await this.client.tokenManager.tokenReady();\n            isTokenReady = true;\n        } catch (e) {\n        // token provider has failed before, so try again\n        }\n        try {\n            if (!isTokenReady) {\n                this._log(`_connect() - tokenProvider failed before, so going to retry`);\n                await this.client.tokenManager.loadToken();\n            }\n            this._setupConnectionPromise();\n            const wsURL = this._buildUrl();\n            this._log(`_connect() - Connecting to ${wsURL}`, {\n                wsURL,\n                requestID: this.requestID\n            });\n            this.ws = new (isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default())(wsURL);\n            this.ws.onopen = this.onopen.bind(this, this.wsID);\n            this.ws.onclose = this.onclose.bind(this, this.wsID);\n            this.ws.onerror = this.onerror.bind(this, this.wsID);\n            this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n            const response = await this.connectionOpen;\n            this.isConnecting = false;\n            if (response) {\n                this.connectionID = response.connection_id;\n                this.client.resolveConnectionId?.(this.connectionID);\n                if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n                    postInsights(\"ws_success_after_failure\", buildWsSuccessAfterFailureInsight(this));\n                    this.client.insightMetrics.wsConsecutiveFailures = 0;\n                }\n                return response;\n            }\n        } catch (err) {\n            this.isConnecting = false;\n            // @ts-ignore\n            this._log(`_connect() - Error - `, err);\n            if (this.client.options.enableInsights) {\n                this.client.insightMetrics.wsConsecutiveFailures++;\n                this.client.insightMetrics.wsTotalFailures++;\n                const insights = buildWsFatalInsight(this, convertErrorToJson(err));\n                postInsights?.(\"ws_fatal\", insights);\n            }\n            this.client.rejectConnectionId?.(err);\n            throw err;\n        }\n    }\n    /**\n     * _reconnect - Retry the connection to WS endpoint\n     *\n     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n     *\n     * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n     * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n     */ async _reconnect(options = {}) {\n        this._log(\"_reconnect() - Initiating the reconnect\");\n        // only allow 1 connection at the time\n        if (this.isConnecting || this.isHealthy) {\n            this._log(\"_reconnect() - Abort (1) since already connecting or healthy\");\n            return;\n        }\n        // reconnect in case of on error or on close\n        // also reconnect if the health check cycle fails\n        let interval = options.interval;\n        if (!interval) {\n            interval = retryInterval(this.consecutiveFailures);\n        }\n        // reconnect, or try again after a little while...\n        await sleep(interval);\n        // Check once again if by some other call to _reconnect is active or connection is\n        // already restored, then no need to proceed.\n        if (this.isConnecting || this.isHealthy) {\n            this._log(\"_reconnect() - Abort (2) since already connecting or healthy\");\n            return;\n        }\n        if (this.isDisconnected && this.client.options.enableWSFallback) {\n            this._log(\"_reconnect() - Abort (3) since disconnect() is called\");\n            return;\n        }\n        this._log(\"_reconnect() - Destroying current WS connection\");\n        // cleanup the old connection\n        this._destroyCurrentWSConnection();\n        if (options.refreshToken) {\n            await this.client.tokenManager.loadToken();\n        }\n        try {\n            await this._connect();\n            this._log(\"_reconnect() - Waiting for recoverCallBack\");\n            // await this.client.recoverState();\n            this._log(\"_reconnect() - Finished recoverCallBack\");\n            this.consecutiveFailures = 0;\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log(\"_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                return this._reconnect({\n                    refreshToken: true\n                });\n            }\n            // reconnect on WS failures, don't reconnect if there is a code bug\n            if (error.isWSFailure) {\n                this._log(\"_reconnect() - WS failure, so going to try to reconnect\");\n                this._reconnect();\n            }\n        }\n        this._log(\"_reconnect() - == END ==\");\n    }\n    /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */ _destroyCurrentWSConnection() {\n        // increment the ID, meaning we will ignore all messages from the old\n        // ws connection from now on.\n        this.wsID += 1;\n        try {\n            this?.ws?.removeAllListeners();\n            this?.ws?.close();\n        } catch (e) {\n        // we don't care\n        }\n    }\n}\nfunction isString(arrayOrString) {\n    return typeof arrayOrString === \"string\";\n}\nfunction isMapStringCallback(arrayOrString, callback) {\n    return !!callback && isString(arrayOrString);\n}\nfunction map(arrayOrString, callback) {\n    const res = [];\n    if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n        for(let k = 0, len = arrayOrString.length; k < len; k++){\n            if (arrayOrString.charAt(k)) {\n                const kValue = arrayOrString.charAt(k);\n                const mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n        for(let k = 0, len = arrayOrString.length; k < len; k++){\n            if (k in arrayOrString) {\n                const kValue = arrayOrString[k];\n                const mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    }\n    return res;\n}\nconst encodeBase64 = (data)=>(0,base64_js__WEBPACK_IMPORTED_MODULE_6__.fromByteArray)(new Uint8Array(map(data, (char)=>char.charCodeAt(0))));\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nconst decodeBase64 = (s)=>{\n    const e = {}, w = String.fromCharCode, L = s.length;\n    let i, b = 0, c, x, l = 0, a, r = \"\";\n    const A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(i = 0; i < 64; i++){\n        e[A.charAt(i)] = i;\n    }\n    for(x = 0; x < L; x++){\n        c = e[s.charAt(x)];\n        b = (b << 6) + c;\n        l += 6;\n        while(l >= 8){\n            ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n        }\n    }\n    return r;\n};\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */ function DevToken(userId) {\n    return [\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n        encodeBase64(JSON.stringify({\n            user_id: userId\n        })),\n        \"devtoken\"\n    ].join(\".\");\n}\nfunction UserFromToken(token) {\n    const fragments = token.split(\".\");\n    if (fragments.length !== 3) {\n        return \"\";\n    }\n    const b64Payload = fragments[1];\n    const payload = decodeBase64(b64Payload);\n    const data = JSON.parse(payload);\n    return data.user_id;\n}\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */ class TokenManager {\n    /**\n     * Constructor\n     *\n     * @param {Secret} secret\n     */ constructor(secret){\n        /**\n         * Set the static string token or token provider.\n         * Token provider should return a token string or a promise which resolves to string token.\n         *\n         * @param {TokenOrProvider} tokenOrProvider - the token or token provider.\n         * @param {UserResponse} user - the user object.\n         * @param {boolean} isAnonymous - whether the user is anonymous or not.\n         */ this.setTokenOrProvider = async (tokenOrProvider, user, isAnonymous)=>{\n            this.validateToken(tokenOrProvider, user, isAnonymous);\n            this.user = user;\n            if (isFunction(tokenOrProvider)) {\n                this.tokenProvider = tokenOrProvider;\n                this.type = \"provider\";\n            }\n            if (typeof tokenOrProvider === \"string\") {\n                this.token = tokenOrProvider;\n                this.type = \"static\";\n            }\n            await this.loadToken();\n        };\n        /**\n         * Resets the token manager.\n         * Useful for client disconnection or switching user.\n         */ this.reset = ()=>{\n            this.token = undefined;\n            this.user = undefined;\n            this.loadTokenPromise = null;\n        };\n        // Validates the user token.\n        this.validateToken = (tokenOrProvider, user, isAnonymous)=>{\n            // allow empty token for anon user\n            if (user && isAnonymous && !tokenOrProvider) return;\n            // Don't allow empty token for non-server side client.\n            if (!this.secret && !tokenOrProvider) {\n                throw new Error(\"UserWithId token can not be empty\");\n            }\n            if (tokenOrProvider && typeof tokenOrProvider !== \"string\" && !isFunction(tokenOrProvider)) {\n                throw new Error(\"user token should either be a string or a function\");\n            }\n            if (typeof tokenOrProvider === \"string\") {\n                // Allow empty token for anonymous users\n                if (isAnonymous && tokenOrProvider === \"\") return;\n                const tokenUserId = UserFromToken(tokenOrProvider);\n                if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === \"\" || !isAnonymous && tokenUserId !== user.id)) {\n                    throw new Error(\"userToken does not have a user_id or is not matching with user.id\");\n                }\n            }\n        };\n        // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n        // case a function should wait.\n        this.tokenReady = ()=>this.loadTokenPromise;\n        // Fetches a token from tokenProvider function and sets in tokenManager.\n        // In case of static token, it will simply resolve to static token.\n        this.loadToken = ()=>{\n            // eslint-disable-next-line no-async-promise-executor\n            this.loadTokenPromise = new Promise(async (resolve, reject)=>{\n                if (this.type === \"static\") {\n                    return resolve(this.token);\n                }\n                if (this.tokenProvider && typeof this.tokenProvider !== \"string\") {\n                    try {\n                        this.token = await this.tokenProvider();\n                    } catch (e) {\n                        return reject(new Error(`Call to tokenProvider failed with message: ${e}`));\n                    }\n                    resolve(this.token);\n                }\n            });\n            return this.loadTokenPromise;\n        };\n        // Returns a current token\n        this.getToken = ()=>{\n            if (this.token) {\n                return this.token;\n            }\n            if (this.user && !this.token) {\n                return this.token;\n            }\n            throw new Error(`User token is not set. Either client.connectUser wasn't called or client.disconnect was called`);\n        };\n        this.isStatic = ()=>this.type === \"static\";\n        this.loadTokenPromise = null;\n        if (secret) {\n            this.secret = secret;\n        }\n        this.type = \"static\";\n    }\n}\nconst APIErrorCodes = {\n    \"-1\": {\n        name: \"InternalSystemError\",\n        retryable: true\n    },\n    \"2\": {\n        name: \"AccessKeyError\",\n        retryable: false\n    },\n    \"3\": {\n        name: \"AuthenticationFailedError\",\n        retryable: true\n    },\n    \"4\": {\n        name: \"InputError\",\n        retryable: false\n    },\n    \"6\": {\n        name: \"DuplicateUsernameError\",\n        retryable: false\n    },\n    \"9\": {\n        name: \"RateLimitError\",\n        retryable: true\n    },\n    \"16\": {\n        name: \"DoesNotExistError\",\n        retryable: false\n    },\n    \"17\": {\n        name: \"NotAllowedError\",\n        retryable: false\n    },\n    \"18\": {\n        name: \"EventNotSupportedError\",\n        retryable: false\n    },\n    \"19\": {\n        name: \"ChannelFeatureNotSupportedError\",\n        retryable: false\n    },\n    \"20\": {\n        name: \"MessageTooLongError\",\n        retryable: false\n    },\n    \"21\": {\n        name: \"MultipleNestingLevelError\",\n        retryable: false\n    },\n    \"22\": {\n        name: \"PayloadTooBigError\",\n        retryable: false\n    },\n    \"23\": {\n        name: \"RequestTimeoutError\",\n        retryable: true\n    },\n    \"24\": {\n        name: \"MaxHeaderSizeExceededError\",\n        retryable: false\n    },\n    \"40\": {\n        name: \"AuthErrorTokenExpired\",\n        retryable: false\n    },\n    \"41\": {\n        name: \"AuthErrorTokenNotValidYet\",\n        retryable: false\n    },\n    \"42\": {\n        name: \"AuthErrorTokenUsedBeforeIssuedAt\",\n        retryable: false\n    },\n    \"43\": {\n        name: \"AuthErrorTokenSignatureInvalid\",\n        retryable: false\n    },\n    \"44\": {\n        name: \"CustomCommandEndpointMissingError\",\n        retryable: false\n    },\n    \"45\": {\n        name: \"CustomCommandEndpointCallError\",\n        retryable: true\n    },\n    \"46\": {\n        name: \"ConnectionIDNotFoundError\",\n        retryable: false\n    },\n    \"60\": {\n        name: \"CoolDownError\",\n        retryable: true\n    },\n    \"69\": {\n        name: \"ErrWrongRegion\",\n        retryable: false\n    },\n    \"70\": {\n        name: \"ErrQueryChannelPermissions\",\n        retryable: false\n    },\n    \"71\": {\n        name: \"ErrTooManyConnections\",\n        retryable: true\n    },\n    \"99\": {\n        name: \"AppSuspendedError\",\n        retryable: false\n    }\n};\nfunction isAPIError(error) {\n    return error.code !== undefined;\n}\nfunction isErrorRetryable(error) {\n    if (!error.code) return false;\n    const err = APIErrorCodes[`${error.code}`];\n    if (!err) return false;\n    return err.retryable;\n}\nfunction isConnectionIDError(error) {\n    return error.code === 46; // ConnectionIDNotFoundError\n}\nfunction isWSFailure(err) {\n    if (typeof err.isWSFailure === \"boolean\") {\n        return err.isWSFailure;\n    }\n    try {\n        return JSON.parse(err.message).isWSFailure;\n    } catch (_) {\n        return false;\n    }\n}\nfunction isErrorResponse(res) {\n    return !res.status || res.status < 200 || 300 <= res.status;\n}\nvar ConnectionState;\n(function(ConnectionState) {\n    ConnectionState[\"Closed\"] = \"CLOSED\";\n    ConnectionState[\"Connected\"] = \"CONNECTED\";\n    ConnectionState[\"Connecting\"] = \"CONNECTING\";\n    ConnectionState[\"Disconnected\"] = \"DISCONNECTED\";\n    ConnectionState[\"Init\"] = \"INIT\";\n})(ConnectionState || (ConnectionState = {}));\nclass WSConnectionFallback {\n    constructor(client){\n        /** @private */ this._onlineStatusChanged = (event)=>{\n            this._log(`_onlineStatusChanged() - ${event.type}`);\n            if (event.type === \"offline\") {\n                this._setState(ConnectionState.Closed);\n                this.cancelToken?.cancel(\"disconnect() is called\");\n                this.cancelToken = undefined;\n                return;\n            }\n            if (event.type === \"online\" && this.state === ConnectionState.Closed) {\n                this.connect(true);\n            }\n        };\n        /** @private */ this._req = async (params, config, retry)=>{\n            if (!this.cancelToken && !params.close) {\n                this.cancelToken = axios__WEBPACK_IMPORTED_MODULE_35__[\"default\"].CancelToken.source();\n            }\n            try {\n                const res = await this.client.doAxiosRequest(\"get\", this.client.baseURL.replace(\":3030\", \":8900\") + \"/longpoll\", undefined, {\n                    config: {\n                        ...config,\n                        cancelToken: this.cancelToken?.token\n                    },\n                    params,\n                    publicEndpoint: true\n                });\n                this.consecutiveFailures = 0; // always reset in case of no error\n                return res;\n            } catch (err) {\n                this.consecutiveFailures += 1;\n                // @ts-ignore\n                if (retry && isErrorRetryable(err)) {\n                    this._log(`_req() - Retryable error, retrying request`);\n                    await sleep(retryInterval(this.consecutiveFailures));\n                    return this._req(params, config, retry);\n                }\n                throw err;\n            }\n        };\n        /** @private */ this._poll = async ()=>{\n            while(this.state === ConnectionState.Connected){\n                try {\n                    const data = await this._req({}, {\n                        timeout: 30000\n                    }, true); // 30s => API responds in 20s if there is no event\n                    if (data.events?.length) {\n                        for(let i = 0; i < data.events.length; i++){\n                            this.client.dispatchEvent(data.events[i]);\n                        }\n                    }\n                } catch (err) {\n                    if (axios__WEBPACK_IMPORTED_MODULE_35__[\"default\"].isCancel(err)) {\n                        this._log(`_poll() - axios canceled request`);\n                        return;\n                    }\n                    /** client.doAxiosRequest will take care of TOKEN_EXPIRED error */ // @ts-ignore\n                    if (isConnectionIDError(err)) {\n                        this._log(`_poll() - ConnectionID error, connecting without ID...`);\n                        this._setState(ConnectionState.Disconnected);\n                        this.connect(true);\n                        return;\n                    }\n                    // @ts-ignore\n                    if (isAPIError(err) && !isErrorRetryable(err)) {\n                        this._setState(ConnectionState.Closed);\n                        return;\n                    }\n                    await sleep(retryInterval(this.consecutiveFailures));\n                }\n            }\n        };\n        /**\n         * connect try to open a longpoll request\n         * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n         */ this.connect = async (reconnect = false)=>{\n            if (this.state === ConnectionState.Connecting) {\n                this._log(\"connect() - connecting already in progress\", {\n                    reconnect\n                }, \"warn\");\n                return;\n            }\n            if (this.state === ConnectionState.Connected) {\n                this._log(\"connect() - already connected and polling\", {\n                    reconnect\n                }, \"warn\");\n                return;\n            }\n            this._setState(ConnectionState.Connecting);\n            this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n            try {\n                const { event } = await this._req({\n                    json: this.client._buildWSPayload()\n                }, {\n                    timeout: 8000\n                }, reconnect);\n                this._setState(ConnectionState.Connected);\n                this.connectionID = event.connection_id;\n                this.client.resolveConnectionId?.();\n                // @ts-expect-error\n                this.client.dispatchEvent(event);\n                this._poll();\n                return event;\n            } catch (err) {\n                this._setState(ConnectionState.Closed);\n                this.client.rejectConnectionId?.();\n                throw err;\n            }\n        };\n        /**\n         * isHealthy checks if there is a connectionID and connection is in Connected state\n         */ this.isHealthy = ()=>{\n            return !!this.connectionID && this.state === ConnectionState.Connected;\n        };\n        this.disconnect = async (timeout = 2000)=>{\n            removeConnectionEventListeners(this._onlineStatusChanged);\n            this._setState(ConnectionState.Disconnected);\n            this.cancelToken?.cancel(\"disconnect() is called\");\n            this.cancelToken = undefined;\n            const connection_id = this.connectionID;\n            this.connectionID = undefined;\n            try {\n                await this._req({\n                    close: true,\n                    connection_id\n                }, {\n                    timeout\n                }, false);\n                this._log(`disconnect() - Closed connectionID`);\n            } catch (err) {\n                this._log(`disconnect() - Failed`, {\n                    err\n                }, \"error\");\n            }\n        };\n        this.client = client;\n        this.state = ConnectionState.Init;\n        this.consecutiveFailures = 0;\n        addConnectionEventListeners(this._onlineStatusChanged);\n    }\n    _log(msg, extra = {}, level = \"info\") {\n        this.client.logger(level, \"WSConnectionFallback:\" + msg, {\n            ...extra\n        });\n    }\n    _setState(state) {\n        this._log(`_setState() - ${state}`);\n        // transition from connecting => connected\n        if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n            this.client.dispatchEvent({\n                type: \"connection.changed\",\n                online: true\n            });\n        }\n        if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n            this.client.dispatchEvent({\n                type: \"connection.changed\",\n                online: false\n            });\n        }\n        this.state = state;\n    }\n}\nconst logger = getLogger([\n    \"location\"\n]);\nconst HINT_URL = `https://hint.stream-io-video.com/`;\nconst getLocationHint = async (hintUrl = HINT_URL, timeout = 2000)=>{\n    const abortController = new AbortController();\n    const timeoutId = setTimeout(()=>abortController.abort(), timeout);\n    try {\n        const response = await fetch(hintUrl, {\n            method: \"HEAD\",\n            signal: abortController.signal\n        });\n        const awsPop = response.headers.get(\"x-amz-cf-pop\") || \"ERR\";\n        logger(\"debug\", `Location header: ${awsPop}`);\n        return awsPop.substring(0, 3); // AMS1-P2 -> AMS\n    } catch (e) {\n        logger(\"warn\", `Failed to get location hint from ${hintUrl}`, e);\n        return \"ERR\";\n    } finally{\n        clearTimeout(timeoutId);\n    }\n};\nclass StreamClient {\n    /**\n     * Initialize a client.\n     *\n     * @param {string} key - the api key\n     * @param {StreamClientOptions} [options] - additional options, here you can pass custom options to axios instance\n     * @param {string} [options.secret] - the api secret\n     * @param {boolean} [options.browser] - enforce the client to be in browser mode\n     * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n     * @param {Logger} [options.Logger] - custom logger\n     * @param {number} [options.timeout] - default to 3000\n     * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n     */ constructor(key, options){\n        this.listeners = {};\n        this.nextRequestAbortController = null;\n        this.devToken = (userID)=>{\n            return DevToken(userID);\n        };\n        this.getAuthType = ()=>{\n            return this.anonymous ? \"anonymous\" : \"jwt\";\n        };\n        this.setBaseURL = (baseURL)=>{\n            this.baseURL = baseURL;\n            this.wsBaseURL = this.baseURL.replace(\"http\", \"ws\").replace(\":3030\", \":8800\");\n        };\n        this.getLocationHint = async (hintUrl, timeout)=>{\n            const hint = await this.locationHint;\n            if (!hint || hint === \"ERR\") {\n                this.locationHint = getLocationHint(hintUrl ?? this.options.locationHintUrl, timeout ?? this.options.locationHintTimeout);\n                return this.locationHint;\n            }\n            return hint;\n        };\n        this._getConnectionID = ()=>this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n        this._hasConnectionID = ()=>Boolean(this._getConnectionID());\n        /**\n         * connectUser - Set the current user and open a WebSocket connection\n         *\n         * @param user Data about this user. IE {name: \"john\"}\n         * @param {TokenOrProvider} userTokenOrProvider Token or provider\n         *\n         * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n         */ this.connectUser = async (user, userTokenOrProvider)=>{\n            if (!user.id) {\n                throw new Error('The \"id\" field on the user is missing');\n            }\n            /**\n             * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n             * If the user id remains the same we don't throw error\n             */ if (this.userID === user.id && this.setUserPromise) {\n                this.logger(\"warn\", \"Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.\");\n                return this.setUserPromise;\n            }\n            if (this.userID) {\n                throw new Error(\"Use client.disconnect() before trying to connect as a different user. connectUser was called twice.\");\n            }\n            if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n                this.logger(\"warn\", 'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n            }\n            // we generate the client id client side\n            this.userID = user.id;\n            this.anonymous = false;\n            const setTokenPromise = this._setToken(user, userTokenOrProvider, this.anonymous);\n            this._setUser(user);\n            const wsPromise = this.openConnection();\n            this.setUserPromise = Promise.all([\n                setTokenPromise,\n                wsPromise\n            ]).then((result)=>result[1]);\n            try {\n                return await this.setUserPromise;\n            } catch (err) {\n                if (this.persistUserOnConnectionFailure) {\n                    // cleanup client to allow the user to retry connectUser again\n                    this.closeConnection();\n                } else {\n                    this.disconnectUser();\n                }\n                throw err;\n            }\n        };\n        this._setToken = (user, userTokenOrProvider, isAnonymous)=>this.tokenManager.setTokenOrProvider(userTokenOrProvider, user, isAnonymous);\n        this._setUser = (user)=>{\n            /**\n             * This one is used by the frontend. This is a copy of the current user object stored on backend.\n             * It contains reserved properties and own user properties which are not present in `this._user`.\n             */ this.user = user;\n            this.userID = user.id;\n            // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n            this._user = {\n                ...user\n            };\n        };\n        /**\n         * Disconnects the websocket connection, without removing the user set on client.\n         * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n         * to call client.openConnection to reconnect to websocket.\n         *\n         * This is mainly useful on mobile side. You can only receive push notifications\n         * if you don't have active websocket connection.\n         * So when your app goes to background, you can call `client.closeConnection`.\n         * And when app comes back to foreground, call `client.openConnection`.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.closeConnection = async (timeout)=>{\n            if (this.cleaningIntervalRef != null) {\n                clearInterval(this.cleaningIntervalRef);\n                this.cleaningIntervalRef = undefined;\n            }\n            await Promise.all([\n                this.wsConnection?.disconnect(timeout),\n                this.wsFallback?.disconnect(timeout)\n            ]);\n            return Promise.resolve();\n        };\n        /**\n         * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n         */ this.openConnection = async ()=>{\n            if (!this.userID) {\n                throw Error(\"UserWithId is not set on client, use client.connectUser or client.connectAnonymousUser instead\");\n            }\n            if (this.wsConnection?.isConnecting && this.wsPromise) {\n                this.logger(\"info\", \"client:openConnection() - connection already in progress\");\n                return this.wsPromise;\n            }\n            if ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID()) {\n                this.logger(\"info\", \"client:openConnection() - openConnection called twice, healthy connection already exists\");\n                return Promise.resolve();\n            }\n            this.connectionIdPromise = new Promise((resolve, reject)=>{\n                this.resolveConnectionId = resolve;\n                this.rejectConnectionId = reject;\n            });\n            this.clientID = `${this.userID}--${randomId()}`;\n            this.wsPromise = this.connect();\n            return this.wsPromise;\n        };\n        this._normalizeDate = (before)=>{\n            if (before instanceof Date) {\n                before = before.toISOString();\n            }\n            if (before === \"\") {\n                throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n            }\n            return before;\n        };\n        /**\n         * Disconnects the websocket and removes the user from client.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            this.logger(\"info\", \"client:disconnect() - Disconnecting the client\");\n            // remove the user specific fields\n            delete this.user;\n            delete this._user;\n            delete this.userID;\n            this.anonymous = false;\n            await this.closeConnection(timeout);\n            this.tokenManager.reset();\n            this.connectionIdPromise = undefined;\n            this.rejectConnectionId = undefined;\n            this.resolveConnectionId = undefined;\n        };\n        this.connectGuestUser = async (user)=>{\n            this.guestUserCreatePromise = this.doAxiosRequest(\"post\", \"/guest\", {\n                user: {\n                    ...user\n                }\n            }, {\n                publicEndpoint: true\n            });\n            const response = await this.guestUserCreatePromise;\n            this.guestUserCreatePromise.finally(()=>this.guestUserCreatePromise = undefined);\n            return this.connectUser(response.user, response.access_token);\n        };\n        /**\n         * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            this.connectionIdPromise = new Promise((resolve, reject)=>{\n                this.resolveConnectionId = resolve;\n                this.rejectConnectionId = reject;\n            });\n            this.anonymous = true;\n            await this._setToken(user, tokenOrProvider, this.anonymous);\n            this._setUser(user);\n            // some endpoints require a connection_id to be resolved.\n            // as anonymous users aren't allowed to open WS connections, we just\n            // resolve the connection_id here.\n            this.resolveConnectionId?.();\n        };\n        /**\n         * on - Listen to events on all channels and users your watching\n         *\n         * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n         *\n         * @param eventName The event type to listen for (optional)\n         * @param callback The callback to call\n         *\n         * @return  Returns a function which, when called, unsubscribes the event handler.\n         */ this.on = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger(\"debug\", `Adding listener for ${eventName} event`);\n            this.listeners[eventName]?.push(callback);\n            return ()=>{\n                this.off(eventName, callback);\n            };\n        };\n        /**\n         * off - Remove the event handler\n         */ this.off = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger(\"debug\", `Removing listener for ${eventName} event`);\n            this.listeners[eventName] = this.listeners[eventName]?.filter((value)=>value !== callback);\n        };\n        this._logApiRequest = (type, url, data, config)=>{\n            this.logger(\"trace\", `client: ${type} - Request - ${url}`, {\n                payload: data,\n                config\n            });\n        };\n        this._logApiResponse = (type, url, response)=>{\n            this.logger(\"trace\", `client:${type} - Response - url: ${url} > status ${response.status}`, {\n                response\n            });\n        };\n        this._logApiError = (type, url, error)=>{\n            this.logger(\"error\", `client:${type} - Error - url: ${url}`, {\n                url,\n                error\n            });\n        };\n        this.doAxiosRequest = async (type, url, data, options = {})=>{\n            if (!options.publicEndpoint) {\n                await Promise.all([\n                    this.tokenManager.tokenReady(),\n                    this.guestUserCreatePromise,\n                    this.connectionIdPromise\n                ]);\n            }\n            const requestConfig = this._enrichAxiosOptions(options);\n            try {\n                let response;\n                this._logApiRequest(type, url, data, requestConfig);\n                switch(type){\n                    case \"get\":\n                        response = await this.axiosInstance.get(url, requestConfig);\n                        break;\n                    case \"delete\":\n                        response = await this.axiosInstance.delete(url, requestConfig);\n                        break;\n                    case \"post\":\n                        response = await this.axiosInstance.post(url, data, requestConfig);\n                        break;\n                    case \"put\":\n                        response = await this.axiosInstance.put(url, data, requestConfig);\n                        break;\n                    case \"patch\":\n                        response = await this.axiosInstance.patch(url, data, requestConfig);\n                        break;\n                    case \"options\":\n                        response = await this.axiosInstance.options(url, requestConfig);\n                        break;\n                    default:\n                        throw new Error(\"Invalid request type\");\n                }\n                this._logApiResponse(type, url, response);\n                this.consecutiveFailures = 0;\n                return this.handleResponse(response);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            } catch (e /**TODO: generalize error types  */ ) {\n                e.client_request_id = requestConfig.headers?.[\"x-client-request-id\"];\n                this.consecutiveFailures += 1;\n                if (e.response) {\n                    this._logApiError(type, url, e.response);\n                    /** connection_fallback depends on this token expiration logic */ if (e.response.data.code === KnownCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n                        if (this.consecutiveFailures > 1) {\n                            await sleep(retryInterval(this.consecutiveFailures));\n                        }\n                        await this.tokenManager.loadToken();\n                        return await this.doAxiosRequest(type, url, data, options);\n                    }\n                    return this.handleResponse(e.response);\n                } else {\n                    this._logApiError(type, url, e);\n                    // eslint-disable-next-line no-throw-literal\n                    throw e;\n                }\n            }\n        };\n        this.get = (url, params)=>{\n            return this.doAxiosRequest(\"get\", url, null, {\n                params\n            });\n        };\n        this.put = (url, data, params)=>{\n            return this.doAxiosRequest(\"put\", url, data, {\n                params\n            });\n        };\n        this.post = (url, data, params)=>{\n            return this.doAxiosRequest(\"post\", url, data, {\n                params\n            });\n        };\n        this.patch = (url, data, params)=>{\n            return this.doAxiosRequest(\"patch\", url, data, {\n                params\n            });\n        };\n        this.delete = (url, params)=>{\n            return this.doAxiosRequest(\"delete\", url, null, {\n                params\n            });\n        };\n        this.errorFromResponse = (response)=>{\n            let err;\n            err = new ErrorFromResponse(`Stream error HTTP code: ${response.status}`);\n            if (response.data && response.data.code) {\n                err = new Error(`Stream error code ${response.data.code}: ${response.data.message}`);\n                err.code = response.data.code;\n            }\n            err.response = response;\n            err.status = response.status;\n            return err;\n        };\n        this.handleResponse = (response)=>{\n            const data = response.data;\n            if (isErrorResponse(response)) {\n                throw this.errorFromResponse(response);\n            }\n            return data;\n        };\n        this.dispatchEvent = (event)=>{\n            if (!event.received_at) event.received_at = new Date();\n            this.logger(\"debug\", `Dispatching event: ${event.type}`, event);\n            if (!this.listeners) return;\n            // call generic listeners\n            for (const listener of this.listeners.all || []){\n                listener(event);\n            }\n            // call type specific listeners\n            for (const listener of this.listeners[event.type] || []){\n                listener(event);\n            }\n        };\n        /**\n         * @private\n         */ this.connect = async ()=>{\n            if (!this.userID || !this._user) {\n                throw Error(\"Call connectUser or connectAnonymousUser before starting the connection\");\n            }\n            if (!this.wsBaseURL) {\n                throw Error(\"Websocket base url not set\");\n            }\n            if (!this.clientID) {\n                throw Error(\"clientID is not set\");\n            }\n            if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n                this._sayHi();\n            }\n            // The StableWSConnection handles all the reconnection logic.\n            if (this.options.wsConnection && this.node) {\n                // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n                this.options.wsConnection.setClient(this);\n                this.wsConnection = this.options.wsConnection;\n            } else {\n                this.wsConnection = new StableWSConnection(this);\n            }\n            try {\n                // if fallback is used before, continue using it instead of waiting for WS to fail\n                if (this.wsFallback) {\n                    return await this.wsFallback.connect();\n                }\n                this.logger(\"info\", \"StreamClient.connect: this.wsConnection.connect()\");\n                // if WSFallback is enabled, ws connect should timeout faster so fallback can try\n                return await this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);\n            } catch (err) {\n                // run fallback only if it's WS/Network error and not a normal API error\n                // make sure browser is online before even trying the longpoll\n                if (this.options.enableWSFallback && // @ts-ignore\n                isWSFailure(err) && isOnline(this.logger)) {\n                    this.logger(\"warn\", \"client:connect() - WS failed, fallback to longpoll\");\n                    this.dispatchEvent({\n                        type: \"transport.changed\",\n                        mode: \"longpoll\"\n                    });\n                    this.wsConnection._destroyCurrentWSConnection();\n                    this.wsConnection.disconnect().then(); // close WS so no retry\n                    this.wsFallback = new WSConnectionFallback(this);\n                    return await this.wsFallback.connect();\n                }\n                throw err;\n            }\n        };\n        /**\n         * Check the connectivity with server for warmup purpose.\n         *\n         * @private\n         */ this._sayHi = ()=>{\n            const client_request_id = randomId();\n            const opts = {\n                headers: axios__WEBPACK_IMPORTED_MODULE_1__.AxiosHeaders.from({\n                    \"x-client-request-id\": client_request_id\n                })\n            };\n            this.doAxiosRequest(\"get\", this.baseURL + \"/hi\", null, opts).catch((e)=>{\n                if (this.options.enableInsights) {\n                    postInsights(\"http_hi_failed\", {\n                        api_key: this.key,\n                        err: e,\n                        client_request_id\n                    });\n                }\n            });\n        };\n        this.getUserAgent = ()=>{\n            const version = \"1.5.2\";\n            return this.userAgent || `stream-video-javascript-client-${this.node ? \"node\" : \"browser\"}-${version}`;\n        };\n        this.setUserAgent = (userAgent)=>{\n            this.userAgent = userAgent;\n        };\n        /**\n         * _isUsingServerAuth - Returns true if we're using server side auth\n         */ this._isUsingServerAuth = ()=>!!this.secret;\n        this._enrichAxiosOptions = (options = {\n            params: {},\n            headers: {},\n            config: {}\n        })=>{\n            const token = options.publicEndpoint && !this.user ? undefined : this._getToken();\n            const authorization = token ? {\n                Authorization: token\n            } : undefined;\n            let signal = null;\n            if (this.nextRequestAbortController !== null) {\n                signal = this.nextRequestAbortController.signal;\n                this.nextRequestAbortController = null;\n            }\n            if (!options.headers?.[\"x-client-request-id\"]) {\n                options.headers = {\n                    ...options.headers,\n                    \"x-client-request-id\": randomId()\n                };\n            }\n            return {\n                params: {\n                    user_id: this.userID,\n                    connection_id: this._getConnectionID(),\n                    api_key: this.key,\n                    ...options.params\n                },\n                headers: {\n                    ...authorization,\n                    \"stream-auth-type\": options.publicEndpoint && !this.user ? \"anonymous\" : this.getAuthType(),\n                    \"X-Stream-Client\": this.getUserAgent(),\n                    ...options.headers\n                },\n                ...signal ? {\n                    signal\n                } : {},\n                ...options.config,\n                ...this.options.axiosRequestConfig\n            };\n        };\n        this._getToken = ()=>{\n            if (!this.tokenManager) return null;\n            return this.tokenManager.getToken();\n        };\n        /**\n         * encode ws url payload\n         * @private\n         * @returns json string\n         */ this._buildWSPayload = (client_request_id)=>{\n            return JSON.stringify({\n                user_id: this.userID,\n                user_details: this._user,\n                client_request_id\n            });\n        };\n        /**\n         * creates an abort controller that will be used by the next HTTP Request.\n         */ this.createAbortControllerForNextRequest = ()=>{\n            return this.nextRequestAbortController = new AbortController();\n        };\n        // set the key\n        this.key = key;\n        // set the secret\n        this.secret = options?.secret;\n        // set the options... and figure out defaults...\n        const inputOptions = options ? options : {\n            browser: \"undefined\" !== \"undefined\"\n        };\n        this.browser = inputOptions.browser || \"undefined\" !== \"undefined\";\n        this.node = !this.browser;\n        if (this.browser) {\n            this.locationHint = getLocationHint(options?.locationHintUrl, options?.locationHintTimeout);\n        }\n        this.options = {\n            timeout: 5000,\n            withCredentials: false,\n            warmUp: false,\n            ...inputOptions\n        };\n        if (this.node && !this.options.httpsAgent) {\n            this.options.httpsAgent = new (https__WEBPACK_IMPORTED_MODULE_5___default().Agent)({\n                keepAlive: true,\n                keepAliveMsecs: 3000\n            });\n        }\n        this.setBaseURL(this.options.baseURL || \"https://video.stream-io-api.com/video\");\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_RUN) {\n            this.setBaseURL(\"http://localhost:3030/video\");\n        }\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_HOST) {\n            this.setBaseURL(`http://${process.env.STREAM_LOCAL_TEST_HOST}/video`);\n        }\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_35__[\"default\"].create({\n            ...this.options,\n            baseURL: this.baseURL\n        });\n        // WS connection is initialized when setUser is called\n        this.wsConnection = null;\n        this.wsPromise = null;\n        this.setUserPromise = null;\n        // mapping between channel groups and configs\n        this.anonymous = false;\n        this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n        // If it is a server-side client, then lets initialize the tokenManager, since token will be\n        // generated from secret.\n        this.tokenManager = new TokenManager(this.secret);\n        this.consecutiveFailures = 0;\n        this.insightMetrics = new InsightMetrics();\n        this.defaultWSTimeoutWithFallback = 6000;\n        this.defaultWSTimeout = 15000;\n        this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : ()=>null;\n    }\n}\n/**\n * A `StreamVideoClient` instance lets you communicate with our API, and authenticate users.\n */ class StreamVideoClient {\n    constructor(apiKeyOrArgs, opts){\n        this.logLevel = \"warn\";\n        this.eventHandlersToUnregister = [];\n        /**\n         * Disconnects the currently connected user from the client.\n         *\n         * If the connection is successfully disconnected, the connected user [state variable](#readonlystatestore) will be updated accordingly\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            if (!this.streamClient.user && !this.connectionPromise) {\n                return;\n            }\n            const userId = this.streamClient.user?.id;\n            const disconnectUser = ()=>this.streamClient.disconnectUser(timeout);\n            this.disconnectionPromise = this.connectionPromise ? this.connectionPromise.then(()=>disconnectUser()) : disconnectUser();\n            this.disconnectionPromise.finally(()=>this.disconnectionPromise = undefined);\n            await this.disconnectionPromise;\n            if (userId) {\n                StreamVideoClient._instanceMap.delete(userId);\n            }\n            this.eventHandlersToUnregister.forEach((unregister)=>unregister());\n            this.eventHandlersToUnregister = [];\n            this.writeableStateStore.setConnectedUser(undefined);\n        };\n        /**\n         * You can subscribe to WebSocket events provided by the API.\n         * To remove a subscription, call the `off` method or, execute the returned unsubscribe function.\n         * Please note that subscribing to WebSocket events is an advanced use-case, for most use-cases it should be enough to watch for changes in the reactive [state store](#readonlystatestore).\n         *\n         * @param eventName the event name or 'all'.\n         * @param callback the callback which will be called when the event is emitted.\n         * @returns an unsubscribe function.\n         */ this.on = (eventName, callback)=>{\n            return this.streamClient.on(eventName, callback);\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param callback the callback which was passed to the `on` method.\n         */ this.off = (eventName, callback)=>{\n            return this.streamClient.off(eventName, callback);\n        };\n        /**\n         * Creates a new call.\n         *\n         * @param type the type of the call.\n         * @param id the id of the call.\n         */ this.call = (type, id)=>{\n            return new Call({\n                streamClient: this.streamClient,\n                id: id,\n                type: type,\n                clientStore: this.writeableStateStore\n            });\n        };\n        /**\n         * Creates a new guest user with the given data.\n         *\n         * @param data the data for the guest user.\n         */ this.createGuestUser = async (data)=>{\n            return this.streamClient.doAxiosRequest(\"post\", \"/guest\", data, {\n                publicEndpoint: true\n            });\n        };\n        /**\n         * Will query the API for calls matching the given filters.\n         *\n         * @param data the query data.\n         */ this.queryCalls = async (data = {})=>{\n            const response = await this.streamClient.post(\"/calls\", data);\n            const calls = [];\n            for (const c of response.calls){\n                const call = new Call({\n                    streamClient: this.streamClient,\n                    id: c.call.id,\n                    type: c.call.type,\n                    members: c.members,\n                    ownCapabilities: c.own_capabilities,\n                    watching: data.watch,\n                    clientStore: this.writeableStateStore\n                });\n                call.state.updateFromCallResponse(c.call);\n                await call.applyDeviceConfig();\n                if (data.watch) {\n                    this.writeableStateStore.registerCall(call);\n                }\n                calls.push(call);\n            }\n            return {\n                ...response,\n                calls: calls\n            };\n        };\n        /**\n         * Retrieve the list of available call statistics reports matching a particular condition.\n         *\n         * @param data Filter and sort conditions for retrieving available call report summaries.\n         * @returns List with summary of available call reports matching the condition.\n         */ this.queryCallStats = async (data = {})=>{\n            return this.streamClient.post(`/call/stats`, data);\n        };\n        /**\n         * Returns a list of available data centers available for hosting calls.\n         */ this.edges = async ()=>{\n            return this.streamClient.get(`/edges`);\n        };\n        /**\n         * addDevice - Adds a push device for a user.\n         *\n         * @param {string} id the device id\n         * @param {string} push_provider the push provider name (eg. apn, firebase)\n         * @param {string} push_provider_name user provided push provider name\n         * @param {string} [userID] the user id (defaults to current user)\n         * @param {boolean} [voip_token] enables use of VoIP token for push notifications on iOS platform\n         */ this.addDevice = async (id, push_provider, push_provider_name, userID, voip_token)=>{\n            return await this.streamClient.post(\"/devices\", {\n                id,\n                push_provider,\n                voip_token,\n                ...userID != null ? {\n                    user_id: userID\n                } : {},\n                ...push_provider_name != null ? {\n                    push_provider_name\n                } : {}\n            });\n        };\n        /**\n         * getDevices - Returns the devices associated with a current user\n         * @param {string} [userID] User ID. Only works on serverside\n         */ this.getDevices = async (userID)=>{\n            return await this.streamClient.get(\"/devices\", userID ? {\n                user_id: userID\n            } : {});\n        };\n        /**\n         * removeDevice - Removes the device with the given id.\n         *\n         * @param {string} id The device id\n         * @param {string} [userID] The user id. Only specify this for serverside requests\n         */ this.removeDevice = async (id, userID)=>{\n            return await this.streamClient.delete(\"/devices\", {\n                id,\n                ...userID ? {\n                    user_id: userID\n                } : {}\n            });\n        };\n        /**\n         * A callback that can be used to create ringing calls from push notifications. If the call already exists, it will do nothing.\n         * @param call_cid\n         * @returns\n         */ this.onRingingCall = async (call_cid)=>{\n            // if we find the call and is already ringing, we don't need to create a new call\n            // as client would have received the call.ring state because the app had WS alive when receiving push notifications\n            let call = this.readOnlyStateStore.calls.find((c)=>c.cid === call_cid && c.ringing);\n            if (!call) {\n                // if not it means that WS is not alive when receiving the push notifications and we need to fetch the call\n                const [callType, callId] = call_cid.split(\":\");\n                call = new Call({\n                    streamClient: this.streamClient,\n                    type: callType,\n                    id: callId,\n                    clientStore: this.writeableStateStore,\n                    ringing: true\n                });\n                await call.get();\n            }\n            return call;\n        };\n        /**\n         * Connects the given anonymous user to the client.\n         *\n         * @param user the user to connect.\n         * @param tokenOrProvider a token or a function that returns a token.\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            const connectAnonymousUser = ()=>this.streamClient.connectAnonymousUser(user, tokenOrProvider);\n            this.connectionPromise = this.disconnectionPromise ? this.disconnectionPromise.then(()=>connectAnonymousUser()) : connectAnonymousUser();\n            this.connectionPromise.finally(()=>this.connectionPromise = undefined);\n            return this.connectionPromise;\n        };\n        let logger = logToConsole;\n        let logLevel = \"warn\";\n        if (typeof apiKeyOrArgs === \"string\") {\n            logLevel = opts?.logLevel || logLevel;\n            logger = opts?.logger || logger;\n        } else {\n            logLevel = apiKeyOrArgs.options?.logLevel || logLevel;\n            logger = apiKeyOrArgs.options?.logger || logger;\n        }\n        setLogger(logger, logLevel);\n        this.logger = getLogger([\n            \"client\"\n        ]);\n        if (typeof apiKeyOrArgs === \"string\") {\n            this.streamClient = new StreamClient(apiKeyOrArgs, {\n                persistUserOnConnectionFailure: true,\n                ...opts,\n                logLevel,\n                logger: this.logger\n            });\n        } else {\n            this.streamClient = new StreamClient(apiKeyOrArgs.apiKey, {\n                persistUserOnConnectionFailure: true,\n                ...apiKeyOrArgs.options,\n                logLevel,\n                logger: this.logger\n            });\n            const sdkInfo = getSdkInfo();\n            if (sdkInfo) {\n                this.streamClient.setUserAgent(this.streamClient.getUserAgent() + `-video-${SdkType[sdkInfo.type].toLowerCase()}-sdk-${sdkInfo.major}.${sdkInfo.minor}.${sdkInfo.patch}`);\n            }\n        }\n        this.writeableStateStore = new StreamVideoWriteableStateStore();\n        this.readOnlyStateStore = new StreamVideoReadOnlyStateStore(this.writeableStateStore);\n        if (typeof apiKeyOrArgs !== \"string\") {\n            const user = apiKeyOrArgs.user;\n            const token = apiKeyOrArgs.token || apiKeyOrArgs.tokenProvider;\n            if (user) {\n                let id = user.id;\n                if (user.type === \"anonymous\") {\n                    id = \"!anon\";\n                }\n                if (id) {\n                    if (StreamVideoClient._instanceMap.has(apiKeyOrArgs.apiKey + id)) {\n                        this.logger(\"warn\", `A StreamVideoClient already exists for ${user.type === \"anonymous\" ? \"an anyonymous user\" : id}; Prefer using getOrCreateInstance method`);\n                    }\n                    user.id = id;\n                    StreamVideoClient._instanceMap.set(apiKeyOrArgs.apiKey + id, this);\n                }\n                this.connectUser(user, token).catch((err)=>{\n                    this.logger(\"error\", \"Failed to connect\", err);\n                });\n            }\n        }\n    }\n    static getOrCreateInstance(args) {\n        const user = args.user;\n        if (!user.id) {\n            if (args.user.type === \"anonymous\") {\n                user.id = \"!anon\";\n            } else {\n                throw new Error(\"User ID is required for a non-anonymous user\");\n            }\n        }\n        if (!args.token && !args.tokenProvider) {\n            if (args.user.type !== \"anonymous\" && args.user.type !== \"guest\") {\n                throw new Error(\"TokenProvider or token is required for a user that is not a guest or anonymous\");\n            }\n        }\n        let instance = StreamVideoClient._instanceMap.get(args.apiKey + user.id);\n        if (!instance) {\n            instance = new StreamVideoClient({\n                ...args,\n                user\n            });\n        }\n        return instance;\n    }\n    /**\n     * Return the reactive state store, use this if you want to be notified about changes to the client state\n     */ get state() {\n        return this.readOnlyStateStore;\n    }\n    /**\n     * Connects the given user to the client.\n     * Only one user can connect at a time, if you want to change users, call `disconnectUser` before connecting a new user.\n     * If the connection is successful, the connected user [state variable](#readonlystatestore) will be updated accordingly.\n     *\n     * @param user the user to connect.\n     * @param token a token or a function that returns a token.\n     */ async connectUser(user, token) {\n        if (user.type === \"anonymous\") {\n            user.id = \"!anon\";\n            return this.connectAnonymousUser(user, token);\n        }\n        let connectUser = ()=>{\n            return this.streamClient.connectUser(user, token);\n        };\n        if (user.type === \"guest\") {\n            connectUser = async ()=>{\n                return this.streamClient.connectGuestUser(user);\n            };\n        }\n        this.connectionPromise = this.disconnectionPromise ? this.disconnectionPromise.then(()=>connectUser()) : connectUser();\n        this.connectionPromise?.finally(()=>this.connectionPromise = undefined);\n        const connectUserResponse = await this.connectionPromise;\n        // connectUserResponse will be void if connectUser called twice for the same user\n        if (connectUserResponse?.me) {\n            this.writeableStateStore.setConnectedUser(connectUserResponse.me);\n        }\n        this.eventHandlersToUnregister.push(this.on(\"connection.changed\", (event)=>{\n            if (event.online) {\n                const callsToReWatch = this.writeableStateStore.calls.filter((call)=>call.watching).map((call)=>call.cid);\n                this.logger(\"info\", `Rewatching calls after connection changed ${callsToReWatch.join(\", \")}`);\n                if (callsToReWatch.length > 0) {\n                    this.queryCalls({\n                        watch: true,\n                        filter_conditions: {\n                            cid: {\n                                $in: callsToReWatch\n                            }\n                        },\n                        sort: [\n                            {\n                                field: \"cid\",\n                                direction: 1\n                            }\n                        ]\n                    }).catch((err)=>{\n                        this.logger(\"error\", \"Failed to re-watch calls\", err);\n                    });\n                }\n            }\n        }));\n        this.eventHandlersToUnregister.push(this.on(\"call.created\", (event)=>{\n            const { call, members } = event;\n            if (user.id === call.created_by.id) {\n                this.logger(\"warn\", \"Received `call.created` sent by the current user\");\n                return;\n            }\n            this.logger(\"info\", `New call created and registered: ${call.cid}`);\n            const newCall = new Call({\n                streamClient: this.streamClient,\n                type: call.type,\n                id: call.id,\n                members,\n                clientStore: this.writeableStateStore\n            });\n            newCall.state.updateFromCallResponse(call);\n            this.writeableStateStore.registerCall(newCall);\n        }));\n        this.eventHandlersToUnregister.push(this.on(\"call.ring\", async (event)=>{\n            const { call, members } = event;\n            if (user.id === call.created_by.id) {\n                this.logger(\"debug\", \"Received `call.ring` sent by the current user so ignoring the event\");\n                return;\n            }\n            // The call might already be tracked by the client,\n            // if `call.created` was received before `call.ring`.\n            // In that case, we cleanup the already tracked call.\n            const prevCall = this.writeableStateStore.findCall(call.type, call.id);\n            await prevCall?.leave({\n                reason: \"cleaning-up in call.ring\"\n            });\n            // we create a new call\n            const theCall = new Call({\n                streamClient: this.streamClient,\n                type: call.type,\n                id: call.id,\n                members,\n                clientStore: this.writeableStateStore,\n                ringing: true\n            });\n            theCall.state.updateFromCallResponse(call);\n            // we fetch the latest metadata for the call from the server\n            await theCall.get();\n            this.writeableStateStore.registerCall(theCall);\n        }));\n        return connectUserResponse;\n    }\n    /**\n     * addDevice - Adds a push device for a user.\n     *\n     * @param {string} id the device id\n     * @param {string} push_provider the push provider name (eg. apn, firebase)\n     * @param {string} push_provider_name user provided push provider name\n     * @param {string} [userID] the user id (defaults to current user)\n     */ async addVoipDevice(id, push_provider, push_provider_name, userID) {\n        return await this.addDevice(id, push_provider, push_provider_name, userID, true);\n    }\n}\nStreamVideoClient._instanceMap = new Map();\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-filters-web/dist/index.es.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stream-io/video-filters-web/dist/index.es.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SegmentationLevel: () => (/* binding */ SegmentationLevel),\n/* harmony export */   createRenderer: () => (/* binding */ createRenderer),\n/* harmony export */   isPlatformSupported: () => (/* binding */ isPlatformSupported),\n/* harmony export */   loadTFLite: () => (/* binding */ loadTFLite)\n/* harmony export */ });\n/* harmony import */ var wasm_feature_detect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-feature-detect */ \"(ssr)/./node_modules/wasm-feature-detect/dist/esm/index.js\");\n\n\n/**\n * Checks if the current platform is a mobile device.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n */\nconst isMobile = () => /Mobi/i.test(navigator.userAgent);\n/**\n * Runs a check to see if the current platform supports\n * the necessary APIs required for the video filters.\n */\nconst isPlatformSupported = async () => typeof document !== 'undefined' &&\n    typeof window !== 'undefined' &&\n    typeof navigator !== 'undefined' &&\n    !isMobile() && // we don't support mobile devices yet due to performance issues\n    typeof WebAssembly !== 'undefined' &&\n    !!window.WebGL2RenderingContext && // WebGL2 is required for the video filters\n    !!document.createElement('canvas').getContext('webgl2') &&\n    (await (0,wasm_feature_detect__WEBPACK_IMPORTED_MODULE_0__.simd)()); // SIMD is required for the wasm module\n\n/**\n * Use it along with boyswan.glsl-literal VSCode extension\n * to get GLSL syntax highlighting.\n * https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal\n *\n * On VSCode OSS, boyswan.glsl-literal requires slevesque.shader extension\n * to be installed as well.\n * https://marketplace.visualstudio.com/items?itemName=slevesque.shader\n */\nconst glsl = String.raw;\nfunction createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer) {\n    const program = createProgram(gl, vertexShader, fragmentShader);\n    const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n    const texCoordAttributeLocation = gl.getAttribLocation(program, 'a_texCoord');\n    gl.enableVertexAttribArray(texCoordAttributeLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.vertexAttribPointer(texCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n    return program;\n}\nfunction createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw new Error(`Could not link WebGL program: ${gl.getProgramInfoLog(program)}`);\n    }\n    return program;\n}\nfunction compileShader(gl, shaderType, shaderSource) {\n    const shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        throw new Error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`);\n    }\n    return shader;\n}\nfunction createTexture(gl, internalformat, width, height, minFilter = gl.NEAREST, magFilter = gl.NEAREST) {\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, width, height);\n    return texture;\n}\nasync function readPixelsAsync(gl, x, y, width, height, format, type, dest) {\n    const buf = gl.createBuffer();\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n    gl.bufferData(gl.PIXEL_PACK_BUFFER, dest.byteLength, gl.STREAM_READ);\n    gl.readPixels(x, y, width, height, format, type, 0);\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n    await getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dest);\n    gl.deleteBuffer(buf);\n    return dest;\n}\nasync function getBufferSubDataAsync(gl, target, buffer, srcByteOffset, dstBuffer, dstOffset, length) {\n    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    const res = await clientWaitAsync(gl, sync);\n    gl.deleteSync(sync);\n    if (res !== gl.WAIT_FAILED) {\n        gl.bindBuffer(target, buffer);\n        gl.getBufferSubData(target, srcByteOffset, dstBuffer, dstOffset, length);\n        gl.bindBuffer(target, null);\n    }\n}\nfunction clientWaitAsync(gl, sync) {\n    return new Promise((resolve) => {\n        function test() {\n            const res = gl.clientWaitSync(sync, 0, 0);\n            if (res === gl.WAIT_FAILED) {\n                resolve(res);\n                return;\n            }\n            if (res === gl.TIMEOUT_EXPIRED) {\n                setTimeout(test);\n                return;\n            }\n            resolve(res);\n        }\n        setTimeout(test);\n    });\n}\n\nfunction buildBackgroundBlurStage(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel) {\n    const blurPass = buildBlurPass(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel);\n    const blendPass = buildBlendPass(gl, positionBuffer, texCoordBuffer, canvas);\n    function render() {\n        blurPass.render();\n        blendPass.render();\n    }\n    function updateCoverage(coverage) {\n        blendPass.updateCoverage(coverage);\n    }\n    function cleanUp() {\n        blendPass.cleanUp();\n        blurPass.cleanUp();\n    }\n    return {\n        render,\n        updateCoverage,\n        cleanUp,\n    };\n}\nfunction buildBlurPass(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel) {\n    const sigma = typeof blurLevel === 'number'\n        ? blurLevel\n        : blurLevel === 'low'\n            ? 2\n            : blurLevel === 'medium'\n                ? 4\n                : 6;\n    const windowSize = Math.max(1, Math.floor(sigma * 3));\n    const offset = new Array(windowSize).fill(0).map((v, index) => index);\n    const variance = sigma ** 2;\n    const weights = offset.map((x) => {\n        var m = sigma * Math.sqrt(2 * Math.PI);\n        var e = Math.exp(-(x ** 2) / (2 * variance));\n        return e / m;\n    });\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform vec2 u_texelSize;\n\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    const float offset[${windowSize}] = float[](${offset.map((i) => i.toFixed(10)).join(', ')});\n    const float weight[${windowSize}] = float[](${weights.map((i) => i.toFixed(10)).join(', ')});\n\n    void main() {\n      vec4 centerColor = texture(u_inputFrame, v_texCoord);\n      float personMask = texture(u_personMask, v_texCoord).a;\n\n      vec4 frameColor = centerColor * weight[0] * (1.0 - personMask);\n\n      for (int i = 1; i < ${windowSize}; i++) {\n        vec2 offset = vec2(offset[i]) * u_texelSize;\n\n        vec2 texCoord = v_texCoord + offset;\n        frameColor += texture(u_inputFrame, texCoord)\n           * weight[i]\n           * (1.0 - texture(u_personMask, texCoord).a);\n\n        texCoord = v_texCoord - offset;\n        frameColor += texture(u_inputFrame, texCoord)\n          * weight[i]\n          * (1.0 - texture(u_personMask, texCoord).a);\n      }\n      outColor = vec4(frameColor.rgb + (1.0 - frameColor.a) * centerColor.rgb, 1.0);\n    }\n  `;\n    const scale = 0.5;\n    const outputWidth = canvas.width * scale;\n    const outputHeight = canvas.height * scale;\n    const texelWidth = 1 / outputWidth;\n    const texelHeight = 1 / outputHeight;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const personMaskLocation = gl.getUniformLocation(program, 'u_personMask');\n    const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize');\n    const texture1 = createTexture(gl, gl.RGBA8, outputWidth, outputHeight, gl.NEAREST, \n    // @ts-expect-error types are incomplete\n    gl.LINEAR);\n    const texture2 = createTexture(gl, gl.RGBA8, outputWidth, outputHeight, gl.NEAREST, \n    // @ts-expect-error types are incomplete\n    gl.LINEAR);\n    const frameBuffer1 = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture1, 0);\n    const frameBuffer2 = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture2, 0);\n    gl.useProgram(program);\n    gl.uniform1i(personMaskLocation, 1);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.uniform1i(inputFrameLocation, 0);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, personMaskTexture);\n        for (let i = 0; i < 3; i++) {\n            gl.uniform2f(texelSizeLocation, 0, texelHeight);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n            gl.activeTexture(gl.TEXTURE2);\n            gl.bindTexture(gl.TEXTURE_2D, texture1);\n            gl.uniform1i(inputFrameLocation, 2);\n            gl.uniform2f(texelSizeLocation, texelWidth, 0);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n            gl.bindTexture(gl.TEXTURE_2D, texture2);\n        }\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer2);\n        gl.deleteFramebuffer(frameBuffer1);\n        gl.deleteTexture(texture2);\n        gl.deleteTexture(texture1);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return {\n        render,\n        cleanUp,\n    };\n}\nfunction buildBlendPass(gl, positionBuffer, texCoordBuffer, canvas) {\n    const vertexShaderSource = glsl `#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `;\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_blurredInputFrame;\n    uniform vec2 u_coverage;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec3 color = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 blurredColor = texture(u_blurredInputFrame, v_texCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(mix(blurredColor, color, personMask), 1.0);\n    }\n  `;\n    const { width: outputWidth, height: outputHeight } = canvas;\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const personMaskLocation = gl.getUniformLocation(program, 'u_personMask');\n    const blurredInputFrame = gl.getUniformLocation(program, 'u_blurredInputFrame');\n    const coverageLocation = gl.getUniformLocation(program, 'u_coverage');\n    gl.useProgram(program);\n    gl.uniform1i(inputFrameLocation, 0);\n    gl.uniform1i(personMaskLocation, 1);\n    gl.uniform1i(blurredInputFrame, 2);\n    gl.uniform2f(coverageLocation, 0, 1);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function updateCoverage(coverage) {\n        gl.useProgram(program);\n        gl.uniform2f(coverageLocation, coverage[0], coverage[1]);\n    }\n    function cleanUp() {\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n        gl.deleteShader(vertexShader);\n    }\n    return {\n        render,\n        updateCoverage,\n        cleanUp,\n    };\n}\n\nfunction buildBackgroundImageStage(gl, positionBuffer, texCoordBuffer, personMaskTexture, backgroundImage, canvas) {\n    const vertexShaderSource = glsl `#version 300 es\n\n    uniform vec2 u_backgroundScale;\n    uniform vec2 u_backgroundOffset;\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n    out vec2 v_backgroundCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n      v_backgroundCoord = a_texCoord * u_backgroundScale + u_backgroundOffset;\n    }\n  `;\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_background;\n    uniform vec2 u_coverage;\n    uniform float u_lightWrapping;\n    uniform float u_blendMode;\n\n    in vec2 v_texCoord;\n    in vec2 v_backgroundCoord;\n\n    out vec4 outColor;\n\n    vec3 screen(vec3 a, vec3 b) {\n      return 1.0 - (1.0 - a) * (1.0 - b);\n    }\n\n    vec3 linearDodge(vec3 a, vec3 b) {\n      return a + b;\n    }\n\n    void main() {\n      vec3 frameColor = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 backgroundColor = texture(u_background, v_backgroundCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      float lightWrapMask = 1.0 - max(0.0, personMask - u_coverage.y) / (1.0 - u_coverage.y);\n      vec3 lightWrap = u_lightWrapping * lightWrapMask * backgroundColor;\n\n      frameColor = u_blendMode * linearDodge(frameColor, lightWrap)\n        + (1.0 - u_blendMode) * screen(frameColor, lightWrap);\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(frameColor * personMask + backgroundColor * (1.0 - personMask), 1.0);\n    }\n  `;\n    const { width: outputWidth, height: outputHeight } = canvas;\n    const outputRatio = outputWidth / outputHeight;\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const backgroundScaleLocation = gl.getUniformLocation(program, 'u_backgroundScale');\n    const backgroundOffsetLocation = gl.getUniformLocation(program, 'u_backgroundOffset');\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const personMaskLocation = gl.getUniformLocation(program, 'u_personMask');\n    const backgroundLocation = gl.getUniformLocation(program, 'u_background');\n    const coverageLocation = gl.getUniformLocation(program, 'u_coverage');\n    const lightWrappingLocation = gl.getUniformLocation(program, 'u_lightWrapping');\n    const blendModeLocation = gl.getUniformLocation(program, 'u_blendMode');\n    gl.useProgram(program);\n    gl.uniform2f(backgroundScaleLocation, 1, 1);\n    gl.uniform2f(backgroundOffsetLocation, 0, 0);\n    gl.uniform1i(inputFrameLocation, 0);\n    gl.uniform1i(personMaskLocation, 1);\n    gl.uniform2f(coverageLocation, 0, 1);\n    gl.uniform1f(lightWrappingLocation, 0);\n    gl.uniform1f(blendModeLocation, 0);\n    let backgroundTexture = null;\n    // TODO Find a better to handle background being loaded\n    if (backgroundImage?.complete) {\n        updateBackgroundImage(backgroundImage);\n    }\n    else if (backgroundImage) {\n        backgroundImage.onload = () => {\n            updateBackgroundImage(backgroundImage);\n        };\n    }\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, personMaskTexture);\n        if (backgroundTexture !== null) {\n            gl.activeTexture(gl.TEXTURE2);\n            gl.bindTexture(gl.TEXTURE_2D, backgroundTexture);\n            // TODO Handle correctly the background not loaded yet\n            gl.uniform1i(backgroundLocation, 2);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function updateBackgroundImage(bgImage) {\n        backgroundTexture = createTexture(gl, gl.RGBA8, bgImage.naturalWidth, bgImage.naturalHeight, \n        // @ts-expect-error types are incomplete\n        gl.LINEAR, gl.LINEAR);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, bgImage.naturalWidth, bgImage.naturalHeight, gl.RGBA, gl.UNSIGNED_BYTE, bgImage);\n        let xOffset = 0;\n        let yOffset = 0;\n        let backgroundWidth = bgImage.naturalWidth;\n        let backgroundHeight = bgImage.naturalHeight;\n        const backgroundRatio = backgroundWidth / backgroundHeight;\n        if (backgroundRatio < outputRatio) {\n            backgroundHeight = backgroundWidth / outputRatio;\n            yOffset = (bgImage.naturalHeight - backgroundHeight) / 2;\n        }\n        else {\n            backgroundWidth = backgroundHeight * outputRatio;\n            xOffset = (bgImage.naturalWidth - backgroundWidth) / 2;\n        }\n        const xScale = backgroundWidth / bgImage.naturalWidth;\n        const yScale = backgroundHeight / bgImage.naturalHeight;\n        xOffset /= bgImage.naturalWidth;\n        yOffset /= bgImage.naturalHeight;\n        gl.uniform2f(backgroundScaleLocation, xScale, yScale);\n        gl.uniform2f(backgroundOffsetLocation, xOffset, yOffset);\n    }\n    function updateCoverage(coverage) {\n        gl.useProgram(program);\n        gl.uniform2f(coverageLocation, coverage[0], coverage[1]);\n    }\n    function updateLightWrapping(lightWrapping) {\n        gl.useProgram(program);\n        gl.uniform1f(lightWrappingLocation, lightWrapping);\n    }\n    function updateBlendMode(blendMode) {\n        gl.useProgram(program);\n        gl.uniform1f(blendModeLocation, blendMode === 'screen' ? 0 : 1);\n    }\n    function cleanUp() {\n        gl.deleteTexture(backgroundTexture);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n        gl.deleteShader(vertexShader);\n    }\n    return {\n        render,\n        updateCoverage,\n        updateLightWrapping,\n        updateBlendMode,\n        cleanUp,\n    };\n}\n\nfunction buildJointBilateralFilterStage(gl, vertexShader, positionBuffer, texCoordBuffer, inputTexture, outputTexture, canvas, segmentationConfig) {\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_segmentationMask;\n    uniform vec2 u_texelSize;\n    uniform float u_step;\n    uniform float u_radius;\n    uniform float u_offset;\n    uniform float u_sigmaTexel;\n    uniform float u_sigmaColor;\n\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    float gaussian(float x, float sigma) {\n      float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);\n      return exp((x * x) * coeff);\n    }\n\n    void main() {\n      vec2 centerCoord = v_texCoord;\n      vec3 centerColor = texture(u_inputFrame, centerCoord).rgb;\n      float newVal = 0.0;\n\n      float spaceWeight = 0.0;\n      float colorWeight = 0.0;\n      float totalWeight = 0.0;\n\n      // Subsample kernel space.\n      for (float i = -u_radius + u_offset; i <= u_radius; i += u_step) {\n        for (float j = -u_radius + u_offset; j <= u_radius; j += u_step) {\n          vec2 shift = vec2(j, i) * u_texelSize;\n          vec2 coord = vec2(centerCoord + shift);\n          vec3 frameColor = texture(u_inputFrame, coord).rgb;\n          float outVal = texture(u_segmentationMask, coord).a;\n\n          spaceWeight = gaussian(distance(centerCoord, coord), u_sigmaTexel);\n          colorWeight = gaussian(distance(centerColor, frameColor), u_sigmaColor);\n          totalWeight += spaceWeight * colorWeight;\n\n          newVal += spaceWeight * colorWeight * outVal;\n        }\n      }\n      newVal /= totalWeight;\n\n      outColor = vec4(vec3(0.0), newVal);\n    }\n  `;\n    const { width: segmentationWidth, height: segmentationHeight } = segmentationConfig;\n    const { width: outputWidth, height: outputHeight } = canvas;\n    const texelWidth = 1 / outputWidth;\n    const texelHeight = 1 / outputHeight;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const segmentationMaskLocation = gl.getUniformLocation(program, 'u_segmentationMask');\n    const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize');\n    const stepLocation = gl.getUniformLocation(program, 'u_step');\n    const radiusLocation = gl.getUniformLocation(program, 'u_radius');\n    const offsetLocation = gl.getUniformLocation(program, 'u_offset');\n    const sigmaTexelLocation = gl.getUniformLocation(program, 'u_sigmaTexel');\n    const sigmaColorLocation = gl.getUniformLocation(program, 'u_sigmaColor');\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);\n    gl.useProgram(program);\n    gl.uniform1i(inputFrameLocation, 0);\n    gl.uniform1i(segmentationMaskLocation, 1);\n    gl.uniform2f(texelSizeLocation, texelWidth, texelHeight);\n    // Ensures default values are configured to prevent infinite\n    // loop in fragment shader\n    updateSigmaSpace(0);\n    updateSigmaColor(0);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function updateSigmaSpace(sigmaSpace) {\n        sigmaSpace *= Math.max(outputWidth / segmentationWidth, outputHeight / segmentationHeight);\n        const kSparsityFactor = 0.66; // Higher is sparser.\n        const step = Math.max(1, Math.sqrt(sigmaSpace) * kSparsityFactor);\n        const radius = sigmaSpace;\n        const offset = step > 1 ? step * 0.5 : 0;\n        const sigmaTexel = Math.max(texelWidth, texelHeight) * sigmaSpace;\n        gl.useProgram(program);\n        gl.uniform1f(stepLocation, step);\n        gl.uniform1f(radiusLocation, radius);\n        gl.uniform1f(offsetLocation, offset);\n        gl.uniform1f(sigmaTexelLocation, sigmaTexel);\n    }\n    function updateSigmaColor(sigmaColor) {\n        gl.useProgram(program);\n        gl.uniform1f(sigmaColorLocation, sigmaColor);\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return { render, updateSigmaSpace, updateSigmaColor, cleanUp };\n}\n\nfunction buildResizingStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, segmentationConfig) {\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n    uniform sampler2D u_inputFrame;\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    void main() {\n      outColor = texture(u_inputFrame, v_texCoord);\n    }\n  `;\n    // TFLite memory will be accessed as float32\n    const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4;\n    const { width: outputWidth, height: outputHeight } = segmentationConfig;\n    const outputPixelCount = outputWidth * outputHeight;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const outputTexture = createTexture(gl, gl.RGBA8, outputWidth, outputHeight);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);\n    const outputPixels = new Uint8Array(outputPixelCount * 4);\n    gl.useProgram(program);\n    gl.uniform1i(inputFrameLocation, 0);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        // Downloads pixels asynchronously from GPU while rendering the current frame.\n        // The pixels will be available in the next frame render which results\n        // in offsets in the segmentation output but increases the frame rate.\n        readPixelsAsync(gl, 0, 0, outputWidth, outputHeight, gl.RGBA, gl.UNSIGNED_BYTE, outputPixels);\n        for (let i = 0; i < outputPixelCount; i++) {\n            const tfliteIndex = tfliteInputMemoryOffset + i * 3;\n            const outputIndex = i * 4;\n            tflite.HEAPF32[tfliteIndex] = outputPixels[outputIndex] / 255;\n            tflite.HEAPF32[tfliteIndex + 1] = outputPixels[outputIndex + 1] / 255;\n            tflite.HEAPF32[tfliteIndex + 2] = outputPixels[outputIndex + 2] / 255;\n        }\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer);\n        gl.deleteTexture(outputTexture);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return { render, cleanUp };\n}\n\nfunction buildSoftmaxStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, outputTexture, segmentationConfig) {\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputSegmentation;\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    void main() {\n      vec2 segmentation = texture(u_inputSegmentation, v_texCoord).rg;\n      float shift = max(segmentation.r, segmentation.g);\n      float backgroundExp = exp(segmentation.r - shift);\n      float personExp = exp(segmentation.g - shift);\n      outColor = vec4(vec3(0.0), personExp / (backgroundExp + personExp));\n    }\n  `;\n    // TFLite memory will be accessed as float32\n    const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4;\n    const { width: segmentationWidth, height: segmentationHeight } = segmentationConfig;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation');\n    const inputTexture = createTexture(gl, gl.RG32F, segmentationWidth, segmentationHeight);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);\n    gl.useProgram(program);\n    gl.uniform1i(inputLocation, 1);\n    function render() {\n        gl.viewport(0, 0, segmentationWidth, segmentationHeight);\n        gl.useProgram(program);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, segmentationWidth, segmentationHeight, gl.RG, gl.FLOAT, tflite.HEAPF32, tfliteOutputMemoryOffset);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer);\n        gl.deleteTexture(inputTexture);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return { render, cleanUp };\n}\n\nfunction buildWebGL2Pipeline(videoSource, backgroundImage, blurLevel, backgroundFilter, canvas, tflite, segmentationConfig) {\n    const gl = canvas.getContext('webgl2');\n    if (!gl)\n        throw new Error('WebGL2 is not supported');\n    if (gl.isContextLost())\n        throw new Error('WebGL2 context was lost');\n    const { width: frameWidth, height: frameHeight } = videoSource;\n    const { width: segmentationWidth, height: segmentationHeight } = segmentationConfig;\n    const vertexShaderSource = glsl `#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n    out vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `;\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const vertexArray = gl.createVertexArray();\n    gl.bindVertexArray(vertexArray);\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]), gl.STATIC_DRAW);\n    const texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]), gl.STATIC_DRAW);\n    // We don't use texStorage2D here because texImage2D seems faster\n    // to upload video texture than texSubImage2D even though the latter\n    // is supposed to be the recommended way:\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_texstorage_to_create_textures\n    const inputFrameTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    // TODO Rename segmentation and person mask to be more specific\n    const segmentationTexture = createTexture(gl, gl.RGBA8, segmentationWidth, segmentationHeight);\n    const personMaskTexture = createTexture(gl, gl.RGBA8, frameWidth, frameHeight);\n    const resizingStage = buildResizingStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, segmentationConfig);\n    const loadSegmentationStage = buildSoftmaxStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, segmentationTexture, segmentationConfig);\n    const jointBilateralFilterStage = buildJointBilateralFilterStage(gl, vertexShader, positionBuffer, texCoordBuffer, segmentationTexture, personMaskTexture, canvas, segmentationConfig);\n    const backgroundStage = backgroundFilter === 'blur'\n        ? buildBackgroundBlurStage(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel || 'high')\n        : buildBackgroundImageStage(gl, positionBuffer, texCoordBuffer, personMaskTexture, backgroundImage, canvas);\n    function render() {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture);\n        // texImage2D seems faster than texSubImage2D to upload\n        // video texture\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, videoSource);\n        gl.bindVertexArray(vertexArray);\n        resizingStage.render();\n        tflite._runInference();\n        loadSegmentationStage.render();\n        jointBilateralFilterStage.render();\n        backgroundStage.render();\n    }\n    function updatePostProcessingConfig() {\n        jointBilateralFilterStage.updateSigmaSpace(1);\n        jointBilateralFilterStage.updateSigmaColor(0.1);\n        if (backgroundFilter === 'image') {\n            const backgroundImageStage = backgroundStage;\n            backgroundImageStage.updateCoverage([0.5, 0.75]);\n            backgroundImageStage.updateLightWrapping(0.3);\n            backgroundImageStage.updateBlendMode('screen');\n        }\n        else if (backgroundFilter === 'blur') {\n            const backgroundBlurStage = backgroundStage;\n            backgroundBlurStage.updateCoverage([0.5, 0.75]);\n        }\n        else {\n            // TODO Handle no background in a separate pipeline path\n            const backgroundImageStage = backgroundStage;\n            backgroundImageStage.updateCoverage([0, 0.9999]);\n            backgroundImageStage.updateLightWrapping(0);\n        }\n    }\n    function cleanUp() {\n        backgroundStage.cleanUp();\n        jointBilateralFilterStage.cleanUp();\n        loadSegmentationStage.cleanUp();\n        resizingStage.cleanUp();\n        gl.deleteTexture(personMaskTexture);\n        gl.deleteTexture(segmentationTexture);\n        gl.deleteTexture(inputFrameTexture);\n        gl.deleteBuffer(texCoordBuffer);\n        gl.deleteBuffer(positionBuffer);\n        gl.deleteVertexArray(vertexArray);\n        gl.deleteShader(vertexShader);\n    }\n    return { render, updatePostProcessingConfig, cleanUp };\n}\n\nvar SegmentationLevel;\n(function (SegmentationLevel) {\n    SegmentationLevel[\"LOW\"] = \"low\";\n    SegmentationLevel[\"HIGH\"] = \"high\";\n})(SegmentationLevel || (SegmentationLevel = {}));\nconst getSegmentationParams = (level) => {\n    if (level === SegmentationLevel.HIGH) {\n        return { width: 256, height: 144 };\n    }\n    return { width: 160, height: 96 };\n};\n\nfunction createRenderer(tflite, videoSource, targetCanvas, options, onError) {\n    const { backgroundFilter, backgroundImage, backgroundBlurLevel, segmentationLevel = SegmentationLevel.HIGH, fps = 30, } = options;\n    if (backgroundFilter === 'image' && !backgroundImage) {\n        throw new Error(`backgroundImage element is required when backgroundFilter is image`);\n    }\n    const pipeline = buildWebGL2Pipeline(videoSource, backgroundImage, backgroundBlurLevel, backgroundFilter, targetCanvas, tflite, getSegmentationParams(segmentationLevel));\n    const id = setInterval(() => {\n        try {\n            pipeline.render();\n            if (backgroundFilter === 'image') {\n                pipeline.updatePostProcessingConfig();\n            }\n        }\n        catch (error) {\n            onError?.(error);\n        }\n    }, 1000 / (fps <= 0 ? 30 : fps));\n    return {\n        dispose: () => {\n            pipeline.cleanUp();\n            clearInterval(id);\n        },\n    };\n}\n\nconst createTFLiteSIMDModule = (__Module) => {\n  __Module = __Module || {};\n\n  var _scriptDir =\n    typeof document !== 'undefined' && document.currentScript\n      ? document.currentScript.src\n      : undefined;\n\n  var Module = typeof __Module != 'undefined' ? __Module : {};\n  var readyPromiseResolve, readyPromiseReject;\n  Module['ready'] = new Promise(function (resolve, reject) {\n    readyPromiseResolve = resolve;\n    readyPromiseReject = reject;\n  });\n  var moduleOverrides = Object.assign({}, Module);\n  var thisProgram = './this.program';\n  var quit_ = (status, toThrow) => {\n    throw toThrow;\n  };\n  var ENVIRONMENT_IS_WEB = true;\n  var scriptDirectory = '';\n\n  function locateFile(path) {\n    if (Module['locateFile']) {\n      return Module['locateFile'](path, scriptDirectory);\n    }\n    return scriptDirectory + path;\n  }\n\n  var readBinary;\n  {\n    if (typeof document != 'undefined' && document.currentScript) {\n      scriptDirectory = document.currentScript.src;\n    }\n    if (_scriptDir) {\n      scriptDirectory = _scriptDir;\n    }\n    if (scriptDirectory.indexOf('blob:') !== 0) {\n      scriptDirectory = scriptDirectory.substr(\n        0,\n        scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/') + 1,\n      );\n    } else {\n      scriptDirectory = '';\n    }\n  }\n  var out = Module['print'] || console.log.bind(console);\n  var err = Module['printErr'] || console.warn.bind(console);\n  Object.assign(Module, moduleOverrides);\n  moduleOverrides = null;\n  if (Module['arguments']) Module['arguments'];\n  if (Module['thisProgram']) thisProgram = Module['thisProgram'];\n  if (Module['quit']) quit_ = Module['quit'];\n  var wasmBinary;\n  if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];\n  var noExitRuntime = Module['noExitRuntime'] || true;\n  if (typeof WebAssembly != 'object') {\n    abort('no native wasm support detected');\n  }\n  var wasmMemory;\n  var ABORT = false;\n\n  var UTF8Decoder =\n    typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n\n  function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n    var endIdx = idx + maxBytesToRead;\n    var endPtr = idx;\n    while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n    if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n      return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n    }\n    var str = '';\n    while (idx < endPtr) {\n      var u0 = heapOrArray[idx++];\n      if (!(u0 & 128)) {\n        str += String.fromCharCode(u0);\n        continue;\n      }\n      var u1 = heapOrArray[idx++] & 63;\n      if ((u0 & 224) == 192) {\n        str += String.fromCharCode(((u0 & 31) << 6) | u1);\n        continue;\n      }\n      var u2 = heapOrArray[idx++] & 63;\n      if ((u0 & 240) == 224) {\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n      } else {\n        u0 =\n          ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);\n      }\n      if (u0 < 65536) {\n        str += String.fromCharCode(u0);\n      } else {\n        var ch = u0 - 65536;\n        str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));\n      }\n    }\n    return str;\n  }\n\n  var buffer, HEAP8, HEAPU8, HEAPU32;\n\n  function updateGlobalBufferAndViews(buf) {\n    buffer = buf;\n    Module['HEAP8'] = HEAP8 = new Int8Array(buf);\n    Module['HEAP16'] = new Int16Array(buf);\n    Module['HEAP32'] = new Int32Array(buf);\n    Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);\n    Module['HEAPU16'] = new Uint16Array(buf);\n    Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);\n    Module['HEAPF32'] = new Float32Array(buf);\n    Module['HEAPF64'] = new Float64Array(buf);\n  }\n\n  Module['INITIAL_MEMORY'] || 16777216;\n  var __ATPRERUN__ = [];\n  var __ATINIT__ = [];\n  var __ATPOSTRUN__ = [];\n\n  function keepRuntimeAlive() {\n    return noExitRuntime;\n  }\n\n  function preRun() {\n    if (Module['preRun']) {\n      if (typeof Module['preRun'] == 'function')\n        Module['preRun'] = [Module['preRun']];\n      while (Module['preRun'].length) {\n        addOnPreRun(Module['preRun'].shift());\n      }\n    }\n    callRuntimeCallbacks(__ATPRERUN__);\n  }\n\n  function initRuntime() {\n    callRuntimeCallbacks(__ATINIT__);\n  }\n\n  function postRun() {\n    if (Module['postRun']) {\n      if (typeof Module['postRun'] == 'function')\n        Module['postRun'] = [Module['postRun']];\n      while (Module['postRun'].length) {\n        addOnPostRun(Module['postRun'].shift());\n      }\n    }\n    callRuntimeCallbacks(__ATPOSTRUN__);\n  }\n\n  function addOnPreRun(cb) {\n    __ATPRERUN__.unshift(cb);\n  }\n\n  function addOnInit(cb) {\n    __ATINIT__.unshift(cb);\n  }\n\n  function addOnPostRun(cb) {\n    __ATPOSTRUN__.unshift(cb);\n  }\n\n  var runDependencies = 0;\n  var dependenciesFulfilled = null;\n\n  function addRunDependency(id) {\n    runDependencies++;\n    if (Module['monitorRunDependencies']) {\n      Module['monitorRunDependencies'](runDependencies);\n    }\n  }\n\n  function removeRunDependency(id) {\n    runDependencies--;\n    if (Module['monitorRunDependencies']) {\n      Module['monitorRunDependencies'](runDependencies);\n    }\n    if (runDependencies == 0) {\n      if (dependenciesFulfilled) {\n        var callback = dependenciesFulfilled;\n        dependenciesFulfilled = null;\n        callback();\n      }\n    }\n  }\n\n  function abort(what) {\n    {\n      if (Module['onAbort']) {\n        Module['onAbort'](what);\n      }\n    }\n    what = 'Aborted(' + what + ')';\n    err(what);\n    ABORT = true;\n    what += '. Build with -sASSERTIONS for more info.';\n    var e = new WebAssembly.RuntimeError(what);\n    readyPromiseReject(e);\n    throw e;\n  }\n\n  var dataURIPrefix = 'data:application/octet-stream;base64,';\n\n  function isDataURI(filename) {\n    return filename.startsWith(dataURIPrefix);\n  }\n\n  var wasmBinaryFile;\n  wasmBinaryFile = 'tflite-simd.wasm';\n  if (!isDataURI(wasmBinaryFile)) {\n    wasmBinaryFile = locateFile(wasmBinaryFile);\n  }\n\n  function getBinary(file) {\n    try {\n      if (file == wasmBinaryFile && wasmBinary) {\n        return new Uint8Array(wasmBinary);\n      }\n      if (readBinary) ;\n      throw 'both async and sync fetching of the wasm failed';\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n    } catch (err) {\n      abort(err);\n    }\n  }\n\n  function getBinaryPromise() {\n    if (!wasmBinary && (ENVIRONMENT_IS_WEB )) {\n      if (typeof fetch == 'function') {\n        return fetch(wasmBinaryFile, { credentials: 'same-origin' })\n          .then(function (response) {\n            if (!response['ok']) {\n              throw (\n                \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\"\n              );\n            }\n            return response['arrayBuffer']();\n          })\n          .catch(function () {\n            return getBinary(wasmBinaryFile);\n          });\n      }\n    }\n    return Promise.resolve().then(function () {\n      return getBinary(wasmBinaryFile);\n    });\n  }\n\n  function createWasm() {\n    var info = {\n      env: asmLibraryArg,\n      wasi_snapshot_preview1: asmLibraryArg,\n    };\n\n    function receiveInstance(instance, module) {\n      var exports = instance.exports;\n      Module['asm'] = exports;\n      wasmMemory = Module['asm']['memory'];\n      updateGlobalBufferAndViews(wasmMemory.buffer);\n      Module['asm']['__indirect_function_table'];\n      addOnInit(Module['asm']['__wasm_call_ctors']);\n      removeRunDependency();\n    }\n\n    addRunDependency();\n\n    function receiveInstantiationResult(result) {\n      receiveInstance(result['instance']);\n    }\n\n    function instantiateArrayBuffer(receiver) {\n      return getBinaryPromise()\n        .then(function (binary) {\n          return WebAssembly.instantiate(binary, info);\n        })\n        .then(function (instance) {\n          return instance;\n        })\n        .then(receiver, function (reason) {\n          err('failed to asynchronously prepare wasm: ' + reason);\n          abort(reason);\n        });\n    }\n\n    function instantiateAsync() {\n      if (\n        !wasmBinary &&\n        typeof WebAssembly.instantiateStreaming == 'function' &&\n        !isDataURI(wasmBinaryFile) &&\n        typeof fetch == 'function'\n      ) {\n        return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(\n          function (response) {\n            var result = WebAssembly.instantiateStreaming(response, info);\n            return result.then(receiveInstantiationResult, function (reason) {\n              err('wasm streaming compile failed: ' + reason);\n              err('falling back to ArrayBuffer instantiation');\n              return instantiateArrayBuffer(receiveInstantiationResult);\n            });\n          },\n        );\n      } else {\n        return instantiateArrayBuffer(receiveInstantiationResult);\n      }\n    }\n\n    if (Module['instantiateWasm']) {\n      try {\n        var exports = Module['instantiateWasm'](info, receiveInstance);\n        return exports;\n      } catch (e) {\n        err('Module.instantiateWasm callback failed with error: ' + e);\n        readyPromiseReject(e);\n      }\n    }\n    instantiateAsync().catch(readyPromiseReject);\n    return {};\n  }\n\n  function ExitStatus(status) {\n    this.name = 'ExitStatus';\n    this.message = 'Program terminated with exit(' + status + ')';\n    this.status = status;\n  }\n\n  function callRuntimeCallbacks(callbacks) {\n    while (callbacks.length > 0) {\n      callbacks.shift()(Module);\n    }\n  }\n\n  function __dlinit(main_dso_handle) {}\n\n  var dlopenMissingError =\n    'To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking';\n\n  function __dlopen_js(filename, flag) {\n    abort(dlopenMissingError);\n  }\n\n  function __dlsym_js(handle, symbol) {\n    abort(dlopenMissingError);\n  }\n\n  var nowIsMonotonic = true;\n\n  function __emscripten_get_now_is_monotonic() {\n    return nowIsMonotonic;\n  }\n\n  function __mmap_js(len, prot, flags, fd, off, allocated) {\n    return -52;\n  }\n\n  function __munmap_js(addr, len, prot, flags, fd, offset) {}\n\n  function _abort() {\n    abort('');\n  }\n\n  function _emscripten_date_now() {\n    return Date.now();\n  }\n\n  function getHeapMax() {\n    return 2147483648;\n  }\n\n  function _emscripten_get_heap_max() {\n    return getHeapMax();\n  }\n\n  var _emscripten_get_now;\n  _emscripten_get_now = () => performance.now();\n\n  function _emscripten_memcpy_big(dest, src, num) {\n    HEAPU8.copyWithin(dest, src, src + num);\n  }\n\n  function emscripten_realloc_buffer(size) {\n    try {\n      wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16);\n      updateGlobalBufferAndViews(wasmMemory.buffer);\n      return 1;\n    } catch (e) {}\n  }\n\n  function _emscripten_resize_heap(requestedSize) {\n    var oldSize = HEAPU8.length;\n    requestedSize = requestedSize >>> 0;\n    var maxHeapSize = getHeapMax();\n    if (requestedSize > maxHeapSize) {\n      return false;\n    }\n    let alignUp = (x, multiple) => x + ((multiple - (x % multiple)) % multiple);\n    for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n      var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n      overGrownHeapSize = Math.min(\n        overGrownHeapSize,\n        requestedSize + 100663296,\n      );\n      var newSize = Math.min(\n        maxHeapSize,\n        alignUp(Math.max(requestedSize, overGrownHeapSize), 65536),\n      );\n      var replacement = emscripten_realloc_buffer(newSize);\n      if (replacement) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  var ENV = {};\n\n  function getExecutableName() {\n    return thisProgram || './this.program';\n  }\n\n  function getEnvStrings() {\n    if (!getEnvStrings.strings) {\n      var lang =\n        (\n          (typeof navigator == 'object' &&\n            navigator.languages &&\n            navigator.languages[0]) ||\n          'C'\n        ).replace('-', '_') + '.UTF-8';\n      var env = {\n        USER: 'web_user',\n        LOGNAME: 'web_user',\n        PATH: '/',\n        PWD: '/',\n        HOME: '/home/web_user',\n        LANG: lang,\n        _: getExecutableName(),\n      };\n      for (var x in ENV) {\n        if (ENV[x] === undefined) delete env[x];\n        else env[x] = ENV[x];\n      }\n      var strings = [];\n      for (var x in env) {\n        strings.push(x + '=' + env[x]);\n      }\n      getEnvStrings.strings = strings;\n    }\n    return getEnvStrings.strings;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function writeAsciiToMemory(str, buffer, dontAddNull) {\n    for (var i = 0; i < str.length; ++i) {\n      HEAP8[buffer++ >> 0] = str.charCodeAt(i);\n    }\n    if (!dontAddNull) HEAP8[buffer >> 0] = 0;\n  }\n\n  function _environ_get(__environ, environ_buf) {\n    var bufSize = 0;\n    getEnvStrings().forEach(function (string, i) {\n      var ptr = environ_buf + bufSize;\n      HEAPU32[(__environ + i * 4) >> 2] = ptr;\n      writeAsciiToMemory(string, ptr);\n      bufSize += string.length + 1;\n    });\n    return 0;\n  }\n\n  function _environ_sizes_get(penviron_count, penviron_buf_size) {\n    var strings = getEnvStrings();\n    HEAPU32[penviron_count >> 2] = strings.length;\n    var bufSize = 0;\n    strings.forEach(function (string) {\n      bufSize += string.length + 1;\n    });\n    HEAPU32[penviron_buf_size >> 2] = bufSize;\n    return 0;\n  }\n\n  function _proc_exit(code) {\n    if (!keepRuntimeAlive()) {\n      if (Module['onExit']) Module['onExit'](code);\n      ABORT = true;\n    }\n    quit_(code, new ExitStatus(code));\n  }\n\n  function exitJS(status, implicit) {\n    _proc_exit(status);\n  }\n\n  var _exit = exitJS;\n\n  function _fd_close(fd) {\n    return 52;\n  }\n\n  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n    return 70;\n  }\n\n  var printCharBuffers = [null, [], []];\n\n  function printChar(stream, curr) {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    var buffer = printCharBuffers[stream];\n    if (curr === 0 || curr === 10) {\n      (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n      buffer.length = 0;\n    } else {\n      buffer.push(curr);\n    }\n  }\n\n  function _fd_write(fd, iov, iovcnt, pnum) {\n    var num = 0;\n    for (var i = 0; i < iovcnt; i++) {\n      var ptr = HEAPU32[iov >> 2];\n      var len = HEAPU32[(iov + 4) >> 2];\n      iov += 8;\n      for (var j = 0; j < len; j++) {\n        printChar(fd, HEAPU8[ptr + j]);\n      }\n      num += len;\n    }\n    HEAPU32[pnum >> 2] = num;\n    return 0;\n  }\n\n  function getRandomDevice() {\n    if (\n      typeof crypto == 'object' &&\n      typeof crypto['getRandomValues'] == 'function'\n    ) {\n      var randomBuffer = new Uint8Array(1);\n      return () => {\n        crypto.getRandomValues(randomBuffer);\n        return randomBuffer[0];\n      };\n    } else return () => abort('randomDevice');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function _getentropy(buffer, size) {\n    if (!_getentropy.randomDevice) {\n      _getentropy.randomDevice = getRandomDevice();\n    }\n    for (var i = 0; i < size; i++) {\n      HEAP8[(buffer + i) >> 0] = _getentropy.randomDevice();\n    }\n    return 0;\n  }\n\n  var asmLibraryArg = {\n    _dlinit: __dlinit,\n    _dlopen_js: __dlopen_js,\n    _dlsym_js: __dlsym_js,\n    _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,\n    _mmap_js: __mmap_js,\n    _munmap_js: __munmap_js,\n    abort: _abort,\n    emscripten_date_now: _emscripten_date_now,\n    emscripten_get_heap_max: _emscripten_get_heap_max,\n    emscripten_get_now: _emscripten_get_now,\n    emscripten_memcpy_big: _emscripten_memcpy_big,\n    emscripten_resize_heap: _emscripten_resize_heap,\n    environ_get: _environ_get,\n    environ_sizes_get: _environ_sizes_get,\n    exit: _exit,\n    fd_close: _fd_close,\n    fd_seek: _fd_seek,\n    fd_write: _fd_write,\n    getentropy: _getentropy,\n  };\n  createWasm();\n  (Module['___wasm_call_ctors'] = function () {\n    return (Module['___wasm_call_ctors'] =\n      Module['asm']['__wasm_call_ctors']).apply(null, arguments);\n  });\n  (Module['_getModelBufferMemoryOffset'] =\n    function () {\n      return (Module[\n        '_getModelBufferMemoryOffset'\n      ] =\n        Module['asm']['getModelBufferMemoryOffset']).apply(null, arguments);\n    });\n  (Module['_getInputMemoryOffset'] = function () {\n    return (Module['_getInputMemoryOffset'] =\n      Module['asm']['getInputMemoryOffset']).apply(null, arguments);\n  });\n  (Module['_getInputHeight'] = function () {\n    return (Module['_getInputHeight'] =\n      Module['asm']['getInputHeight']).apply(null, arguments);\n  });\n  (Module['_getInputWidth'] = function () {\n    return (Module['_getInputWidth'] =\n      Module['asm']['getInputWidth']).apply(null, arguments);\n  });\n  (Module['_getInputChannelCount'] = function () {\n    return (Module['_getInputChannelCount'] =\n      Module['asm']['getInputChannelCount']).apply(null, arguments);\n  });\n  (Module['_getOutputMemoryOffset'] = function () {\n    return (Module['_getOutputMemoryOffset'] =\n      Module['asm']['getOutputMemoryOffset']).apply(null, arguments);\n  });\n  (Module['_getOutputHeight'] = function () {\n    return (Module['_getOutputHeight'] =\n      Module['asm']['getOutputHeight']).apply(null, arguments);\n  });\n  (Module['_getOutputWidth'] = function () {\n    return (Module['_getOutputWidth'] =\n      Module['asm']['getOutputWidth']).apply(null, arguments);\n  });\n  (Module['_getOutputChannelCount'] = function () {\n    return (Module['_getOutputChannelCount'] =\n      Module['asm']['getOutputChannelCount']).apply(null, arguments);\n  });\n  (Module['_loadModel'] = function () {\n    return (Module['_loadModel'] =\n      Module['asm']['loadModel']).apply(null, arguments);\n  });\n  (Module['_runInference'] = function () {\n    return (Module['_runInference'] =\n      Module['asm']['runInference']).apply(null, arguments);\n  });\n  (Module['_malloc'] = function () {\n    return (Module['_malloc'] = Module['asm']['malloc']).apply(\n      null,\n      arguments,\n    );\n  });\n  (Module['___errno_location'] = function () {\n    return (Module['___errno_location'] =\n      Module['asm']['__errno_location']).apply(null, arguments);\n  });\n  (Module['___dl_seterr'] = function () {\n    return (Module['___dl_seterr'] =\n      Module['asm']['__dl_seterr']).apply(null, arguments);\n  });\n  (Module['stackSave'] = function () {\n    return (Module['stackSave'] = Module['asm']['stackSave']).apply(\n      null,\n      arguments,\n    );\n  });\n  (Module['stackRestore'] = function () {\n    return (Module['stackRestore'] =\n      Module['asm']['stackRestore']).apply(null, arguments);\n  });\n  (Module['stackAlloc'] = function () {\n    return (Module['stackAlloc'] =\n      Module['asm']['stackAlloc']).apply(null, arguments);\n  });\n  (Module['dynCall_jjj'] = function () {\n    return (Module['dynCall_jjj'] =\n      Module['asm']['dynCall_jjj']).apply(null, arguments);\n  });\n  (Module['dynCall_jiii'] = function () {\n    return (Module['dynCall_jiii'] =\n      Module['asm']['dynCall_jiii']).apply(null, arguments);\n  });\n  (Module['dynCall_iiiijj'] = function () {\n    return (Module['dynCall_iiiijj'] =\n      Module['asm']['dynCall_iiiijj']).apply(null, arguments);\n  });\n  (Module['dynCall_viijj'] = function () {\n    return (Module['dynCall_viijj'] =\n      Module['asm']['dynCall_viijj']).apply(null, arguments);\n  });\n  (Module['dynCall_viiijjj'] = function () {\n    return (Module['dynCall_viiijjj'] =\n      Module['asm']['dynCall_viiijjj']).apply(null, arguments);\n  });\n  (Module['dynCall_iijjiiii'] = function () {\n    return (Module['dynCall_iijjiiii'] =\n      Module['asm']['dynCall_iijjiiii']).apply(null, arguments);\n  });\n  (Module['dynCall_jiji'] = function () {\n    return (Module['dynCall_jiji'] =\n      Module['asm']['dynCall_jiji']).apply(null, arguments);\n  });\n  var calledRun;\n  dependenciesFulfilled = function runCaller() {\n    if (!calledRun) run();\n    if (!calledRun) dependenciesFulfilled = runCaller;\n  };\n\n  function run(args) {\n    if (runDependencies > 0) {\n      return;\n    }\n    preRun();\n    if (runDependencies > 0) {\n      return;\n    }\n\n    function doRun() {\n      if (calledRun) return;\n      calledRun = true;\n      Module['calledRun'] = true;\n      if (ABORT) return;\n      initRuntime();\n      readyPromiseResolve(Module);\n      if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n      postRun();\n    }\n\n    if (Module['setStatus']) {\n      Module['setStatus']('Running...');\n      setTimeout(function () {\n        setTimeout(function () {\n          Module['setStatus']('');\n        }, 1);\n        doRun();\n      }, 1);\n    } else {\n      doRun();\n    }\n  }\n\n  if (Module['preInit']) {\n    if (typeof Module['preInit'] == 'function')\n      Module['preInit'] = [Module['preInit']];\n    while (Module['preInit'].length > 0) {\n      Module['preInit'].pop()();\n    }\n  }\n  run();\n\n  return __Module.ready;\n};\n\nconst version = \"0.1.3\" ;\nconst packageName = \"@stream-io/video-filters-web\" ;\n\n// @ts-expect-error - module is not declared\n// This is a WebAssembly module compiled from the TensorFlow Lite C++ library.\nconst createTFLite = createTFLiteSIMDModule;\nconst loadTFLite = async (options = {}) => {\n    const { basePath = `https://unpkg.com/${packageName}@${version}/tf`, tfFilePath = `${basePath}/tflite/tflite-simd.wasm`, modelFilePath = `${basePath}/models/segm_full_v679.tflite`, } = options;\n    const [tfLite, model] = await Promise.all([\n        createTFLite({ locateFile: () => tfFilePath }),\n        fetchModel(modelFilePath),\n    ]);\n    const modelBufferOffset = tfLite._getModelBufferMemoryOffset();\n    tfLite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n    tfLite._loadModel(model.byteLength);\n    return tfLite;\n};\nlet lastModelFilePath = '';\nlet modelFileCache;\nconst fetchModel = async (modelFilePath) => {\n    const model = modelFilePath === lastModelFilePath && modelFileCache\n        ? modelFileCache\n        : await fetch(modelFilePath).then((r) => r.arrayBuffer());\n    // Cache the model file for future use.\n    modelFileCache = model;\n    lastModelFilePath = modelFilePath;\n    return model;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-filters-web/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-bindings/dist/index.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_LANGUAGE: () => (/* binding */ DEFAULT_LANGUAGE),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* binding */ DEFAULT_NAMESPACE),\n/* harmony export */   Restricted: () => (/* binding */ Restricted),\n/* harmony export */   StreamCallProvider: () => (/* binding */ StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* binding */ StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* binding */ StreamI18nProvider),\n/* harmony export */   StreamVideoProvider: () => (/* binding */ StreamVideoProvider),\n/* harmony export */   defaultTranslationFunction: () => (/* binding */ defaultTranslationFunction),\n/* harmony export */   mapToRegistry: () => (/* binding */ mapToRegistry),\n/* harmony export */   useCall: () => (/* binding */ useCall),\n/* harmony export */   useCallStateHooks: () => (/* binding */ useCallStateHooks),\n/* harmony export */   useCalls: () => (/* binding */ useCalls),\n/* harmony export */   useConnectedUser: () => (/* binding */ useConnectedUser),\n/* harmony export */   useCreateI18n: () => (/* binding */ useCreateI18n),\n/* harmony export */   useI18n: () => (/* binding */ useI18n),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useStreamVideoClient: () => (/* binding */ useStreamVideoClient)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! i18next */ \"(ssr)/./node_modules/i18next/dist/esm/i18next.js\");\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n\n\n\n\n\nconst StreamCallContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * A provider for the call object.\n */\nconst StreamCallProvider = (props) => {\n    const { call, children } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamCallContext.Provider, { value: call, children: children }));\n};\n/**\n * A hook to get the call object from the closest provider.\n */\nconst useCall = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamCallContext);\n};\n\nconst mapToRegistry = (translationsMap, namespace) => Object.entries(translationsMap).reduce((acc, [lng, translations]) => {\n    acc[lng] = { [namespace]: translations };\n    return acc;\n}, {});\n\nconst DEFAULT_LANGUAGE = 'en';\nconst DEFAULT_NAMESPACE = 'stream-video';\nconst DEFAULT_CONFIG = {\n    debug: false,\n    currentLanguage: DEFAULT_LANGUAGE,\n    fallbackLanguage: false,\n};\nconst DEFAULT_TRANSLATIONS_REGISTRY = mapToRegistry({}, DEFAULT_NAMESPACE);\nconst defaultTranslationFunction = (key) => key;\nclass StreamI18n {\n    /** Simple logger function */\n    constructor(options = {}) {\n        /** Translator function that converts the provided string into its equivalent in the current language. */\n        this.t = defaultTranslationFunction;\n        this.init = async () => {\n            try {\n                this.t = await this.i18nInstance.init();\n            }\n            catch (e) {\n                console.error(`Failed to initialize translations: ${JSON.stringify(e)}`);\n            }\n            return this;\n        };\n        this.changeLanguage = async (language, onChange) => {\n            if (!this._checkIsInitialized())\n                return;\n            // i18next detects the language, if none provided, but it is better\n            // to show this detection here explicitly\n            const browserLanguage = typeof window !== 'undefined' && window.navigator\n                ? window.navigator.language\n                : undefined;\n            await this.i18nInstance.changeLanguage(language || browserLanguage);\n            onChange?.(this.currentLanguage);\n        };\n        this.registerTranslationsForLanguage = ({ lng, translations, }) => {\n            if (!this._checkIsInitialized())\n                return;\n            this.i18nInstance.addResourceBundle(lng, DEFAULT_NAMESPACE, translations, true, true);\n        };\n        this._checkIsInitialized = () => {\n            if (!this.i18nInstance.isInitialized) {\n                console.warn('I18n instance is not initialized. Call yourStreamI18nInstance.init().');\n            }\n            return this.i18nInstance.isInitialized;\n        };\n        const { debug = DEFAULT_CONFIG.debug, currentLanguage = DEFAULT_CONFIG.currentLanguage, fallbackLanguage = DEFAULT_CONFIG.fallbackLanguage, translationsOverrides, } = options;\n        this.i18nInstance = i18next__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createInstance({\n            debug,\n            defaultNS: DEFAULT_NAMESPACE,\n            fallbackLng: fallbackLanguage,\n            interpolation: { escapeValue: false },\n            keySeparator: false,\n            lng: currentLanguage,\n            nsSeparator: false,\n            parseMissingKeyHandler: (key) => {\n                return key;\n            },\n            resources: DEFAULT_TRANSLATIONS_REGISTRY,\n        });\n        if (translationsOverrides) {\n            this.i18nInstance.on('initialized', () => {\n                Object.entries(translationsOverrides).forEach(([lng, translations]) => {\n                    this.registerTranslationsForLanguage({ lng, translations });\n                });\n            });\n        }\n    }\n    get currentLanguage() {\n        this._checkIsInitialized();\n        return this.i18nInstance.language;\n    }\n    get isInitialized() {\n        return this.i18nInstance.isInitialized;\n    }\n}\n\nconst StreamI18nContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    t: defaultTranslationFunction,\n});\nconst StreamI18nProvider = ({ children, ...createI18nParams }) => {\n    const { i18n, t } = useCreateI18n(createI18nParams);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nContext.Provider, { value: { t, i18n }, children: children }));\n};\nconst useCreateI18n = ({ i18nInstance, language, fallbackLanguage, translationsOverrides, }) => {\n    const [i18n] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => i18nInstance ||\n        new StreamI18n({\n            currentLanguage: language,\n            fallbackLanguage,\n            translationsOverrides,\n        }));\n    const [t, setTranslationFn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => defaultTranslationFunction);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const { isInitialized } = i18n;\n        if (!isInitialized) {\n            i18n.init().then((_i18n) => setTranslationFn(() => _i18n.i18nInstance.t));\n            return;\n        }\n        if (language && i18n?.currentLanguage !== language) {\n            i18n.changeLanguage(language).catch((err) => {\n                console.log('Error while changing language', err);\n            });\n        }\n    }, [i18n, i18nInstance, language, translationsOverrides]);\n    return { i18n, t };\n};\nconst useI18n = () => (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamI18nContext);\n\nconst StreamVideoContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * StreamVideo is a provider component which should be used to wrap the entire application.\n * It provides the client object to all children components and initializes the i18n instance.\n *  @param PropsWithChildren<StreamVideoProps>\n *  @category Client State\n */\nconst StreamVideoProvider = ({ children, client, i18nInstance, language, translationsOverrides, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamVideoContext.Provider, { value: client, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nProvider, { i18nInstance: i18nInstance, language: language, translationsOverrides: translationsOverrides, children: children }) }));\n};\n/**\n *\n * @returns\n *\n * @category Client State\n */\nconst useStreamVideoClient = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamVideoContext);\n};\n\n/**\n * Utility hook which provides the current value of the given observable.\n * @internal\n *\n * @param observable$ the observable to read data from.\n * @param defaultValue a default value. Used when the observable data can't be read or emits an error.\n */\nconst useObservableValue = (observable$, defaultValue) => {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => {\n        try {\n            return _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.RxUtils.getCurrentValue(observable$);\n        }\n        catch (err) {\n            if (typeof defaultValue === 'undefined')\n                throw err;\n            return defaultValue;\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const subscription = observable$.subscribe({\n            next: setValue,\n            error: (err) => {\n                console.log('An error occurred while reading an observable', err);\n                if (defaultValue)\n                    setValue(defaultValue);\n            },\n        });\n        return () => {\n            subscription.unsubscribe();\n        };\n    }, [defaultValue, observable$]);\n    return value;\n};\n\n/**\n * Checks whether we are using React Native\n */\nconst isReactNative = () => {\n    if (typeof navigator === 'undefined')\n        return false;\n    return navigator.product?.toLowerCase() === 'reactnative';\n};\n\n// kind-of memoized, used as a default value\nconst EMPTY_DEVICES_ARRAY = Object.freeze([]);\n/**\n * Utility hook, which provides the current call's state.\n *\n * @category Call State\n */\nconst useCallState = () => {\n    const call = useCall();\n    // return an empty and unlinked CallState object if there is no call in the provider\n    // this ensures that the hooks always return a value and many null checks can be avoided\n    if (!call) {\n        const message = 'You are using useCallState() outside a Call context. ' +\n            'Please wrap your component in <StreamCall /> and provide a \"call\" instance.';\n        console.warn(message);\n        return new _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.CallState();\n    }\n    return call.state;\n};\n/**\n * Utility hook which provides information whether the current call is being recorded. It will return `true` if the call is being recorded.\n *\n * @category Call State\n */\nconst useIsCallRecordingInProgress = () => {\n    const { recording$ } = useCallState();\n    return useObservableValue(recording$);\n};\n/**\n * Utility hook which provides information whether the current call is broadcasting.\n *\n * @category Call State\n */\nconst useIsCallHLSBroadcastingInProgress = () => {\n    const { egress$ } = useCallState();\n    const egress = useObservableValue(egress$);\n    if (!egress)\n        return false;\n    return egress.broadcasting;\n};\n/**\n * Utility hook which provides information whether the current call is live.\n *\n * @category Call State\n */\nconst useIsCallLive = () => {\n    const { backstage$ } = useCallState();\n    const isBackstageOn = useObservableValue(backstage$);\n    return !isBackstageOn;\n};\n/**\n * Returns the list of blocked users in the current call.\n */\nconst useCallBlockedUserIds = () => {\n    const { blockedUserIds$ } = useCallState();\n    return useObservableValue(blockedUserIds$);\n};\n/**\n * Returns the timestamp when this call was created.\n */\nconst useCallCreatedAt = () => {\n    const { createdAt$ } = useCallState();\n    return useObservableValue(createdAt$);\n};\n/**\n * Returns the timestamp when this call was ended.\n */\nconst useCallEndedAt = () => {\n    const { endedAt$ } = useCallState();\n    return useObservableValue(endedAt$);\n};\n/**\n * Returns the timestamp telling when the call is scheduled to start.\n */\nconst useCallStartsAt = () => {\n    const { startsAt$ } = useCallState();\n    return useObservableValue(startsAt$);\n};\n/**\n * Returns the timestamp when this call was updated.\n */\nconst useCallUpdatedAt = () => {\n    const { updatedAt$ } = useCallState();\n    return useObservableValue(updatedAt$);\n};\n/**\n * Returns the information about the call's creator.\n */\nconst useCallCreatedBy = () => {\n    const { createdBy$ } = useCallState();\n    return useObservableValue(createdBy$);\n};\n/**\n * Returns the call's custom data.\n */\nconst useCallCustomData = () => {\n    const { custom$ } = useCallState();\n    return useObservableValue(custom$);\n};\n/**\n * Returns the call's Egress information.\n */\nconst useCallEgress = () => {\n    const { egress$ } = useCallState();\n    return useObservableValue(egress$);\n};\n/**\n * Returns the call's Ingress information.\n */\nconst useCallIngress = () => {\n    const { ingress$ } = useCallState();\n    return useObservableValue(ingress$);\n};\n/**\n * Returns the data for the current call session.\n */\nconst useCallSession = () => {\n    const { session$ } = useCallState();\n    return useObservableValue(session$);\n};\n/**\n * Returns the call's settings.\n */\nconst useCallSettings = () => {\n    const { settings$ } = useCallState();\n    return useObservableValue(settings$);\n};\n/**\n * Returns whether the call has transcribing enabled.\n */\nconst useIsCallTranscribingInProgress = () => {\n    const { transcribing$ } = useCallState();\n    return useObservableValue(transcribing$);\n};\n/**\n * Returns information about the user who has marked this call as ended.\n */\nconst useCallEndedBy = () => {\n    const { endedBy$ } = useCallState();\n    return useObservableValue(endedBy$);\n};\n/**\n * Utility hook which provides a boolean indicating whether there is\n * a participant in the current call which shares their screen.\n *\n * @category Call State\n */\nconst useHasOngoingScreenShare = () => {\n    const { hasOngoingScreenShare$ } = useCallState();\n    return useObservableValue(hasOngoingScreenShare$);\n};\n/**\n * Utility hook which provides the latest stats report of the current call.\n *\n * The latest stats report of the current call.\n * When stats gathering is enabled, this observable will emit a new value\n * at a regular (configurable) interval.\n *\n * Consumers of this observable can implement their own batching logic\n * in case they want to show historical stats data.\n *\n * @category Call State\n */\nconst useCallStatsReport = () => {\n    const { callStatsReport$ } = useCallState();\n    return useObservableValue(callStatsReport$);\n};\n/**\n * Utility hook which provides the dominant speaker of the current call.\n *\n * @category Call State\n */\nconst useDominantSpeaker = () => {\n    const { dominantSpeaker$ } = useCallState();\n    return useObservableValue(dominantSpeaker$);\n};\n/**\n * Utility hook which provides a list of call members.\n *\n * @category Call State\n */\nconst useCallMembers = () => {\n    const { members$ } = useCallState();\n    return useObservableValue(members$);\n};\n/**\n * Utility hook providing the current calling state of the call. For example, `RINGING` or `JOINED`.\n *\n * @category Call State\n */\nconst useCallCallingState = () => {\n    const { callingState$ } = useCallState();\n    return useObservableValue(callingState$);\n};\n/**\n * Utility hook providing the actual start time of the current session.\n * Useful for calculating the call duration.\n *\n * @category Call State\n */\nconst useCallStartedAt = () => {\n    const { startedAt$ } = useCallState();\n    return useObservableValue(startedAt$);\n};\n/**\n * A hook which provides a list of all participants that have joined an active call.\n *\n * @category Call State\n *\n * @param options.sortBy - A comparator function to sort the participants by.\n * Make sure to memoize output of the `combineComparators` function\n * (or keep it out of component's scope if possible) before passing it down to this property.\n */\nconst useParticipants = ({ sortBy, } = {}) => {\n    const { participants$ } = useCallState();\n    const participants = useObservableValue(participants$);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (sortBy) {\n            return [...participants].sort(sortBy);\n        }\n        return participants;\n    }, [participants, sortBy]);\n};\n/**\n * A hook which provides a StreamVideoLocalParticipant object.\n * It signals that I have joined a call.\n *\n * @category Call State\n */\nconst useLocalParticipant = () => {\n    const { localParticipant$ } = useCallState();\n    return useObservableValue(localParticipant$);\n};\n/**\n * A hook which provides a list of all other participants than me that have joined an active call.\n *\n * @category Call State\n */\nconst useRemoteParticipants = () => {\n    const { remoteParticipants$ } = useCallState();\n    return useObservableValue(remoteParticipants$);\n};\n/**\n * Returns the approximate participant count of the active call.\n * This includes the anonymous users as well, and it is computed on the server.\n *\n * @category Call State\n */\nconst useParticipantCount = () => {\n    const { participantCount$ } = useCallState();\n    return useObservableValue(participantCount$);\n};\n/**\n * Returns the approximate anonymous participant count of the active call.\n * The regular participants are not included in this count. It is computed on the server.\n *\n * @category Call State\n */\nconst useAnonymousParticipantCount = () => {\n    const { anonymousParticipantCount$ } = useCallState();\n    return useObservableValue(anonymousParticipantCount$);\n};\n/**\n * Returns the generated thumbnail of the current call, if enabled in settings.\n */\nconst useCallThumbnail = () => {\n    const { thumbnails$ } = useCallState();\n    return useObservableValue(thumbnails$);\n};\n/**\n * A hook which returns the local participant's own capabilities.\n */\nconst useOwnCapabilities = () => {\n    const { ownCapabilities$ } = useCallState();\n    return useObservableValue(ownCapabilities$);\n};\n/**\n * Hook that returns true if the local participant has all the given permissions.\n *\n * @param permissions the permissions to check.\n */\nconst useHasPermissions = (...permissions) => {\n    const capabilities = useOwnCapabilities();\n    return permissions.every((permission) => capabilities?.includes(permission));\n};\n/**\n * Returns the camera state of the current call.\n *\n * @category Camera Manager State\n *\n */\nconst useCameraState = () => {\n    const call = useCall();\n    const { camera } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => camera.listDevices(), [camera]);\n    const { state } = camera;\n    const status = useObservableValue(state.status$);\n    const optimisticStatus = useObservableValue(state.optimisticStatus$);\n    const direction = useObservableValue(state.direction$);\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const devices = useObservableValue(devices$, EMPTY_DEVICES_ARRAY);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isMute = status !== 'enabled';\n    const optimisticIsMute = optimisticStatus !== 'enabled';\n    return {\n        camera,\n        status,\n        optimisticStatus,\n        isEnabled: status === 'enabled',\n        direction,\n        mediaStream,\n        devices,\n        hasBrowserPermission,\n        selectedDevice,\n        isMute,\n        optimisticIsMute,\n    };\n};\n/**\n * Returns the microphone state of the current call.\n *\n * @category Microphone Manager State\n */\nconst useMicrophoneState = () => {\n    const call = useCall();\n    const { microphone } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => microphone.listDevices(), [microphone]);\n    const { state } = microphone;\n    const status = useObservableValue(state.status$);\n    const optimisticStatus = useObservableValue(state.optimisticStatus$);\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const devices = useObservableValue(devices$, EMPTY_DEVICES_ARRAY);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isSpeakingWhileMuted = useObservableValue(state.speakingWhileMuted$);\n    const isMute = status !== 'enabled';\n    const optimisticIsMute = optimisticStatus !== 'enabled';\n    return {\n        microphone,\n        status,\n        optimisticStatus,\n        isEnabled: status === 'enabled',\n        mediaStream,\n        devices,\n        selectedDevice,\n        hasBrowserPermission,\n        isSpeakingWhileMuted,\n        isMute,\n        optimisticIsMute,\n    };\n};\n/**\n * Returns the speaker state of the current call.\n *\n * Note: This hook is not supported in React Native\n */\nconst useSpeakerState = () => {\n    if (isReactNative()) {\n        throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n    }\n    const call = useCall();\n    const { speaker } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => speaker.listDevices(), [speaker]);\n    const devices = useObservableValue(devices$, EMPTY_DEVICES_ARRAY);\n    const selectedDevice = useObservableValue(speaker.state.selectedDevice$);\n    return {\n        speaker,\n        devices,\n        selectedDevice,\n        isDeviceSelectionSupported: speaker.state.isDeviceSelectionSupported,\n    };\n};\n/**\n * Returns the Screen Share state of the current call.\n */\nconst useScreenShareState = () => {\n    const call = useCall();\n    const { screenShare } = call;\n    const status = useObservableValue(screenShare.state.status$);\n    const pendingStatus = useObservableValue(screenShare.state.optimisticStatus$);\n    const mediaStream = useObservableValue(screenShare.state.mediaStream$);\n    const isMute = status !== 'enabled';\n    const optimisticStatus = pendingStatus ?? status;\n    const optimisticIsMute = optimisticStatus !== 'enabled';\n    return {\n        screenShare,\n        mediaStream,\n        status,\n        optimisticStatus,\n        isMute,\n        optimisticIsMute,\n    };\n};\n\nvar CallStateHooks = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    useAnonymousParticipantCount: useAnonymousParticipantCount,\n    useCallBlockedUserIds: useCallBlockedUserIds,\n    useCallCallingState: useCallCallingState,\n    useCallCreatedAt: useCallCreatedAt,\n    useCallCreatedBy: useCallCreatedBy,\n    useCallCustomData: useCallCustomData,\n    useCallEgress: useCallEgress,\n    useCallEndedAt: useCallEndedAt,\n    useCallEndedBy: useCallEndedBy,\n    useCallIngress: useCallIngress,\n    useCallMembers: useCallMembers,\n    useCallSession: useCallSession,\n    useCallSettings: useCallSettings,\n    useCallStartedAt: useCallStartedAt,\n    useCallStartsAt: useCallStartsAt,\n    useCallState: useCallState,\n    useCallStatsReport: useCallStatsReport,\n    useCallThumbnail: useCallThumbnail,\n    useCallUpdatedAt: useCallUpdatedAt,\n    useCameraState: useCameraState,\n    useDominantSpeaker: useDominantSpeaker,\n    useHasOngoingScreenShare: useHasOngoingScreenShare,\n    useHasPermissions: useHasPermissions,\n    useIsCallHLSBroadcastingInProgress: useIsCallHLSBroadcastingInProgress,\n    useIsCallLive: useIsCallLive,\n    useIsCallRecordingInProgress: useIsCallRecordingInProgress,\n    useIsCallTranscribingInProgress: useIsCallTranscribingInProgress,\n    useLocalParticipant: useLocalParticipant,\n    useMicrophoneState: useMicrophoneState,\n    useOwnCapabilities: useOwnCapabilities,\n    useParticipantCount: useParticipantCount,\n    useParticipants: useParticipants,\n    useRemoteParticipants: useRemoteParticipants,\n    useScreenShareState: useScreenShareState,\n    useSpeakerState: useSpeakerState\n});\n\n/**\n * Utility hook which provides access to client's state store.\n */\nconst useStore = () => {\n    const client = useStreamVideoClient();\n    if (!client) {\n        throw new Error(`StreamVideoClient isn't initialized or this hook is called outside of <StreamVideo> context.`);\n    }\n    return client.readOnlyStateStore;\n};\n/**\n * Utility hook which provides a list of all notifications about created calls.\n * In the ring call settings, these calls can be outgoing (I have called somebody)\n * or incoming (somebody has called me).\n *\n * @category Client State\n */\nconst useCalls = () => {\n    const { calls$ } = useStore();\n    return useObservableValue(calls$);\n};\n/**\n * Returns the current connected user.\n *\n * @category Client State\n */\nconst useConnectedUser = () => {\n    const { connectedUser$ } = useStore();\n    return useObservableValue(connectedUser$);\n};\n\n/**\n * A hook-alike function that exposes all call state hooks.\n *\n * @category Call State\n */\nconst useCallStateHooks = () => CallStateHooks;\n\nconst Restricted = ({ canRequestOnly, hasPermissionsOnly, requiredGrants, requireAll = true, children, }) => {\n    const call = useCall();\n    const { useCallSettings, useOwnCapabilities } = useCallStateHooks();\n    const ownCapabilities = useOwnCapabilities();\n    const settings = useCallSettings();\n    const hasPermissions = requiredGrants[requireAll ? 'every' : 'some']((capability) => ownCapabilities?.includes(capability));\n    if (hasPermissionsOnly)\n        return hasPermissions ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    const canRequest = requiredGrants.some((capability) => call?.permissionsContext.canRequest(capability, settings));\n    if (canRequestOnly)\n        return canRequest ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    if (hasPermissions || canRequest)\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children });\n    return null;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/index.es.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcceptCallButton: () => (/* binding */ AcceptCallButton),\n/* harmony export */   Audio: () => (/* binding */ Audio),\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   AudioSettingsResponseDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsResponseDefaultDeviceEnum),\n/* harmony export */   Avatar: () => (/* binding */ Avatar),\n/* harmony export */   AvatarFallback: () => (/* binding */ AvatarFallback),\n/* harmony export */   AxiosError: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AxiosError),\n/* harmony export */   BackgroundFiltersProvider: () => (/* binding */ BackgroundFiltersProvider),\n/* harmony export */   BaseVideo: () => (/* binding */ BaseVideo),\n/* harmony export */   BlockListOptionsBehaviorEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.BlockListOptionsBehaviorEnum),\n/* harmony export */   Browsers: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers),\n/* harmony export */   Call: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Call),\n/* harmony export */   CallControls: () => (/* binding */ CallControls),\n/* harmony export */   CallParticipantListing: () => (/* binding */ CallParticipantListing),\n/* harmony export */   CallParticipantListingItem: () => (/* binding */ CallParticipantListingItem),\n/* harmony export */   CallParticipantsList: () => (/* binding */ CallParticipantsList),\n/* harmony export */   CallPreview: () => (/* binding */ CallPreview),\n/* harmony export */   CallRecordingList: () => (/* binding */ CallRecordingList),\n/* harmony export */   CallRecordingListHeader: () => (/* binding */ CallRecordingListHeader),\n/* harmony export */   CallRecordingListItem: () => (/* binding */ CallRecordingListItem),\n/* harmony export */   CallState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallState),\n/* harmony export */   CallStats: () => (/* binding */ CallStats),\n/* harmony export */   CallStatsButton: () => (/* binding */ CallStatsButton),\n/* harmony export */   CallStatsLatencyChart: () => (/* binding */ CallStatsLatencyChart),\n/* harmony export */   CallType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallType),\n/* harmony export */   CallTypes: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes),\n/* harmony export */   CallingState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState),\n/* harmony export */   CameraManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManager),\n/* harmony export */   CameraManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManagerState),\n/* harmony export */   CancelCallButton: () => (/* binding */ CancelCallButton),\n/* harmony export */   CancelCallConfirmButton: () => (/* binding */ CancelCallConfirmButton),\n/* harmony export */   ChannelConfigWithInfoAutomodBehaviorEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ChannelConfigWithInfoAutomodBehaviorEnum),\n/* harmony export */   ChannelConfigWithInfoAutomodEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ChannelConfigWithInfoAutomodEnum),\n/* harmony export */   ChannelConfigWithInfoBlocklistBehaviorEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ChannelConfigWithInfoBlocklistBehaviorEnum),\n/* harmony export */   CompositeButton: () => (/* binding */ CompositeButton),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DEFAULT_LANGUAGE: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_LANGUAGE),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_NAMESPACE),\n/* harmony export */   DebounceType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DebounceType),\n/* harmony export */   DefaultParticipantViewUI: () => (/* binding */ DefaultParticipantViewUI),\n/* harmony export */   DefaultReactionsMenu: () => (/* binding */ DefaultReactionsMenu),\n/* harmony export */   DefaultScreenShareOverlay: () => (/* binding */ DefaultScreenShareOverlay),\n/* harmony export */   DefaultVideoPlaceholder: () => (/* binding */ DefaultVideoPlaceholder),\n/* harmony export */   DeviceSelector: () => (/* binding */ DeviceSelector),\n/* harmony export */   DeviceSelectorAudioInput: () => (/* binding */ DeviceSelectorAudioInput),\n/* harmony export */   DeviceSelectorAudioOutput: () => (/* binding */ DeviceSelectorAudioOutput),\n/* harmony export */   DeviceSelectorVideo: () => (/* binding */ DeviceSelectorVideo),\n/* harmony export */   DeviceSettings: () => (/* binding */ DeviceSettings),\n/* harmony export */   DropDownSelect: () => (/* binding */ DropDownSelect),\n/* harmony export */   DropDownSelectOption: () => (/* binding */ DropDownSelectOption),\n/* harmony export */   DynascaleManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DynascaleManager),\n/* harmony export */   EmptyCallRecordingListing: () => (/* binding */ EmptyCallRecordingListing),\n/* harmony export */   ErrorFromResponse: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ErrorFromResponse),\n/* harmony export */   GenericMenu: () => (/* binding */ GenericMenu),\n/* harmony export */   GenericMenuButtonItem: () => (/* binding */ GenericMenuButtonItem),\n/* harmony export */   Icon: () => (/* binding */ Icon),\n/* harmony export */   IconButton: () => (/* binding */ IconButton),\n/* harmony export */   InputMediaDeviceManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManagerState),\n/* harmony export */   LivestreamLayout: () => (/* binding */ LivestreamLayout),\n/* harmony export */   LivestreamPlayer: () => (/* binding */ LivestreamPlayer),\n/* harmony export */   LoadingCallRecordingListing: () => (/* binding */ LoadingCallRecordingListing),\n/* harmony export */   LoadingIndicator: () => (/* binding */ LoadingIndicator),\n/* harmony export */   MenuToggle: () => (/* binding */ MenuToggle),\n/* harmony export */   MenuVisualType: () => (/* binding */ MenuVisualType),\n/* harmony export */   MicrophoneManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManagerState),\n/* harmony export */   NoiseCancellationProvider: () => (/* binding */ NoiseCancellationProvider),\n/* harmony export */   NoiseCancellationSettingsModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.NoiseCancellationSettingsModeEnum),\n/* harmony export */   Notification: () => (/* binding */ Notification),\n/* harmony export */   OwnCapability: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability),\n/* harmony export */   PaginatedGridLayout: () => (/* binding */ PaginatedGridLayout),\n/* harmony export */   ParticipantActionsContextMenu: () => (/* binding */ ParticipantActionsContextMenu),\n/* harmony export */   ParticipantDetails: () => (/* binding */ ParticipantDetails),\n/* harmony export */   ParticipantView: () => (/* binding */ ParticipantView),\n/* harmony export */   ParticipantViewContext: () => (/* binding */ ParticipantViewContext),\n/* harmony export */   ParticipantsAudio: () => (/* binding */ ParticipantsAudio),\n/* harmony export */   PermissionNotification: () => (/* binding */ PermissionNotification),\n/* harmony export */   PermissionRequestList: () => (/* binding */ PermissionRequestList),\n/* harmony export */   PermissionRequests: () => (/* binding */ PermissionRequests),\n/* harmony export */   ReactionsButton: () => (/* binding */ ReactionsButton),\n/* harmony export */   RecordCallButton: () => (/* binding */ RecordCallButton),\n/* harmony export */   RecordCallConfirmationButton: () => (/* binding */ RecordCallConfirmationButton),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestQualityEnum),\n/* harmony export */   RecordingInProgressNotification: () => (/* binding */ RecordingInProgressNotification),\n/* harmony export */   Restricted: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted),\n/* harmony export */   RingingCall: () => (/* binding */ RingingCall),\n/* harmony export */   RingingCallControls: () => (/* binding */ RingingCallControls),\n/* harmony export */   RxUtils: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RxUtils),\n/* harmony export */   ScreenShareButton: () => (/* binding */ ScreenShareButton),\n/* harmony export */   ScreenShareManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareState),\n/* harmony export */   SearchInput: () => (/* binding */ SearchInput),\n/* harmony export */   SearchResults: () => (/* binding */ SearchResults),\n/* harmony export */   SfuEvents: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuEvents),\n/* harmony export */   SfuModels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels),\n/* harmony export */   SpeakerLayout: () => (/* binding */ SpeakerLayout),\n/* harmony export */   SpeakerManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerState),\n/* harmony export */   SpeakingWhileMutedNotification: () => (/* binding */ SpeakingWhileMutedNotification),\n/* harmony export */   SpeechIndicator: () => (/* binding */ SpeechIndicator),\n/* harmony export */   StatCard: () => (/* binding */ StatCard),\n/* harmony export */   StatCardExplanation: () => (/* binding */ StatCardExplanation),\n/* harmony export */   StatsTag: () => (/* binding */ StatsTag),\n/* harmony export */   Statuses: () => (/* binding */ Statuses),\n/* harmony export */   StreamCall: () => (/* binding */ StreamCall),\n/* harmony export */   StreamCallProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18nProvider),\n/* harmony export */   StreamSfuClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamSfuClient),\n/* harmony export */   StreamTheme: () => (/* binding */ StreamTheme),\n/* harmony export */   StreamVideo: () => (/* binding */ StreamVideo),\n/* harmony export */   StreamVideoClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoClient),\n/* harmony export */   StreamVideoProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoWriteableStateStore),\n/* harmony export */   TextButton: () => (/* binding */ TextButton),\n/* harmony export */   ToggleAudioOutputButton: () => (/* binding */ ToggleAudioOutputButton),\n/* harmony export */   ToggleAudioPreviewButton: () => (/* binding */ ToggleAudioPreviewButton),\n/* harmony export */   ToggleAudioPublishingButton: () => (/* binding */ ToggleAudioPublishingButton),\n/* harmony export */   ToggleVideoPreviewButton: () => (/* binding */ ToggleVideoPreviewButton),\n/* harmony export */   ToggleVideoPublishingButton: () => (/* binding */ ToggleVideoPublishingButton),\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsRequestModeEnum),\n/* harmony export */   TranscriptionSettingsResponseModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsResponseModeEnum),\n/* harmony export */   Video: () => (/* binding */ Video$1),\n/* harmony export */   VideoPreview: () => (/* binding */ VideoPreview),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   VideoSettingsResponseCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsResponseCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState),\n/* harmony export */   WithTooltip: () => (/* binding */ WithTooltip),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators),\n/* harmony export */   conditional: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.conditional),\n/* harmony export */   createSoundDetector: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.createSoundDetector),\n/* harmony export */   defaultReactions: () => (/* binding */ defaultReactions),\n/* harmony export */   defaultSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset),\n/* harmony export */   defaultTranslationFunction: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.defaultTranslationFunction),\n/* harmony export */   descending: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.descending),\n/* harmony export */   deviceIds$: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.dominantSpeaker),\n/* harmony export */   getAudioBrowserPermission: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioBrowserPermission),\n/* harmony export */   getAudioDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioStream),\n/* harmony export */   getClientDetails: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getClientDetails),\n/* harmony export */   getDeviceInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getDeviceInfo),\n/* harmony export */   getLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger),\n/* harmony export */   getOSInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getOSInfo),\n/* harmony export */   getScreenShareStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getSdkInfo),\n/* harmony export */   getVideoBrowserPermission: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoBrowserPermission),\n/* harmony export */   getVideoDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getWebRTCInfo),\n/* harmony export */   hasAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio),\n/* harmony export */   hasScreenShare: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare),\n/* harmony export */   hasScreenShareAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio),\n/* harmony export */   hasVideo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo),\n/* harmony export */   isPinned: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.isPinned),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logLevels),\n/* harmony export */   logToConsole: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logToConsole),\n/* harmony export */   mapToRegistry: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.mapToRegistry),\n/* harmony export */   name: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name),\n/* harmony export */   noopComparator: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.pinned),\n/* harmony export */   publishingAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingAudio),\n/* harmony export */   publishingVideo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingVideo),\n/* harmony export */   reactionType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.reactionType),\n/* harmony export */   role: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.role),\n/* harmony export */   screenSharing: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel),\n/* harmony export */   setLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogger),\n/* harmony export */   setOSInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setOSInfo),\n/* harmony export */   setSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo),\n/* harmony export */   setWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speaking),\n/* harmony export */   translations: () => (/* binding */ translations),\n/* harmony export */   useBackgroundFilters: () => (/* binding */ useBackgroundFilters),\n/* harmony export */   useCall: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall),\n/* harmony export */   useCallStateHooks: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks),\n/* harmony export */   useCalls: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCalls),\n/* harmony export */   useConnectedUser: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser),\n/* harmony export */   useCreateI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCreateI18n),\n/* harmony export */   useHorizontalScrollPosition: () => (/* binding */ useHorizontalScrollPosition),\n/* harmony export */   useI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n),\n/* harmony export */   useMenuContext: () => (/* binding */ useMenuContext),\n/* harmony export */   useNoiseCancellation: () => (/* binding */ useNoiseCancellation),\n/* harmony export */   useParticipantViewContext: () => (/* binding */ useParticipantViewContext),\n/* harmony export */   usePersistedDevicePreferences: () => (/* binding */ usePersistedDevicePreferences),\n/* harmony export */   useRequestPermission: () => (/* binding */ useRequestPermission),\n/* harmony export */   useStore: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStore),\n/* harmony export */   useStreamVideoClient: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStreamVideoClient),\n/* harmony export */   useTrackElementVisibility: () => (/* binding */ useTrackElementVisibility),\n/* harmony export */   useVerticalScrollPosition: () => (/* binding */ useVerticalScrollPosition)\n/* harmony export */ });\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n/* harmony import */ var _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stream-io/video-react-bindings */ \"(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @stream-io/video-filters-web */ \"(ssr)/./node_modules/@stream-io/video-filters-web/dist/index.es.js\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! chart.js */ \"(ssr)/./node_modules/chart.js/dist/chart.js\");\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-chartjs-2 */ \"(ssr)/./node_modules/react-chartjs-2/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Audio = ({ participant, trackType = 'audioTrack', ...rest }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [audioElement, setAudioElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const { userId, sessionId } = participant;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !audioElement)\n            return;\n        const cleanup = call.bindAudioElement(audioElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, sessionId, audioElement, trackType]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"audio\", { autoPlay: true, ...rest, ref: setAudioElement, \"data-user-id\": userId, \"data-session-id\": sessionId, \"data-track-type\": trackType }));\n};\nAudio.displayName = 'Audio';\n\nconst ParticipantsAudio = (props) => {\n    const { participants, audioProps } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: participants.map((participant) => {\n            if (participant.isLocalParticipant)\n                return null;\n            const { audioStream, screenShareAudioStream, sessionId } = participant;\n            const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n            const audioTrackElement = hasAudioTrack && audioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"audioTrack\", participant: participant }));\n            const hasScreenShareAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio)(participant);\n            const screenShareAudioTrackElement = hasScreenShareAudioTrack &&\n                screenShareAudioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"screenShareAudioTrack\", participant: participant }));\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [audioTrackElement, screenShareAudioTrackElement] }, sessionId));\n        }) }));\n};\nParticipantsAudio.displayName = 'ParticipantsAudio';\n\nconst ParticipantViewContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(undefined);\nconst useParticipantViewContext = () => (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ParticipantViewContext);\n\nconst Avatar = ({ imageSrc, name, style, className, ...rest }) => {\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(!imageSrc || error) && name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AvatarFallback, { className: className, style: style, names: [name] })), imageSrc && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: \"avatar\", className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar', className), src: imageSrc, style: style, ...rest }))] }));\n};\nconst AvatarFallback = ({ className, names, style, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar--initials-fallback', className), style: style, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { children: [names[0][0], names[1]?.[0]] }) }));\n};\n\n/**\n * The context for the background filters.\n */\nconst BackgroundFiltersContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(undefined);\n/**\n * A hook to access the background filters context API.\n */\nconst useBackgroundFilters = () => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(BackgroundFiltersContext);\n    if (!context) {\n        throw new Error('useBackgroundFilters must be used within a BackgroundFiltersProvider');\n    }\n    return context;\n};\n/**\n * A provider component that enables the use of background filters in your app.\n *\n * Please make sure you have the `@stream-io/video-filters-web` package installed\n * in your project before using this component.\n */\nconst BackgroundFiltersProvider = (props) => {\n    const { children, backgroundImages = [], backgroundFilter: bgFilterFromProps = undefined, backgroundImage: bgImageFromProps = undefined, backgroundBlurLevel: bgBlurLevelFromProps = 'high', tfFilePath, modelFilePath, basePath, onError, } = props;\n    const [backgroundFilter, setBackgroundFilter] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(bgFilterFromProps);\n    const [backgroundImage, setBackgroundImage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(bgImageFromProps);\n    const [backgroundBlurLevel, setBackgroundBlurLevel] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(bgBlurLevelFromProps);\n    const applyBackgroundImageFilter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((imageUrl) => {\n        setBackgroundFilter('image');\n        setBackgroundImage(imageUrl);\n    }, []);\n    const applyBackgroundBlurFilter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((blurLevel = 'high') => {\n        setBackgroundFilter('blur');\n        setBackgroundBlurLevel(blurLevel);\n    }, []);\n    const disableBackgroundFilter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n        setBackgroundFilter(undefined);\n        setBackgroundImage(undefined);\n        setBackgroundBlurLevel('high');\n    }, []);\n    const [isSupported, setIsSupported] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        (0,_stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_6__.isPlatformSupported)().then(setIsSupported);\n    }, []);\n    const [tfLite, setTfLite] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // don't try to load TFLite if the platform is not supported\n        if (!isSupported)\n            return;\n        (0,_stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_6__.loadTFLite)({ basePath, modelFilePath, tfFilePath })\n            .then(setTfLite)\n            .catch((err) => console.error('Failed to load TFLite', err));\n    }, [basePath, isSupported, modelFilePath, tfFilePath]);\n    const handleError = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((error) => {\n        (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger)(['filters'])('warn', 'Filter encountered an error and will be disabled');\n        disableBackgroundFilter();\n        onError?.(error);\n    }, [disableBackgroundFilter, onError]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(BackgroundFiltersContext.Provider, { value: {\n            isSupported,\n            isReady: !!tfLite,\n            backgroundImage,\n            backgroundBlurLevel,\n            backgroundFilter,\n            disableBackgroundFilter,\n            applyBackgroundBlurFilter,\n            applyBackgroundImageFilter,\n            backgroundImages,\n            tfFilePath,\n            modelFilePath,\n            basePath,\n            onError: handleError,\n        }, children: [children, tfLite && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BackgroundFilters, { tfLite: tfLite })] }));\n};\nconst BackgroundFilters = (props) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { children, start } = useRenderer(props.tfLite);\n    const { backgroundFilter, onError } = useBackgroundFilters();\n    const handleErrorRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(undefined);\n    handleErrorRef.current = onError;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !backgroundFilter)\n            return;\n        const { unregister } = call.camera.registerFilter((ms) => start(ms, (error) => handleErrorRef.current?.(error)));\n        return () => {\n            unregister();\n        };\n    }, [backgroundFilter, call, start]);\n    return children;\n};\nconst useRenderer = (tfLite) => {\n    const { backgroundFilter, backgroundBlurLevel, backgroundImage } = useBackgroundFilters();\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const bgImageRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const [videoSize, setVideoSize] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        width: 1920,\n        height: 1080,\n    });\n    const start = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((ms, onError) => {\n        let outputStream;\n        let renderer;\n        const output = new Promise((resolve, reject) => {\n            if (!backgroundFilter) {\n                reject(new Error('No filter specified'));\n                return;\n            }\n            const videoEl = videoRef.current;\n            const canvasEl = canvasRef.current;\n            const bgImageEl = bgImageRef.current;\n            if (!videoEl || !canvasEl || (backgroundImage && !bgImageEl)) {\n                // You should start renderer in effect or event handlers\n                reject(new Error('Renderer started before elements are ready'));\n                return;\n            }\n            videoEl.srcObject = ms;\n            videoEl.play().then(() => {\n                const [track] = ms.getVideoTracks();\n                if (!track) {\n                    reject(new Error('No video tracks in input media stream'));\n                    return;\n                }\n                const trackSettings = track.getSettings();\n                (0,react_dom__WEBPACK_IMPORTED_MODULE_5__.flushSync)(() => setVideoSize({\n                    width: trackSettings.width ?? 0,\n                    height: trackSettings.height ?? 0,\n                }));\n                renderer = (0,_stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_6__.createRenderer)(tfLite, videoEl, canvasEl, {\n                    backgroundFilter,\n                    backgroundBlurLevel,\n                    backgroundImage: bgImageEl ?? undefined,\n                }, onError);\n                outputStream = canvasEl.captureStream();\n                resolve(outputStream);\n            }, () => {\n                reject(new Error('Could not play the source video stream'));\n            });\n        });\n        return {\n            output,\n            stop: () => {\n                renderer?.dispose();\n                videoRef.current && (videoRef.current.srcObject = null);\n                outputStream && (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.disposeOfMediaStream)(outputStream);\n            },\n        };\n    }, [backgroundBlurLevel, backgroundFilter, backgroundImage, tfLite]);\n    const children = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__background-filters\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__background-filters__video', videoSize.height > videoSize.width &&\n                    'str-video__background-filters__video--tall'), ref: videoRef, playsInline: true, muted: true, controls: false, ...videoSize }), backgroundImage && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { className: \"str-video__background-filters__background-image\", alt: \"Background\", ref: bgImageRef, src: backgroundImage, ...videoSize })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"canvas\", { className: \"str-video__background-filters__target-canvas\", ...videoSize, ref: canvasRef })] }));\n    return {\n        start,\n        children,\n    };\n};\n\nconst useFloatingUIPreset = ({ middleware = [], placement, strategy, offset: offsetInPx = 10, }) => {\n    const { refs, x, y, update, elements: { domReference, floating }, context, } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useFloating)({\n        placement,\n        strategy,\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.offset)(offsetInPx),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.shift)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.flip)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.size)({\n                padding: 10,\n                apply: ({ availableHeight, elements }) => {\n                    Object.assign(elements.floating.style, {\n                        maxHeight: `${availableHeight}px`,\n                    });\n                },\n            }),\n            ...middleware,\n        ],\n    });\n    // handle window resizing\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!domReference || !floating)\n            return;\n        const cleanup = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_9__.autoUpdate)(domReference, floating, update);\n        return () => cleanup();\n    }, [domReference, floating, update]);\n    return { refs, x, y, domReference, floating, strategy, context };\n};\n\nconst defaultDevice = 'default';\n/**\n * This hook will persist the device settings to local storage.\n *\n * @param key the key to use for local storage.\n */\nconst usePersistDevicePreferences = (key) => {\n    const { useMicrophoneState, useCameraState, useSpeakerState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const mic = useMicrophoneState();\n    const camera = useCameraState();\n    const speaker = useSpeakerState();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        if (call.state.callingState === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT)\n            return;\n        try {\n            const preferences = {\n                mic: {\n                    selectedDeviceId: mic.selectedDevice || defaultDevice,\n                    muted: mic.isMute,\n                },\n                camera: {\n                    selectedDeviceId: camera.selectedDevice || defaultDevice,\n                    muted: camera.isMute,\n                },\n                speaker: {\n                    selectedDeviceId: speaker.selectedDevice || defaultDevice,\n                    muted: false,\n                },\n            };\n            window.localStorage.setItem(key, JSON.stringify(preferences));\n        }\n        catch (err) {\n            console.warn('Failed to save device preferences', err);\n        }\n    }, [\n        call,\n        camera.isMute,\n        camera.selectedDevice,\n        key,\n        mic.isMute,\n        mic.selectedDevice,\n        speaker.selectedDevice,\n    ]);\n};\n/**\n * This hook will apply the device settings from local storage.\n *\n * @param key the key to use for local storage.\n */\nconst useApplyDevicePreferences = (key) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        if (call.state.callingState === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT)\n            return;\n        const apply = async () => {\n            const initMic = async (setting) => {\n                await call.microphone.select(parseDeviceId(setting.selectedDeviceId));\n                if (setting.muted) {\n                    await call.microphone.disable();\n                }\n                else {\n                    await call.microphone.enable();\n                }\n            };\n            const initCamera = async (setting) => {\n                await call.camera.select(parseDeviceId(setting.selectedDeviceId));\n                if (setting.muted) {\n                    await call.camera.disable();\n                }\n                else {\n                    await call.camera.enable();\n                }\n            };\n            const initSpeaker = (setting) => {\n                call.speaker.select(parseDeviceId(setting.selectedDeviceId) ?? '');\n            };\n            let preferences = null;\n            try {\n                preferences = JSON.parse(window.localStorage.getItem(key));\n            }\n            catch (err) {\n                console.warn('Failed to load device preferences', err);\n            }\n            if (preferences) {\n                await initMic(preferences.mic);\n                await initCamera(preferences.camera);\n                initSpeaker(preferences.speaker);\n            }\n        };\n        apply().catch((err) => {\n            console.warn('Failed to apply device preferences', err);\n        });\n    }, [call, key]);\n};\n/**\n * This hook will apply and persist the device preferences from local storage.\n *\n * @param key the key to use for local storage.\n */\nconst usePersistedDevicePreferences = (key = '@stream-io/device-preferences') => {\n    useApplyDevicePreferences(key);\n    usePersistDevicePreferences(key);\n};\nconst parseDeviceId = (deviceId) => deviceId !== defaultDevice ? deviceId : undefined;\n\nconst SCROLL_THRESHOLD = 10;\n/**\n * Hook which observes element's scroll position and returns text value based on the\n * position of the scrollbar (`top`, `bottom`, `between` and `null` if no scrollbar is available)\n */\nconst useVerticalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasVerticalScrollbar = element.scrollHeight > element.clientHeight;\n            if (!hasVerticalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheTop = element.scrollTop <= threshold;\n            if (isAtTheTop)\n                return setScrollPosition('top');\n            const isAtTheBottom = Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) <= threshold;\n            if (isAtTheBottom)\n                return setScrollPosition('bottom');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\nconst useHorizontalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n            if (!hasHorizontalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheStart = element.scrollLeft <= threshold;\n            if (isAtTheStart)\n                return setScrollPosition('start');\n            const isAtTheEnd = Math.abs(element.scrollWidth - element.scrollLeft - element.clientWidth) <= threshold;\n            if (isAtTheEnd)\n                return setScrollPosition('end');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\n\nconst useToggleCallRecording = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useIsCallRecordingInProgress } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isCallRecordingInProgress = useIsCallRecordingInProgress();\n    const [isAwaitingResponse, setIsAwaitingResponse] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    // TODO: add permissions\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // we wait until call.recording_started/stopped event to flips the\n        // `isCallRecordingInProgress` state variable.\n        // Once the flip happens, we remove the loading indicator\n        setIsAwaitingResponse((isAwaiting) => {\n            if (isAwaiting)\n                return false;\n            return isAwaiting;\n        });\n    }, [isCallRecordingInProgress]);\n    const toggleCallRecording = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {\n        try {\n            setIsAwaitingResponse(true);\n            if (isCallRecordingInProgress) {\n                await call?.stopRecording();\n            }\n            else {\n                await call?.startRecording();\n            }\n        }\n        catch (e) {\n            console.error(`Failed start recording`, e);\n        }\n    }, [call, isCallRecordingInProgress]);\n    return { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress };\n};\n\nconst useRequestPermission = (permission) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const [isAwaitingPermission, setIsAwaitingPermission] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false); // TODO: load with possibly pending state\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const reset = () => setIsAwaitingPermission(false);\n        if (hasPermission)\n            reset();\n    }, [hasPermission]);\n    const requestPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {\n        if (hasPermission)\n            return true;\n        const canRequestPermission = !!call?.permissionsContext.canRequest(permission);\n        if (isAwaitingPermission || !canRequestPermission)\n            return false;\n        setIsAwaitingPermission(true);\n        try {\n            await call?.requestPermissions({\n                permissions: [permission],\n            });\n        }\n        catch (error) {\n            setIsAwaitingPermission(false);\n            throw new Error(`requestPermission failed: ${error}`);\n        }\n        return false;\n    }, [call, hasPermission, isAwaitingPermission, permission]);\n    return {\n        requestPermission,\n        hasPermission,\n        canRequestPermission: !!call?.permissionsContext.canRequest(permission),\n        isAwaitingPermission,\n    };\n};\n\nvar MenuVisualType;\n(function (MenuVisualType) {\n    MenuVisualType[\"PORTAL\"] = \"portal\";\n    MenuVisualType[\"MENU\"] = \"menu\";\n})(MenuVisualType || (MenuVisualType = {}));\n/**\n * Used to provide utility APIs to the components rendered inside the portal.\n */\nconst MenuContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\n/**\n * Access to the closes MenuContext.\n */\nconst useMenuContext = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(MenuContext);\n};\nconst MenuPortal = ({ children, refs, }) => {\n    const portalId = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => `str-video-portal-${Math.random().toString(36).substring(2, 9)}`, []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { id: portalId, className: \"str-video__portal\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingOverlay, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingPortal, { id: portalId, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__portal-content\", ref: refs.setFloating, children: children }) }) })] }));\n};\nconst MenuToggle = ({ ToggleButton, placement = 'top-start', strategy = 'absolute', offset, visualType = MenuVisualType.MENU, children, onToggle, }) => {\n    const [menuShown, setMenuShown] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const toggleHandler = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(onToggle);\n    toggleHandler.current = onToggle;\n    const { floating, domReference, refs, x, y } = useFloatingUIPreset({\n        placement,\n        strategy,\n        offset,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const handleClick = (event) => {\n            if (!floating && domReference?.contains(event.target)) {\n                setMenuShown(true);\n                toggleHandler.current?.(true);\n            }\n            else if (floating && !floating?.contains(event.target)) {\n                setMenuShown(false);\n                toggleHandler.current?.(false);\n            }\n        };\n        const handleKeyDown = (event) => {\n            if (event.key && // key can be undefined in some browsers\n                event.key.toLowerCase() === 'escape' &&\n                !event.altKey &&\n                !event.ctrlKey) {\n                setMenuShown(false);\n                toggleHandler.current?.(false);\n            }\n        };\n        document?.addEventListener('click', handleClick, { capture: true });\n        document?.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document?.removeEventListener('click', handleClick, { capture: true });\n            document?.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [floating, domReference]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [menuShown && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuContext.Provider, { value: { close: () => setMenuShown(false) }, children: visualType === MenuVisualType.PORTAL ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuPortal, { refs: refs, children: children })) : visualType === MenuVisualType.MENU ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__menu-container\", ref: refs.setFloating, style: {\n                        position: strategy,\n                        top: y ?? 0,\n                        left: x ?? 0,\n                        overflowY: 'auto',\n                    }, role: \"menu\", children: children })) : null })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleButton, { menuShown: menuShown, ref: refs.setReference })] }));\n};\n\nconst GenericMenu = ({ children, onItemClick, }) => {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__generic-menu\", ref: ref, onClick: (e) => {\n            if (onItemClick &&\n                e.target !== ref.current &&\n                ref.current?.contains(e.target)) {\n                onItemClick(e);\n            }\n        }, children: children }));\n};\nconst GenericMenuButtonItem = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"li\", { className: \"str-video__generic-menu--item\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, children: children }) }));\n};\n\nconst Icon = ({ className, icon }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__icon', icon && `str-video__icon--${icon}`, className) }));\n\nconst IconButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function IconButton(props, ref) {\n    const { icon, enabled, variant, onClick, className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-controls__button', className, {\n            [`str-video__call-controls__button--variant-${variant}`]: variant,\n            'str-video__call-controls__button--enabled': enabled,\n        }), onClick: (e) => {\n            e.preventDefault();\n            onClick?.(e);\n        }, ref: ref, ...rest, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: icon }) }));\n});\n\nconst isComponentType = (elementOrComponent) => {\n    return elementOrComponent === null\n        ? false\n        : !(0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(elementOrComponent);\n};\n\nconst chunk = (array, size) => {\n    const chunkCount = Math.ceil(array.length / size);\n    return Array.from({ length: chunkCount }, (_, index) => array.slice(size * index, size * index + size));\n};\n\nconst applyElementToRef = (ref, element) => {\n    if (!ref)\n        return;\n    if (typeof ref === 'function')\n        return ref(element);\n    ref.current = element;\n};\n\nconst CompositeButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CompositeButton({ caption, children, className, active, Menu, menuPlacement, menuOffset, title, ToggleMenuButton = DefaultToggleMenuButton, variant, onClick, onMenuToggle, ...restButtonProps }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button', className, {\n            'str-video__composite-button--caption': caption,\n            'str-video__composite-button--menu': Menu,\n        }), title: title, ref: ref, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button__button-group', {\n                    'str-video__composite-button__button-group--active': active,\n                    'str-video__composite-button__button-group--active-primary': active && variant === 'primary',\n                    'str-video__composite-button__button-group--active-secondary': active && variant === 'secondary',\n                }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__composite-button__button\", onClick: (e) => {\n                            e.preventDefault();\n                            onClick?.(e);\n                        }, ...restButtonProps, children: children }), Menu && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { offset: menuOffset, placement: menuPlacement, ToggleButton: ToggleMenuButton, onToggle: onMenuToggle, children: isComponentType(Menu) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) : Menu }))] }), caption && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__composite-button__caption\", children: caption }))] }));\n});\nconst DefaultToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultToggleMenuButton({ menuShown }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__menu-toggle-button', {\n            'str-video__menu-toggle-button--active': menuShown,\n        }), icon: menuShown ? 'caret-down' : 'caret-up', ref: ref }));\n});\n\nconst TextButton = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, className: \"str-video__text-button\", children: children }));\n};\n\nconst AcceptCallButton = ({ disabled, onAccept, onClick, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.join();\n            onAccept?.();\n        }\n    }, [onClick, onAccept, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-accept\", variant: \"success\", \"data-testid\": \"accept-call-button\", onClick: handleClick }));\n};\n\nconst Notification = (props) => {\n    const { isVisible, message, children, visibilityTimeout, resetIsVisible, placement = 'top', iconClassName = 'str-video__notification__icon', close, } = props;\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement,\n        strategy: 'absolute',\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isVisible || !visibilityTimeout || !resetIsVisible)\n            return;\n        const timeout = setTimeout(() => {\n            resetIsVisible();\n        }, visibilityTimeout);\n        return () => clearTimeout(timeout);\n    }, [isVisible, resetIsVisible, visibilityTimeout]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: refs.setReference, children: [isVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__notification\", ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, children: [iconClassName && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: iconClassName }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__notification__message\", children: message }), close ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: \"str-video__icon str-video__icon--close str-video__notification__close\", onClick: close })) : null] })), children] }));\n};\n\nconst PermissionNotification = (props) => {\n    const { permission, isAwaitingApproval, messageApproved, messageAwaitingApproval, messageRevoked, visibilityTimeout = 3500, children, } = props;\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const prevHasPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(hasPermission);\n    const [showNotification, setShowNotification] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (hasPermission && !prevHasPermission.current) {\n            setShowNotification('granted');\n            prevHasPermission.current = true;\n        }\n        else if (!hasPermission && prevHasPermission.current) {\n            setShowNotification('revoked');\n            prevHasPermission.current = false;\n        }\n    }, [hasPermission]);\n    const resetIsVisible = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setShowNotification(undefined), []);\n    if (isAwaitingApproval) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isAwaitingApproval && !hasPermission, message: messageAwaitingApproval, children: children }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: !!showNotification, visibilityTimeout: visibilityTimeout, resetIsVisible: resetIsVisible, message: showNotification === 'granted' ? messageApproved : messageRevoked, children: children }));\n};\n\nconst SpeakingWhileMutedNotification = ({ children, text, placement, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { isSpeakingWhileMuted } = useMicrophoneState();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const message = text ?? t('You are muted. Unmute to speak.');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, isVisible: isSpeakingWhileMuted, placement: placement || 'top-start', children: children }));\n};\n\nconst RecordingInProgressNotification = ({ children, text, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { isCallRecordingInProgress } = useToggleCallRecording();\n    const [isVisible, setVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const message = text ?? t('Recording in progress...');\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (isCallRecordingInProgress) {\n            setVisible(true);\n        }\n        else {\n            setVisible(false);\n        }\n    }, [isCallRecordingInProgress]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, iconClassName: \"str-video__icon str-video__icon--recording-on\", isVisible: isVisible, placement: \"top-start\", close: () => setVisible(false), children: children }));\n};\n\nconst LoadingIndicator = ({ className, type = 'spinner', text, tooltip, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator', className), title: tooltip, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator__icon', type) }), text && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__loading-indicator-text\", children: text })] }));\n};\n\nconst Tooltip = ({ children, referenceElement, tooltipClassName, tooltipPlacement = 'top', visible = false, }) => {\n    const arrowRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const { refs, x, y, strategy, context } = useFloatingUIPreset({\n        placement: tooltipPlacement,\n        strategy: 'absolute',\n        middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.arrow)({ element: arrowRef })],\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        refs.setReference(referenceElement);\n    }, [referenceElement, refs]);\n    if (!visible)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__tooltip', tooltipClassName), ref: refs.setFloating, style: {\n            position: strategy,\n            top: y ?? 0,\n            left: x ?? 0,\n        }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingArrow, { ref: arrowRef, context: context, fill: \"var(--str-video__tooltip--background-color)\" }), children] }));\n};\n\nconst useEnterLeaveHandlers = ({ onMouseEnter, onMouseLeave, } = {}) => {\n    const [tooltipVisible, setTooltipVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(true);\n        onMouseEnter?.(e);\n    }, [onMouseEnter]);\n    const handleMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(false);\n        onMouseLeave?.(e);\n    }, [onMouseLeave]);\n    return { handleMouseEnter, handleMouseLeave, tooltipVisible };\n};\n\n// todo: duplicate of CallParticipantList.tsx#MediaIndicator - refactor to a single component\nconst WithTooltip = ({ title, tooltipClassName, tooltipPlacement, tooltipDisabled, ...props }) => {\n    const { handleMouseEnter, handleMouseLeave, tooltipVisible } = useEnterLeaveHandlers();\n    const [tooltipAnchor, setTooltipAnchor] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const tooltipActuallyVisible = !tooltipDisabled && Boolean(title) && tooltipVisible;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Tooltip, { referenceElement: tooltipAnchor, visible: tooltipActuallyVisible, tooltipClassName: tooltipClassName, tooltipPlacement: tooltipPlacement, children: title || '' }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: setTooltipAnchor, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, ...props })] }));\n};\n\nconst RecordEndConfirmation = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse } = useToggleCallRecording();\n    const { close } = useMenuContext();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-on\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"h2\", { className: \"str-video__end-recording__heading\", children: t('End recording') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__end-recording__description\", children: t('Are you sure you want end the recording?') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__actions\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"secondary\", onClick: close, children: t('Cancel') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"primary\", onClick: toggleCallRecording, children: isAwaitingResponse ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {}) : t('End recording') })] })] }));\n};\nconst ToggleEndRecordingMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleEndRecordingMenuButton(props, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: true, variant: \"secondary\", \"data-testid\": \"recording-stop-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" }) }));\n});\nconst RecordCallConfirmationButton = ({ caption, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = useToggleCallRecording();\n    if (isCallRecordingInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n            ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { ToggleButton: ToggleEndRecordingMenuButton, visualType: MenuVisualType.PORTAL, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordEndConfirmation, {}) }) }));\n    }\n    const title = isAwaitingResponse\n        ? t('Waiting for recording to start...')\n        : caption ?? t('Record call');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: title, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: \"secondary\", \"data-testid\": \"recording-start-button\", onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {})) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" })) }) }) }));\n};\nconst RecordCallButton = ({ caption }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = useToggleCallRecording();\n    let title = caption ?? t('Record call');\n    if (isAwaitingResponse) {\n        title = isCallRecordingInProgress\n            ? t('Waiting for recording to stop...')\n            : t('Waiting for recording to start...');\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: \"secondary\", \"data-testid\": isCallRecordingInProgress\n                ? 'recording-stop-button'\n                : 'recording-start-button', title: title, onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {})) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isCallRecordingInProgress ? 'recording-on' : 'recording-off' })) }) }));\n};\n\nconst defaultEmojiReactionMap = {\n    ':like:': '👍',\n    ':raise-hand:': '✋',\n    ':fireworks:': '🎉',\n    ':dislike:': '👎',\n    ':heart:': '❤️',\n    ':smile:': '😀',\n};\nconst Reaction = ({ participant: { reaction, sessionId }, hideAfterTimeoutInMs = 5500, emojiReactionMap = defaultEmojiReactionMap, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !reaction)\n            return;\n        const timeoutId = setTimeout(() => {\n            call.resetReaction(sessionId);\n        }, hideAfterTimeoutInMs);\n        return () => {\n            clearTimeout(timeoutId);\n        };\n    }, [call, hideAfterTimeoutInMs, reaction, sessionId]);\n    if (!reaction)\n        return null;\n    const { emoji_code: emojiCode } = reaction;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__reaction\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__reaction__emoji\", children: emojiCode && emojiReactionMap[emojiCode] }) }));\n};\n\nconst defaultReactions = [\n    {\n        type: 'reaction',\n        emoji_code: ':like:',\n    },\n    {\n        // TODO OL: use `prompt` type?\n        type: 'raised-hand',\n        emoji_code: ':raise-hand:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':fireworks:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':dislike:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':heart:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':smile:',\n    },\n];\nconst ReactionsButton = ({ reactions = defaultReactions, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.CREATE_REACTION], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top\", ToggleButton: ToggleReactionsMenuButton, visualType: MenuVisualType.MENU, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultReactionsMenu, { reactions: reactions }) }) }));\n};\nconst ToggleReactionsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleReactionsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: t('Reactions'), tooltipDisabled: menuShown, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, variant: \"primary\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"reactions\" }) }) }));\n});\nconst DefaultReactionsMenu = ({ reactions, layout = 'horizontal', }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { close } = useMenuContext();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__reactions-menu', {\n            'str-video__reactions-menu--horizontal': layout === 'horizontal',\n            'str-video__reactions-menu--vertical': layout === 'vertical',\n        }), children: reactions.map((reaction) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__reactions-menu__button\", onClick: () => {\n                call?.sendReaction(reaction);\n                close?.();\n            }, children: reaction.emoji_code && defaultEmojiReactionMap[reaction.emoji_code] }, reaction.emoji_code))) }));\n};\n\n/**\n * Wraps an event handler, silencing and logging exceptions (excluding the NotAllowedError\n * DOMException, which is a normal situation handled by the SDK)\n *\n * @param props component props, including the onError callback\n * @param handler event handler to wrap\n */\nconst createCallControlHandler = (props, handler) => {\n    const logger = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger)(['react-sdk']);\n    return async () => {\n        try {\n            await handler();\n        }\n        catch (error) {\n            if (props.onError) {\n                props.onError(error);\n                return;\n            }\n            if (!isNotAllowedError(error)) {\n                logger('error', 'Call control handler failed', error);\n            }\n        }\n    };\n};\nfunction isNotAllowedError(error) {\n    return error instanceof DOMException && error.name === 'NotAllowedError';\n}\n\nconst ScreenShareButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption } = props;\n    const { useHasOngoingScreenShare, useScreenShareState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isSomeoneScreenSharing = useHasOngoingScreenShare();\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE);\n    const callSettings = useCallSettings();\n    const isScreenSharingAllowed = callSettings?.screensharing.enabled;\n    const { screenShare, optimisticIsMute } = useScreenShareState();\n    const amIScreenSharing = !optimisticIsMute;\n    const disableScreenShareButton = !amIScreenSharing &&\n        (isSomeoneScreenSharing || isScreenSharingAllowed === false);\n    const handleClick = createCallControlHandler(props, async () => {\n        if (!hasPermission) {\n            await requestPermission();\n        }\n        else {\n            await screenShare.toggle();\n        }\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your screen.'), messageAwaitingApproval: t('Awaiting for an approval to share screen.'), messageRevoked: t('You can no longer share your screen.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: caption ?? t('Share screen'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isSomeoneScreenSharing || amIScreenSharing, caption: caption, variant: \"primary\", \"data-testid\": isSomeoneScreenSharing\n                        ? 'screen-share-stop-button'\n                        : 'screen-share-start-button', disabled: disableScreenShareButton, onClick: handleClick, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isSomeoneScreenSharing ? 'screen-share-on' : 'screen-share-off' }) }) }) }) }));\n};\n\nconst SelectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nconst Select = (props) => {\n    const { children, icon, defaultSelectedLabel, defaultSelectedIndex, handleSelect: handleSelectProp, } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [activeIndex, setActiveIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [selectedIndex, setSelectedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedIndex);\n    const [selectedLabel, setSelectedLabel] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedLabel);\n    const { refs, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useFloating)({\n        placement: 'bottom-start',\n        open: isOpen,\n        onOpenChange: setIsOpen,\n        whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_9__.autoUpdate,\n        middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.flip)()],\n    });\n    const elementsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const labelsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        setSelectedIndex(index);\n        handleSelectProp(index || 0);\n        setIsOpen(false);\n        if (index !== null) {\n            setSelectedLabel(labelsRef.current[index]);\n        }\n    }, [handleSelectProp]);\n    const handleTypeaheadMatch = (index) => {\n        if (isOpen) {\n            setActiveIndex(index);\n        }\n        else {\n            handleSelect(index);\n        }\n    };\n    const listNav = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useListNavigation)(context, {\n        listRef: elementsRef,\n        activeIndex,\n        selectedIndex,\n        onNavigate: setActiveIndex,\n    });\n    const typeahead = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useTypeahead)(context, {\n        listRef: labelsRef,\n        activeIndex,\n        selectedIndex,\n        onMatch: handleTypeaheadMatch,\n    });\n    const click = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useClick)(context);\n    const dismiss = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useDismiss)(context);\n    const role = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useRole)(context, { role: 'listbox' });\n    const { getReferenceProps, getFloatingProps, getItemProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useInteractions)([listNav, typeahead, click, dismiss, role]);\n    const selectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        activeIndex,\n        selectedIndex,\n        getItemProps,\n        handleSelect,\n    }), [activeIndex, selectedIndex, getItemProps, handleSelect]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown-selected\", ref: refs.setReference, tabIndex: 0, ...getReferenceProps(), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: \"str-video__dropdown-selected__label\", children: [icon && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__icon\", icon: icon })), selectedLabel] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__chevron\", icon: isOpen ? 'chevron-up' : 'chevron-down' })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SelectContext.Provider, { value: selectContext, children: isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingFocusManager, { context: context, modal: false, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__dropdown-list\", ref: refs.setFloating, ...getFloatingProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingList, { elementsRef: elementsRef, labelsRef: labelsRef, children: children }) }) })) })] }));\n};\nconst DropDownSelectOption = (props) => {\n    const { selected, label, icon } = props;\n    const { getItemProps, handleSelect } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SelectContext);\n    const { ref, index } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useListItem)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__dropdown-option', {\n            'str-video__dropdown-option--selected': selected,\n        }), ref: ref, ...getItemProps({\n            onClick: () => handleSelect(index),\n        }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-icon\", icon: icon }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__dropdown-label\", children: label })] }));\n};\nconst DropDownSelect = (props) => {\n    const { children, icon, handleSelect, defaultSelectedLabel, defaultSelectedIndex, } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Select, { icon: icon, handleSelect: handleSelect, defaultSelectedIndex: defaultSelectedIndex, defaultSelectedLabel: defaultSelectedLabel, children: children }));\n};\n\nconst DeviceSelectorOption = ({ disabled, id, label, onChange, name, selected, defaultChecked, value, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__option', {\n            'str-video__device-settings__option--selected': selected,\n            'str-video__device-settings__option--disabled': disabled,\n        }), htmlFor: id, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { type: \"radio\", name: name, onChange: onChange, value: value, id: id, checked: selected, defaultChecked: defaultChecked, disabled: disabled }), label] }));\n};\nconst DeviceSelectorList = (props) => {\n    const { devices = [], selectedDeviceId: selectedDeviceFromProps, title, type, onChange, } = props;\n    const { close } = useMenuContext();\n    // sometimes the browser (Chrome) will report the system-default device\n    // with an id of 'default'. In case when it doesn't, we'll select the first\n    // available device.\n    let selectedDeviceId = selectedDeviceFromProps;\n    if (devices.length > 0 &&\n        !devices.find((d) => d.deviceId === selectedDeviceId)) {\n        selectedDeviceId = devices[0].deviceId;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [title && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title })), !devices.length ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorOption, { id: `${type}--default`, label: \"Default\", name: type, defaultChecked: true, value: \"default\" })) : (devices.map((device) => {\n                return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorOption, { id: `${type}--${device.deviceId}`, value: device.deviceId, label: device.label, onChange: (e) => {\n                        onChange?.(e.target.value);\n                        close?.();\n                    }, name: type, selected: device.deviceId === selectedDeviceId || devices.length === 1 }, device.deviceId));\n            }))] }));\n};\nconst DeviceSelectorDropdown = (props) => {\n    const { devices = [], selectedDeviceId: selectedDeviceFromProps, title, onChange, icon, } = props;\n    // sometimes the browser (Chrome) will report the system-default device\n    // with an id of 'default'. In case when it doesn't, we'll select the first\n    // available device.\n    let selectedDeviceId = selectedDeviceFromProps;\n    if (devices.length > 0 &&\n        !devices.find((d) => d.deviceId === selectedDeviceId)) {\n        selectedDeviceId = devices[0].deviceId;\n    }\n    const selectedIndex = devices.findIndex((d) => d.deviceId === selectedDeviceId);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        onChange?.(devices[index].deviceId);\n    }, [devices, onChange]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelect, { icon: icon, defaultSelectedIndex: selectedIndex, defaultSelectedLabel: devices[selectedIndex]?.label, handleSelect: handleSelect, children: devices.map((device) => {\n                    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelectOption, { icon: icon, label: device.label, selected: device.deviceId === selectedDeviceId || devices.length === 1 }, device.deviceId));\n                }) })] }));\n};\nconst DeviceSelector = (props) => {\n    const { visualType = 'list', icon, placeholder, ...rest } = props;\n    if (visualType === 'list') {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorList, { ...rest });\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorDropdown, { ...rest, icon: icon, placeholder: placeholder }));\n};\n\nconst DeviceSelectorAudioInput = ({ title, visualType, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, selectedDevice, devices } = useMicrophoneState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], selectedDeviceId: selectedDevice, type: \"audioinput\", onChange: async (deviceId) => {\n            await microphone.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"mic\" }));\n};\nconst DeviceSelectorAudioOutput = ({ title, visualType, }) => {\n    const { useSpeakerState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { speaker, selectedDevice, devices, isDeviceSelectionSupported } = useSpeakerState();\n    if (!isDeviceSelectionSupported)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices, type: \"audiooutput\", selectedDeviceId: selectedDevice, onChange: (deviceId) => {\n            speaker.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"speaker\" }));\n};\n\nconst DeviceSelectorVideo = ({ title, visualType, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, devices, selectedDevice } = useCameraState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], type: \"videoinput\", selectedDeviceId: selectedDevice, onChange: async (deviceId) => {\n            await camera.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"camera\" }));\n};\n\nconst DeviceSettings = ({ visualType = MenuVisualType.MENU, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleDeviceSettingsMenuButton, visualType: visualType, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) }));\n};\nconst Menu = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { title: t('Select a Camera') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { title: t('Select a Mic') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioOutput, { title: t('Select Speakers') })] }));\n};\nconst ToggleDeviceSettingsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleDeviceSettingsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__button', {\n            'str-video__device-settings__button--active': menuShown,\n        }), title: t('Toggle device menu'), icon: \"device-settings\", ref: ref }));\n});\n\nconst ToggleAudioPreviewButton = (props) => {\n    const { caption, onMenuToggle, ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, optimisticIsMute, hasBrowserPermission } = useMicrophoneState();\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, () => microphone.toggle());\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasBrowserPermission\n            ? t('Check your browser audio permissions')\n            : caption ?? t('Mic'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), variant: \"secondary\", disabled: !hasBrowserPermission, \"data-testid\": optimisticIsMute\n                ? 'preview-audio-unmute-button'\n                : 'preview-audio-mute-button', onClick: handleClick, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                setTooltipDisabled(shown);\n                onMenuToggle?.(shown);\n            }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !optimisticIsMute ? 'mic' : 'mic-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser audio permissions'), children: \"!\" }))] }) }));\n};\nconst ToggleAudioPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { visualType: \"list\" }), menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO);\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, optimisticIsMute, hasBrowserPermission } = useMicrophoneState();\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, async () => {\n        if (!hasPermission) {\n            await requestPermission();\n        }\n        else {\n            await microphone.toggle();\n        }\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now speak.'), messageAwaitingApproval: t('Awaiting for an approval to speak.'), messageRevoked: t('You can no longer speak.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasPermission\n                    ? t('You have no permission to share your audio')\n                    : !hasBrowserPermission\n                        ? t('Check your browser mic permissions')\n                        : caption ?? t('Mic'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, variant: \"secondary\", disabled: !hasBrowserPermission || !hasPermission, \"data-testid\": optimisticIsMute ? 'audio-unmute-button' : 'audio-mute-button', onClick: handleClick, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                        setTooltipDisabled(shown);\n                        onMenuToggle?.(shown);\n                    }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: optimisticIsMute ? 'mic-off' : 'mic' }), (!hasBrowserPermission || !hasPermission) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" }))] }) }) }) }));\n};\n\nconst ToggleVideoPreviewButton = (props) => {\n    const { caption, Menu = DeviceSelectorVideo, menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, optimisticIsMute, hasBrowserPermission } = useCameraState();\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, () => camera.toggle());\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasBrowserPermission\n            ? t('Check your browser video permissions')\n            : caption ?? t('Video'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), variant: \"secondary\", \"data-testid\": optimisticIsMute\n                ? 'preview-video-unmute-button'\n                : 'preview-video-mute-button', onClick: handleClick, disabled: !hasBrowserPermission, Menu: Menu, menuPlacement: menuPlacement, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                setTooltipDisabled(shown);\n                onMenuToggle?.(shown);\n            }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !optimisticIsMute ? 'camera' : 'camera-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser video permissions'), children: \"!\" }))] }) }));\n};\nconst ToggleVideoPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { visualType: \"list\" }), menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO);\n    const { useCameraState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, optimisticIsMute, hasBrowserPermission } = useCameraState();\n    const callSettings = useCallSettings();\n    const isPublishingVideoAllowed = callSettings?.video.enabled;\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, async () => {\n        if (!hasPermission) {\n            await requestPermission();\n        }\n        else {\n            await camera.toggle();\n        }\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your video.'), messageAwaitingApproval: t('Awaiting for an approval to share your video.'), messageRevoked: t('You can no longer share your video.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasPermission\n                    ? t('You have no permission to share your video')\n                    : !hasBrowserPermission\n                        ? t('Check your browser video permissions')\n                        : !isPublishingVideoAllowed\n                            ? t('Video publishing is disabled by the system')\n                            : caption || t('Video'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, variant: \"secondary\", disabled: !hasBrowserPermission ||\n                        !hasPermission ||\n                        !isPublishingVideoAllowed, \"data-testid\": optimisticIsMute ? 'video-unmute-button' : 'video-mute-button', onClick: handleClick, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                        setTooltipDisabled(shown);\n                        onMenuToggle?.(shown);\n                    }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: optimisticIsMute ? 'camera-off' : 'camera' }), (!hasBrowserPermission ||\n                            !hasPermission ||\n                            !isPublishingVideoAllowed) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" }))] }) }) }) }));\n};\n\nconst EndCallMenu = (props) => {\n    const { onLeave, onEnd } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-call__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__leave\", type: \"button\", \"data-testid\": \"leave-call-button\", onClick: onLeave, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__leave-icon\", icon: \"logout\" }), t('Leave call')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.END_CALL], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__end\", type: \"button\", \"data-testid\": \"end-call-for-all-button\", onClick: onEnd, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__end-icon\", icon: \"call-end\" }), t('End call for all')] }) })] }));\n};\nconst CancelCallToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CancelCallToggleMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: t('Leave call'), tooltipDisabled: menuShown, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: menuShown ? 'close' : 'call-end', variant: menuShown ? 'active' : 'danger', \"data-testid\": \"leave-call-button\", ref: ref }) }));\n});\nconst CancelCallConfirmButton = ({ onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    const handleEndCall = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.endCall();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-start\", ToggleButton: CancelCallToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EndCallMenu, { onEnd: handleEndCall, onLeave: handleLeave }) }));\n};\nconst CancelCallButton = ({ disabled, caption, onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-end\", variant: \"danger\", title: caption ?? t('Leave call'), \"data-testid\": \"cancel-call-button\", onClick: handleClick }));\n};\n\nconst CallControls = ({ onLeave }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-controls\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeakingWhileMutedNotification, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleAudioPublishingButton, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleVideoPublishingButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ReactionsButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ScreenShareButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordCallButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onLeave: onLeave })] }));\n\nchart_js__WEBPACK_IMPORTED_MODULE_10__.Chart.register(chart_js__WEBPACK_IMPORTED_MODULE_10__.CategoryScale, chart_js__WEBPACK_IMPORTED_MODULE_10__.LinearScale, chart_js__WEBPACK_IMPORTED_MODULE_10__.LineElement, chart_js__WEBPACK_IMPORTED_MODULE_10__.PointElement);\nconst CallStatsLatencyChart = (props) => {\n    const { values } = props;\n    let max = 0;\n    const data = {\n        labels: values.map((point) => {\n            const date = new Date(point.x * 1000);\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }),\n        datasets: [\n            {\n                data: values.map((point) => {\n                    const { y } = point;\n                    max = Math.max(max, y);\n                    return point;\n                }),\n                borderColor: '#00e2a1',\n                backgroundColor: '#00e2a1',\n            },\n        ],\n    };\n    const options = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {\n        return {\n            maintainAspectRatio: false,\n            animation: {\n                duration: 0,\n            },\n            elements: {\n                line: {\n                    borderWidth: 1,\n                },\n                point: {\n                    radius: 2,\n                },\n            },\n            scales: {\n                y: {\n                    position: 'right',\n                    stacked: true,\n                    min: 0,\n                    max: Math.max(180, Math.ceil((max + 10) / 10) * 10),\n                    grid: {\n                        display: true,\n                        color: '#979ca0',\n                    },\n                    ticks: {\n                        stepSize: 30,\n                    },\n                },\n                x: {\n                    grid: {\n                        display: false,\n                    },\n                    ticks: {\n                        display: false,\n                    },\n                },\n            },\n        };\n    }, [max]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats-line-chart-container\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_chartjs_2__WEBPACK_IMPORTED_MODULE_11__.Line, { options: options, data: data, className: \"str-video__call-stats__latencychart\" }) }));\n};\n\nvar Statuses;\n(function (Statuses) {\n    Statuses[\"GOOD\"] = \"Good\";\n    Statuses[\"OK\"] = \"Ok\";\n    Statuses[\"BAD\"] = \"Bad\";\n})(Statuses || (Statuses = {}));\nconst statsStatus = ({ value, lowBound, highBound, }) => {\n    if (value <= lowBound) {\n        return Statuses.GOOD;\n    }\n    if (value >= lowBound && value <= highBound) {\n        return Statuses.OK;\n    }\n    if (value >= highBound) {\n        return Statuses.BAD;\n    }\n    return Statuses.GOOD;\n};\nconst CallStats = (props) => {\n    const { latencyLowBound = 75, latencyHighBound = 400 } = props;\n    const [latencyBuffer, setLatencyBuffer] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        const now = Date.now();\n        return Array.from({ length: 20 }, (_, i) => ({ x: now + i, y: 0 }));\n    });\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const [publishBitrate, setPublishBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const [subscribeBitrate, setSubscribeBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const previousStats = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const { useCallStatsReport } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callStatsReport = useCallStatsReport();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!callStatsReport)\n            return;\n        if (!previousStats.current) {\n            previousStats.current = callStatsReport;\n            return;\n        }\n        const previousCallStatsReport = previousStats.current;\n        setPublishBitrate(() => {\n            return calculatePublishBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setSubscribeBitrate(() => {\n            return calculateSubscribeBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setLatencyBuffer((latencyBuf) => {\n            const newLatencyBuffer = latencyBuf.slice(-19);\n            newLatencyBuffer.push({\n                x: callStatsReport.timestamp,\n                y: callStatsReport.publisherStats.averageRoundTripTimeInMs,\n            });\n            return newLatencyBuffer;\n        });\n        previousStats.current = callStatsReport;\n    }, [callStatsReport]);\n    const latencyComparison = {\n        lowBound: latencyLowBound,\n        highBound: latencyHighBound,\n        value: callStatsReport?.publisherStats.averageRoundTripTimeInMs || 0,\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats\", children: callStatsReport && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"call-latency\" }), t('Call Latency')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Very high latency values may reduce call quality, cause lag, and make the call less enjoyable.') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__latencychart\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStatsLatencyChart, { values: latencyBuffer }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"network-quality\" }), t('Call performance')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Review the key data points below to assess call performance') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-container\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Region'), value: callStatsReport.datacenter }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Latency'), value: `${callStatsReport.publisherStats.averageRoundTripTimeInMs} ms.`, comparison: latencyComparison }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receive jitter'), value: `${callStatsReport.subscriberStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.subscriberStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish jitter'), value: `${callStatsReport.publisherStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.publisherStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish resolution'), value: toFrameSize(callStatsReport.publisherStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish quality drop reason'), value: callStatsReport.publisherStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receiving resolution'), value: toFrameSize(callStatsReport.subscriberStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receive quality drop reason'), value: callStatsReport.subscriberStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish bitrate'), value: publishBitrate }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receiving bitrate'), value: subscribeBitrate })] })] })) }));\n};\nconst StatCardExplanation = (props) => {\n    const { description } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const { refs, floatingStyles, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useFloating)({\n        open: isOpen,\n        onOpenChange: setIsOpen,\n    });\n    const hover = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useHover)(context);\n    const { getReferenceProps, getFloatingProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useInteractions)([hover]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation\", ref: refs.setReference, ...getReferenceProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-explanation__icon\", icon: \"info\" }) }), isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation__description\", ref: refs.setFloating, style: floatingStyles, ...getFloatingProps(), children: description }))] }));\n};\nconst StatsTag = ({ children, status = Statuses.GOOD, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-stats__tag', {\n            'str-video__call-stats__tag--good': status === Statuses.GOOD,\n            'str-video__call-stats__tag--ok': status === Statuses.OK,\n            'str-video__call-stats__tag--bad': status === Statuses.BAD,\n        }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__tag__text\", children: children }) }));\n};\nconst StatCard = (props) => {\n    const { label, value, description, comparison } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const status = comparison ? statsStatus(comparison) : undefined;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-content\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-label\", children: [label, description && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCardExplanation, { description: description })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__card-value\", children: value })] }), comparison && status && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatsTag, { status: status, children: t(status) })] }));\n};\nconst toFrameSize = (stats) => {\n    const { highestFrameWidth: w, highestFrameHeight: h, highestFramesPerSecond: fps, } = stats;\n    let size = `-`;\n    if (w && h) {\n        size = `${w}x${h}`;\n        if (fps) {\n            size += `@${fps}fps.`;\n        }\n    }\n    return size;\n};\nconst calculatePublishBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { publisherStats: { totalBytesSent: previousTotalBytesSent, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { publisherStats: { totalBytesSent, timestamp }, } = callStatsReport;\n    const bytesSent = totalBytesSent - previousTotalBytesSent;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesSent * 8) / timeElapsed).toFixed(2)} kbps`;\n};\nconst calculateSubscribeBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { subscriberStats: { totalBytesReceived: previousTotalBytesReceived, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { subscriberStats: { totalBytesReceived, timestamp }, } = callStatsReport;\n    const bytesReceived = totalBytesReceived - previousTotalBytesReceived;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesReceived * 8) / timeElapsed).toFixed(2)} kbps`;\n};\n\nconst CallStatsButton = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-end\", ToggleButton: ToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStats, {}) }));\nconst ToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleMenuButton(props, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, menuShown } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, caption: caption, title: caption || t('Statistics'), \"data-testid\": \"stats-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"stats\" }) }));\n});\n\nconst ToggleAudioOutputButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = DeviceSelectorAudioOutput, menuPlacement = 'top', onMenuToggle, } = props;\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: caption || t('Speakers'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { Menu: Menu, menuPlacement: menuPlacement, caption: caption, \"data-testid\": \"audio-output-button\", onMenuToggle: (shown) => {\n                setTooltipDisabled(shown);\n                onMenuToggle?.(shown);\n            }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"speaker\" }) }) }));\n};\n\nconst BlockedUserListing = ({ data }) => {\n    if (!data.length)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((userId) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUserListingItem, { userId: userId }, userId))) }) }));\n};\nconst BlockedUserListingItem = ({ userId }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const unblockUserClickHandler = () => {\n        if (userId)\n            call?.unblockUser(userId);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing-item__display-name\", children: userId }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: unblockUserClickHandler, children: \"Unblock\" }) })] }));\n};\n\nconst CallParticipantListHeader = ({ onClose, }) => {\n    const { useParticipants, useAnonymousParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants();\n    const anonymousParticipantCount = useAnonymousParticipantCount();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header__title\", children: [t('Participants'), ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-list-header__title-count\", children: [\"[\", participants.length, \"]\"] }), anonymousParticipantCount > 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-list-header__title-anonymous\", children: t('Anonymous', { count: anonymousParticipantCount }) }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: onClose, className: \"str-video__participant-list-header__close-button\", icon: \"close\" })] }));\n};\n\nconst CallParticipantListingItem = ({ participant, DisplayName = DefaultDisplayName, }) => {\n    const isAudioOn = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const isVideoOn = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const isPinnedOn = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.isPinned)(participant);\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: participant.name, imageSrc: participant.image }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisplayName, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item__media-indicator-group\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isAudioOn ? t('Microphone on') : t('Microphone off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isAudioOn ? 'mic' : 'mic-off'}`) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isVideoOn ? t('Camera on') : t('Camera off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isVideoOn ? 'camera' : 'camera-off'}`) }), isPinnedOn && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: t('Pinned'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', 'str-video__participant-listing-item__icon-pinned') })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$2, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewContext.Provider, { value: { participant, trackType: 'none' }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu, {}) }) })] })] }));\n};\nconst MediaIndicator = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { ...props }));\nconst DefaultDisplayName = ({ participant }) => {\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const meFlag = participant.userId === connectedUser?.id ? t('Me') : '';\n    const nameOrId = participant.name || participant.userId || t('Unknown');\n    let displayName;\n    if (!participant.name) {\n        displayName = meFlag || nameOrId || t('Unknown');\n    }\n    else if (meFlag) {\n        displayName = `${nameOrId} (${meFlag})`;\n    }\n    else {\n        displayName = nameOrId;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { className: \"str-video__participant-listing-item__display-name\", title: displayName, children: displayName }));\n};\nconst ToggleButton$2 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\n\nconst CallParticipantListing = ({ data, }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListingItem, { participant: participant }, participant.sessionId))) }));\n\nconst EmptyParticipantSearchList = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list--empty\", children: t('No participants found') }));\n};\n\nconst SearchInput = ({ exitSearch, isActive, ...rest }) => {\n    const [inputElement, setInputElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!inputElement)\n            return;\n        const handleKeyDown = (e) => {\n            if (e.key.toLowerCase() === 'escape')\n                exitSearch();\n        };\n        inputElement.addEventListener('keydown', handleKeyDown);\n        return () => {\n            inputElement.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [exitSearch, inputElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__search-input__container', {\n            'str-video__search-input__container--active': isActive,\n        }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { placeholder: \"Search\", ...rest, ref: setInputElement }), isActive ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: \"str-video__search-input__clear-btn\", onClick: exitSearch, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon--active\" }) })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon\" }))] }));\n};\n\nconst SearchResults = ({ EmptySearchResultComponent, LoadingIndicator: LoadingIndicator$1 = LoadingIndicator, searchQueryInProgress, searchResults, SearchResultList, }) => {\n    if (searchQueryInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__search-results--loading\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator$1, {}) }));\n    }\n    if (!searchResults.length) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptySearchResultComponent, {});\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResultList, { data: searchResults });\n};\n\nconst useSearch = ({ debounceInterval, searchFn, searchQuery = '', }) => {\n    const [searchResults, setSearchResults] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [searchQueryInProgress, setSearchQueryInProgress] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!searchQuery.length) {\n            setSearchQueryInProgress(false);\n            setSearchResults([]);\n            return;\n        }\n        setSearchQueryInProgress(true);\n        const timeout = setTimeout(async () => {\n            try {\n                const results = await searchFn(searchQuery);\n                setSearchResults(results);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            finally {\n                setSearchQueryInProgress(false);\n            }\n        }, debounceInterval);\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [debounceInterval, searchFn, searchQuery]);\n    return {\n        searchQueryInProgress,\n        searchResults,\n    };\n};\n\nconst UserListTypes = {\n    active: 'Active users',\n    blocked: 'Blocked users',\n};\nconst DEFAULT_DEBOUNCE_SEARCH_INTERVAL = 200;\nconst CallParticipantsList = ({ onClose, activeUsersSearchFn, blockedUsersSearchFn, debounceSearchInterval, }) => {\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');\n    const [userListType, setUserListType] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('active');\n    const exitSearch = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setSearchQuery(''), []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListHeader, { onClose: onClose }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchInput, { value: searchQuery, onChange: ({ currentTarget }) => setSearchQuery(currentTarget.value), exitSearch: exitSearch, isActive: !!searchQuery }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListContentHeader, { userListType: userListType, setUserListType: setUserListType }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content\", children: [userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ActiveUsersSearchResults, { searchQuery: searchQuery, activeUsersSearchFn: activeUsersSearchFn, debounceSearchInterval: debounceSearchInterval })), userListType === 'blocked' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUsersSearchResults, { searchQuery: searchQuery, blockedUsersSearchFn: blockedUsersSearchFn, debounceSearchInterval: debounceSearchInterval }))] })] }));\n};\nconst CallParticipantListContentHeader = ({ userListType, setUserListType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const muteAll = () => {\n        call?.muteAllUsers('audio');\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list__content-header-title\", children: userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], hasPermissionsOnly: true, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: muteAll, children: \"Mute all\" }) })) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$1, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenu, { children: Object.keys(UserListTypes).map((lt) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { \"aria-selected\": lt === userListType, onClick: () => setUserListType(lt), children: UserListTypes[lt] }, lt))) }) })] }));\n};\nconst ActiveUsersSearchResults = ({ searchQuery, activeUsersSearchFn: activeUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, }) => {\n    const { useParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants({ sortBy: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name });\n    const activeUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return Promise.resolve(participants.filter((participant) => {\n            return participant.name.match(queryRegExp);\n        }));\n    }, [participants]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: activeUsersSearchFnFromProps ?? activeUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : participants, SearchResultList: CallParticipantListing }));\n};\nconst BlockedUsersSearchResults = ({ blockedUsersSearchFn: blockedUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, searchQuery, }) => {\n    const { useCallBlockedUserIds } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const blockedUsers = useCallBlockedUserIds();\n    const blockedUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return Promise.resolve(blockedUsers.filter((blockedUser) => {\n            return blockedUser.match(queryRegExp);\n        }));\n    }, [blockedUsers]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: blockedUsersSearchFnFromProps ?? blockedUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : blockedUsers, SearchResultList: BlockedUserListing }));\n};\nconst ToggleButton$1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"filter\", ref: ref });\n});\n\nconst CallPreview = (props) => {\n    const { className, style } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallThumbnail } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const thumbnail = useCallThumbnail();\n    const [imageRef, setImageRef] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!imageRef || !call)\n            return;\n        const cleanup = call.bindCallThumbnailElement(imageRef);\n        return () => cleanup();\n    }, [imageRef, call]);\n    if (!thumbnail)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-preview', className), style: style, alt: \"Call Preview Thumbnail\", ref: setImageRef }));\n};\n\nconst CallRecordingListHeader = ({ callRecordings, onRefresh, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__title\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { children: t('Call Recordings') }), callRecordings.length ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { children: [\"(\", callRecordings.length, \")\"] }) : null] }), onRefresh && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"refresh\", title: t('Refresh'), onClick: onRefresh }))] }));\n};\n\nconst dateFormat = (date) => {\n    const format = new Date(date);\n    return format.toTimeString().split(' ')[0];\n};\nconst CallRecordingListItem = ({ recording, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__filename\", children: recording.filename }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.start_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.end_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__download\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"a\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-recording-list-item__action-button', 'str-video__call-recording-list-item__action-button--download'), role: \"button\", href: recording.url, download: recording.filename, title: \"Download the recording\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"download\" }) }) })] }));\n};\n\nconst EmptyCallRecordingListing = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__listing str-video__call-recording-list__listing--empty\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing--icon-empty\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-recording-list__listing--text-empty\", children: \"No recordings available\" })] }));\n};\n\nconst LoadingCallRecordingListing = ({ callRecordings, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem, { recording: recording }, recording.filename))), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, { text: \"Recording getting ready\" })] }));\n};\n\nconst CallRecordingList = ({ callRecordings, CallRecordingListHeader: CallRecordingListHeader$1 = CallRecordingListHeader, CallRecordingListItem: CallRecordingListItem$1 = CallRecordingListItem, EmptyCallRecordingList = EmptyCallRecordingListing, loading, LoadingCallRecordingList = LoadingCallRecordingListing, onRefresh, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListHeader$1, { callRecordings: callRecordings, onRefresh: onRefresh }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing\", children: loading ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingCallRecordingList, { callRecordings: callRecordings })) : callRecordings.length ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__filename\", children: \"Name\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"Start time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"End time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__download\" })] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem$1, { recording: recording }, recording.filename))) })] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptyCallRecordingList, {})) })] }));\n};\n\nconst NoiseCancellationContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Exposes the NoiseCancellation API.\n * Throws an error if used outside <NoiseCancellationProvider />.\n */\nconst useNoiseCancellation = () => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(NoiseCancellationContext);\n    if (!context) {\n        throw new Error('useNoiseCancellation must be used within a NoiseCancellationProvider');\n    }\n    return context;\n};\nconst NoiseCancellationProvider = (props) => {\n    const { children, noiseCancellation } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallSettings, useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const settings = useCallSettings();\n    const noiseCancellationAllowed = !!(settings &&\n        settings.audio.noise_cancellation &&\n        settings.audio.noise_cancellation.mode !==\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.NoiseCancellationSettingsModeEnum.DISABLED);\n    const hasCapability = useHasPermissions(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.ENABLE_NOISE_CANCELLATION);\n    const [isSupportedByBrowser, setIsSupportedByBrowser] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(undefined);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const result = noiseCancellation.isSupported();\n        if (typeof result === 'boolean') {\n            setIsSupportedByBrowser(result);\n        }\n        else {\n            result\n                .then((_isSupportedByBrowser) => setIsSupportedByBrowser(_isSupportedByBrowser))\n                .catch((err) => console.error(`Can't determine if noise cancellation is supported`, err));\n        }\n    }, [noiseCancellation]);\n    const isSupported = isSupportedByBrowser && hasCapability && noiseCancellationAllowed;\n    const [isEnabled, setIsEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const deinit = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !isSupported)\n            return;\n        const unsubscribe = noiseCancellation.on('change', (v) => setIsEnabled(v));\n        const init = (deinit.current || Promise.resolve())\n            .then(() => noiseCancellation.init())\n            .then(() => call.microphone.enableNoiseCancellation(noiseCancellation))\n            .catch((err) => console.error(`Can't initialize noise suppression`, err));\n        return () => {\n            deinit.current = init\n                .then(() => call.microphone.disableNoiseCancellation())\n                .then(() => noiseCancellation.dispose())\n                .then(() => unsubscribe());\n        };\n    }, [call, isSupported, noiseCancellation]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(NoiseCancellationContext.Provider, { value: {\n            isSupported,\n            isEnabled,\n            setEnabled: (enabledOrSetter) => {\n                if (!noiseCancellation)\n                    return;\n                const enable = typeof enabledOrSetter === 'function'\n                    ? enabledOrSetter(isEnabled)\n                    : enabledOrSetter;\n                if (enable) {\n                    noiseCancellation.enable();\n                }\n                else {\n                    noiseCancellation.disable();\n                }\n            },\n        }, children: children }));\n};\n\nconst RingingCallControls = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallCallingState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callCallingState = useCallCallingState();\n    if (!call)\n        return null;\n    const buttonsDisabled = callCallingState !== _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__pending-call-controls\", children: call.isCreatedByMe ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { disabled: buttonsDisabled })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AcceptCallButton, { disabled: buttonsDisabled }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onClick: () => call.leave({ reject: true }), disabled: buttonsDisabled })] })) }));\n};\n\nconst CALLING_STATE_TO_LABEL = {\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING]: 'Joining',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING]: 'Ringing',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.MIGRATING]: 'Migrating',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING]: 'Re-connecting',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING_FAILED]: 'Failed',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.OFFLINE]: 'No internet connection',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.IDLE]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.UNKNOWN]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINED]: 'Joined',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT]: 'Left call',\n};\nconst RingingCall = (props) => {\n    const { includeSelf = false, totalMembersToShow = 3 } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCallCallingState, useCallMembers } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callingState = useCallCallingState();\n    const members = useCallMembers();\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    if (!call)\n        return null;\n    // take the first N members to show their avatars\n    const membersToShow = (members || [])\n        .slice(0, totalMembersToShow)\n        .map(({ user }) => user)\n        .filter((user) => user.id !== connectedUser?.id || includeSelf);\n    if (includeSelf &&\n        !membersToShow.find((user) => user.id === connectedUser?.id)) {\n        // if the current user is not in the initial batch of members,\n        // replace the first item in membersToShow array with the current user\n        const self = members.find(({ user }) => user.id === connectedUser?.id);\n        if (self) {\n            membersToShow.splice(0, 1, self.user);\n        }\n    }\n    const callingStateLabel = CALLING_STATE_TO_LABEL[callingState];\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel str-video__call-panel--ringing\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__members-list\", children: membersToShow.map((user) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel__member-box\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: user.name, imageSrc: user.image }), user.name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__member_details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__member_name\", children: user.name }) }))] }, user.id))) }), callingStateLabel && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__calling-state-label\", children: t(callingStateLabel) })), [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING, _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING].includes(callingState) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RingingCallControls, {}))] }));\n};\n\nconst byNameOrId = (a, b) => {\n    if (a.name && b.name && a.name < b.name)\n        return -1;\n    if (a.name && b.name && a.name > b.name)\n        return 1;\n    if (a.id < b.id)\n        return -1;\n    if (a.id > b.id)\n        return 1;\n    return 0;\n};\nconst PermissionRequests = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useLocalParticipant, useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const localParticipant = useLocalParticipant();\n    const [expanded, setExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [permissionRequests, setPermissionRequests] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const canUpdateCallPermissions = useHasPermissions(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS);\n    const localUserId = localParticipant?.userId;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !canUpdateCallPermissions)\n            return;\n        return call.on('call.permission_request', (event) => {\n            if (event.user.id !== localUserId) {\n                setPermissionRequests((requests) => [...requests, event].sort((a, b) => byNameOrId(a.user, b.user)));\n            }\n        });\n    }, [call, canUpdateCallPermissions, localUserId]);\n    const handleUpdatePermission = (request, type) => {\n        return async () => {\n            const { user, permissions } = request;\n            switch (type) {\n                case 'grant':\n                    await call?.grantPermissions(user.id, permissions);\n                    break;\n                case 'revoke':\n                    await call?.revokePermissions(user.id, permissions);\n                    break;\n            }\n            setPermissionRequests((requests) => requests.filter((r) => r !== request));\n        };\n    };\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement: 'bottom',\n        strategy: 'absolute',\n    });\n    // don't render anything if there are no permission requests\n    if (permissionRequests.length === 0)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests\", ref: refs.setReference, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests__notification\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__permission-requests__notification__message\", children: [permissionRequests.length, \" pending permission requests\"] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { type: \"button\", onClick: () => {\n                            setExpanded((e) => !e);\n                        }, children: expanded ? 'Hide requests' : 'Show requests' })] }), expanded && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionRequestList, { ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, permissionRequests: permissionRequests, handleUpdatePermission: handleUpdatePermission }))] }));\n};\nconst PermissionRequestList = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function PermissionRequestList(props, ref) {\n    const { permissionRequests, handleUpdatePermission, ...rest } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-requests-list\", ref: ref, ...rest, children: permissionRequests.map((request, reqIndex) => {\n            const { user, permissions } = request;\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: permissions.map((permission) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-request\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-request__message\", children: messageForPermission(user.name || user.id, permission, t) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--allow\", type: \"button\", onClick: handleUpdatePermission(request, 'grant'), children: t('Allow') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'revoke'), children: t('Revoke') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'dismiss'), children: t('Dismiss') })] }, permission))) }, `${user.id}/${reqIndex}`));\n        }) }));\n});\nconst Button = (props) => {\n    const { className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__permission-request__button', className), ...rest }));\n};\nconst messageForPermission = (userName, permission, t) => {\n    switch (permission) {\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO:\n            return t('{{ userName }} is requesting to speak', { userName });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO:\n            return t('{{ userName }} is requesting to share their camera', {\n                userName,\n            });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE:\n            return t('{{ userName }} is requesting to present their screen', {\n                userName,\n            });\n        default:\n            return t('{{ userName }} is requesting permission: {{ permission }}', {\n                userName,\n                permission,\n            });\n    }\n};\n\nconst StreamTheme = ({ as: Component = 'div', className, children, ...props }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, { ...props, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video', className), children: children }));\n};\n\nconst DefaultVideoPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultVideoPlaceholder({ participant, style }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const name = participant.name || participant.userId;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__video-placeholder\", style: style, ref: ref, children: [(!participant.image || error) &&\n                (name ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(InitialsFallback, { name: name })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__no-video-label\", children: t('Video is disabled') }))), participant.image && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: \"video-placeholder\", className: \"str-video__video-placeholder__avatar\", src: participant.image }))] }));\n});\nconst InitialsFallback = (props) => {\n    const { name } = props;\n    const initials = name\n        .split(' ')\n        .slice(0, 2)\n        .map((n) => n[0])\n        .join('');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__initials-fallback\", children: initials }));\n};\n\nconst Video$1 = ({ trackType, participant, className, VideoPlaceholder = DefaultVideoPlaceholder, refs, ...rest }) => {\n    const { sessionId, videoStream, screenShareStream, viewportVisibilityState, isLocalParticipant, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // start with true, will flip once the video starts playing\n    const [isVideoPaused, setIsVideoPaused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const [isWideMode, setIsWideMode] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const stream = trackType === 'videoTrack'\n        ? videoStream\n        : trackType === 'screenShareTrack'\n            ? screenShareStream\n            : undefined;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(() => {\n        if (!call || !videoElement || trackType === 'none')\n            return;\n        const cleanup = call.bindVideoElement(videoElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, trackType, sessionId, videoElement]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!stream || !videoElement)\n            return;\n        const [track] = stream.getVideoTracks();\n        if (!track)\n            return;\n        const handlePlayPause = () => {\n            setIsVideoPaused(videoElement.paused);\n            const { width = 0, height = 0 } = track.getSettings();\n            setIsWideMode(width >= height);\n        };\n        // playback may have started before we had a chance to\n        // attach the 'play/pause' event listener, so we set the state\n        // here to make sure it's in sync\n        setIsVideoPaused(videoElement.paused);\n        videoElement.addEventListener('play', handlePlayPause);\n        videoElement.addEventListener('pause', handlePlayPause);\n        track.addEventListener('unmute', handlePlayPause);\n        return () => {\n            videoElement.removeEventListener('play', handlePlayPause);\n            videoElement.removeEventListener('pause', handlePlayPause);\n            track.removeEventListener('unmute', handlePlayPause);\n            // reset the 'pause' state once we unmount the video element\n            setIsVideoPaused(true);\n        };\n    }, [stream, videoElement]);\n    if (!call)\n        return null;\n    const isPublishingTrack = trackType === 'videoTrack'\n        ? (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant)\n        : trackType === 'screenShareTrack'\n            ? (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participant)\n            : false;\n    const isInvisible = trackType === 'none' ||\n        viewportVisibilityState?.[trackType] === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState.INVISIBLE;\n    const hasNoVideoOrInvisible = !isPublishingTrack || isInvisible;\n    const mirrorVideo = isLocalParticipant && trackType === 'videoTrack';\n    const isScreenShareTrack = trackType === 'screenShareTrack';\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [!hasNoVideoOrInvisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { ...rest, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video', className, {\n                    'str-video__video--not-playing': isVideoPaused,\n                    'str-video__video--tall': !isWideMode,\n                    'str-video__video--mirror': mirrorVideo,\n                    'str-video__video--screen-share': isScreenShareTrack,\n                }), \"data-user-id\": userId, \"data-session-id\": sessionId, ref: (element) => {\n                    setVideoElement(element);\n                    refs?.setVideoElement?.(element);\n                } })), (hasNoVideoOrInvisible || isVideoPaused) && VideoPlaceholder && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VideoPlaceholder, { style: { position: 'absolute' }, participant: participant, ref: refs?.setVideoPlaceholderElement }))] }));\n};\nVideo$1.displayName = 'Video';\n\n/**\n * @description Extends video element with `stream` property\n * (`srcObject`) to reactively handle stream changes\n */\nconst BaseVideo = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function BaseVideo({ stream, ...rest }, ref) {\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement || !stream)\n            return;\n        if (stream === videoElement.srcObject)\n            return;\n        videoElement.srcObject = stream;\n        if (_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isSafari() || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isFirefox()) {\n            // Firefox and Safari have some timing issue\n            setTimeout(() => {\n                videoElement.srcObject = stream;\n                videoElement.play().catch((e) => {\n                    console.error(`Failed to play stream`, e);\n                });\n            }, 0);\n        }\n        return () => {\n            videoElement.pause();\n            videoElement.srcObject = null;\n        };\n    }, [stream, videoElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { autoPlay: true, playsInline: true, ...rest, ref: (element) => {\n            applyElementToRef(ref, element);\n            setVideoElement(element);\n        } }));\n});\n\nconst DefaultDisabledVideoPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__disabled-video-preview\", children: t('Video is disabled') }));\n};\nconst DefaultNoCameraPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__no-camera-preview\", children: t('No camera found') }));\n};\nconst VideoPreview = ({ className, mirror = true, DisabledVideoPreview = DefaultDisabledVideoPreview, NoCameraPreview = DefaultNoCameraPreview, StartingCameraPreview = LoadingIndicator, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { devices, status, isMute, mediaStream } = useCameraState();\n    let contents;\n    if (isMute && devices?.length === 0) {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(NoCameraPreview, {});\n    }\n    else if (status === 'enabled') {\n        const loading = !mediaStream;\n        contents = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [mediaStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BaseVideo, { stream: mediaStream, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview', {\n                        'str-video__video-preview--mirror': mirror,\n                        'str-video__video-preview--loading': loading,\n                    }) })), loading && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StartingCameraPreview, {})] }));\n    }\n    else {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisabledVideoPreview, {});\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview-container', className), children: contents }));\n};\n\nconst ParticipantActionsContextMenu = () => {\n    const { participant, participantViewElement, videoElement } = useParticipantViewContext();\n    const [fullscreenModeOn, setFullscreenModeOn] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!!document.fullscreenElement);\n    const [pictureInPictureElement, setPictureInPictureElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(document.pictureInPictureElement);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { pin, sessionId, userId } = participant;\n    const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const hasVideoTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const hasScreenShareTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participant);\n    const hasScreenShareAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio)(participant);\n    const blockUser = () => call?.blockUser(userId);\n    const muteAudio = () => call?.muteUser(userId, 'audio');\n    const muteVideo = () => call?.muteUser(userId, 'video');\n    const muteScreenShare = () => call?.muteUser(userId, 'screenshare');\n    const muteScreenShareAudio = () => call?.muteUser(userId, 'screenshare_audio');\n    const grantPermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            grant_permissions: [permission],\n        });\n    };\n    const revokePermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            revoke_permissions: [permission],\n        });\n    };\n    const toggleParticipantPin = () => {\n        if (pin) {\n            call?.unpin(sessionId);\n        }\n        else {\n            call?.pin(sessionId);\n        }\n    };\n    const pinForEveryone = () => {\n        call\n            ?.pinForEveryone({\n            user_id: userId,\n            session_id: sessionId,\n        })\n            .catch((err) => {\n            console.error(`Failed to pin participant ${userId}`, err);\n        });\n    };\n    const unpinForEveryone = () => {\n        call\n            ?.unpinForEveryone({\n            user_id: userId,\n            session_id: sessionId,\n        })\n            .catch((err) => {\n            console.error(`Failed to unpin participant ${userId}`, err);\n        });\n    };\n    const toggleFullscreenMode = () => {\n        if (!fullscreenModeOn) {\n            return participantViewElement?.requestFullscreen().catch(console.error);\n        }\n        return document.exitFullscreen().catch(console.error);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // handles the case when fullscreen mode is toggled externally,\n        // e.g., by pressing ESC key or some other keyboard shortcut\n        const handleFullscreenChange = () => {\n            setFullscreenModeOn(!!document.fullscreenElement);\n        };\n        document.addEventListener('fullscreenchange', handleFullscreenChange);\n        return () => {\n            document.removeEventListener('fullscreenchange', handleFullscreenChange);\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement)\n            return;\n        const handlePiP = () => {\n            setPictureInPictureElement(document.pictureInPictureElement);\n        };\n        videoElement.addEventListener('enterpictureinpicture', handlePiP);\n        videoElement.addEventListener('leavepictureinpicture', handlePiP);\n        return () => {\n            videoElement.removeEventListener('enterpictureinpicture', handlePiP);\n            videoElement.removeEventListener('leavepictureinpicture', handlePiP);\n        };\n    }, [videoElement]);\n    const togglePictureInPicture = () => {\n        if (videoElement && pictureInPictureElement !== videoElement) {\n            return videoElement\n                .requestPictureInPicture()\n                .catch(console.error);\n        }\n        return document.exitPictureInPicture().catch(console.error);\n    };\n    const { close } = useMenuContext() || {};\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenu, { onItemClick: close, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: toggleParticipantPin, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), pin ? t('Unpin') : t('Pin')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.PIN_FOR_EVERYONE], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: pinForEveryone, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Pin for everyone')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: unpinForEveryone, disabled: !pin || pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Unpin for everyone')] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: blockUser, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"not-allowed\" }), t('Block')] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], children: [hasVideoTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteVideo, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"camera-off-outline\" }), t('Turn off video')] })), hasScreenShareTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShare, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), t('Turn off screen share')] })), hasAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute audio')] })), hasScreenShareAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShareAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute screen share audio')] }))] }), participantViewElement && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: toggleFullscreenMode, children: t('{{ direction }} fullscreen', {\n                    direction: fullscreenModeOn ? t('Leave') : t('Enter'),\n                }) })), videoElement && document.pictureInPictureEnabled && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: togglePictureInPicture, children: t('{{ direction }} picture-in-picture', {\n                    direction: pictureInPictureElement === videoElement\n                        ? t('Leave')\n                        : t('Enter'),\n                }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Allow audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Allow video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Allow screen sharing') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Disable audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Disable video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Disable screen sharing') })] })] }));\n};\n\nconst useTrackElementVisibility = ({ trackedElement, dynascaleManager: propsDynascaleManager, sessionId, trackType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const manager = propsDynascaleManager ?? call?.dynascaleManager;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!trackedElement || !manager || !call || trackType === 'none')\n            return;\n        const unobserve = manager.trackElementVisibility(trackedElement, sessionId, trackType);\n        return () => {\n            unobserve();\n        };\n    }, [trackedElement, manager, call, sessionId, trackType]);\n};\n\nconst ToggleButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\nconst DefaultScreenShareOverlay = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const stopScreenShare = () => {\n        call?.screenShare.disable();\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__screen-share-overlay\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__screen-share-overlay__title\", children: t('You are presenting your screen') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { onClick: stopScreenShare, className: \"str-video__screen-share-overlay__button\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"close\" }), \" \", t('Stop Screen Sharing')] })] }));\n};\nconst DefaultParticipantViewUI = ({ indicatorsVisible = true, menuPlacement = 'bottom-start', showMenuButton = true, ParticipantActionsContextMenu: ParticipantActionsContextMenu$1 = ParticipantActionsContextMenu, }) => {\n    const { participant, trackType } = useParticipantViewContext();\n    const isScreenSharing = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participant);\n    if (participant.isLocalParticipant &&\n        isScreenSharing &&\n        trackType === 'screenShareTrack') {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultScreenShareOverlay, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [showMenuButton && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { strategy: \"fixed\", placement: menuPlacement, ToggleButton: ToggleButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu$1, {}) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Reaction, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n};\nconst ParticipantDetails = ({ indicatorsVisible = true, }) => {\n    const { participant } = useParticipantViewContext();\n    const { isLocalParticipant, connectionQuality, pin, sessionId, name, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const connectionQualityAsString = !!connectionQuality &&\n        _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality[connectionQuality].toLowerCase();\n    const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const hasVideoTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const canUnpin = !!pin && pin.isLocalPin;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-details__name\", children: [name || userId, indicatorsVisible && !hasAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--audio-muted\" })), indicatorsVisible && !hasVideoTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--video-muted\" })), indicatorsVisible && canUnpin && (\n                        // TODO: remove this monstrosity once we have a proper design\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { title: t('Unpin'), onClick: () => call?.unpin(sessionId), className: \"str-video__participant-details__name--pinned\" })), indicatorsVisible && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeechIndicator, {})] }) }), indicatorsVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isLocalParticipant &&\n                    connectionQuality === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality.POOR, message: t('Poor connection quality'), children: connectionQualityAsString && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-details__connection-quality', `str-video__participant-details__connection-quality--${connectionQualityAsString}`), title: connectionQualityAsString })) }))] }));\n};\nconst SpeechIndicator = () => {\n    const { participant } = useParticipantViewContext();\n    const { isSpeaking, isDominantSpeaker } = participant;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speech-indicator', isSpeaking && 'str-video__speech-indicator--speaking', isDominantSpeaker && 'str-video__speech-indicator--dominant'), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" })] }));\n};\n\nconst ParticipantView = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ParticipantView({ participant, trackType = 'videoTrack', muteAudio, refs: { setVideoElement, setVideoPlaceholderElement } = {}, className, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, }, ref) {\n    const { isLocalParticipant, isSpeaking, isDominantSpeaker, sessionId } = participant;\n    const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const hasVideoTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const hasScreenShareAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio)(participant);\n    const [trackedElement, setTrackedElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoElement, setContextVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoPlaceholderElement, setContextVideoPlaceholderElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // TODO: allow to pass custom ViewportTracker instance from props\n    useTrackElementVisibility({\n        sessionId,\n        trackedElement,\n        trackType,\n    });\n    const participantViewContextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        participant,\n        participantViewElement: trackedElement,\n        videoElement: contextVideoElement,\n        videoPlaceholderElement: contextVideoPlaceholderElement,\n        trackType,\n    }), [\n        contextVideoElement,\n        contextVideoPlaceholderElement,\n        participant,\n        trackedElement,\n        trackType,\n    ]);\n    const videoRefs = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        setVideoElement: (element) => {\n            setVideoElement?.(element);\n            setContextVideoElement(element);\n        },\n        setVideoPlaceholderElement: (element) => {\n            setVideoPlaceholderElement?.(element);\n            setContextVideoPlaceholderElement(element);\n        },\n    }), [setVideoElement, setVideoPlaceholderElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { \"data-testid\": \"participant-view\", ref: (element) => {\n            applyElementToRef(ref, element);\n            setTrackedElement(element);\n        }, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-view', isDominantSpeaker && 'str-video__participant-view--dominant-speaker', isSpeaking && 'str-video__participant-view--speaking', !hasVideoTrack && 'str-video__participant-view--no-video', !hasAudioTrack && 'str-video__participant-view--no-audio', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ParticipantViewContext.Provider, { value: participantViewContextValue, children: [!isLocalParticipant && !muteAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [hasAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"audioTrack\" })), hasScreenShareAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"screenShareAudioTrack\" }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Video$1, { VideoPlaceholder: VideoPlaceholder, participant: participant, trackType: trackType, refs: videoRefs, autoPlay: true }), isComponentType(ParticipantViewUI) ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewUI, {})) : (ParticipantViewUI)] }) }));\n});\nParticipantView.displayName = 'ParticipantView';\n\n// re-exporting the StreamCallProvider as StreamCall\nconst StreamCall = _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider;\nStreamCall.displayName = 'StreamCall';\n\nvar Joining = \"Joining\";\nvar Mic = \"Mic\";\nvar Ringing = \"Ringing\";\nvar Speakers = \"Speakers\";\nvar Video = \"Video\";\nvar Live = \"Live\";\nvar Reactions = \"Reactions\";\nvar Statistics = \"Statistics\";\nvar Invite = \"Invite\";\nvar Join = \"Join\";\nvar You = \"You\";\nvar Me = \"Me\";\nvar Unknown = \"Unknown\";\nvar Refresh = \"Refresh\";\nvar Allow = \"Allow\";\nvar Revoke = \"Revoke\";\nvar Dismiss = \"Dismiss\";\nvar Pinned = \"Pinned\";\nvar Unpin = \"Unpin\";\nvar Pin = \"Pin\";\nvar Block = \"Block\";\nvar Enter = \"Enter\";\nvar Leave = \"Leave\";\nvar Participants = \"Participants\";\nvar Anonymous = \", and ({{ count }}) anonymous\";\nvar en = {\n\tJoining: Joining,\n\tMic: Mic,\n\t\"No internet connection\": \"No internet connection\",\n\t\"Re-connecting\": \"Re-connecting\",\n\tRinging: Ringing,\n\t\"Screen Share\": \"Screen Share\",\n\t\"Select a Camera\": \"Select a Camera\",\n\t\"Select a Mic\": \"Select a Mic\",\n\t\"Select Speakers\": \"Select Speakers\",\n\tSpeakers: Speakers,\n\tVideo: Video,\n\t\"You are muted. Unmute to speak.\": \"You are muted. Unmute to speak.\",\n\tLive: Live,\n\t\"You can now speak.\": \"You can now speak.\",\n\t\"Awaiting for an approval to speak.\": \"Awaiting for an approval to speak.\",\n\t\"You can no longer speak.\": \"You can no longer speak.\",\n\t\"You can now share your video.\": \"You can now share your video.\",\n\t\"Awaiting for an approval to share your video.\": \"Awaiting for an approval to share your video.\",\n\t\"You can no longer share your video.\": \"You can no longer share your video.\",\n\t\"Waiting for recording to stop...\": \"Waiting for recording to stop...\",\n\t\"Waiting for recording to start...\": \"Waiting for recording to start...\",\n\t\"Record call\": \"Record call\",\n\tReactions: Reactions,\n\tStatistics: Statistics,\n\t\"You can now share your screen.\": \"You can now share your screen.\",\n\t\"Awaiting for an approval to share screen.\": \"Awaiting for an approval to share screen.\",\n\t\"You can no longer share your screen.\": \"You can no longer share your screen.\",\n\t\"Share screen\": \"Share screen\",\n\t\"Incoming Call...\": \"Incoming Call...\",\n\t\"Calling...\": \"Calling...\",\n\t\"Mute All\": \"Mute All\",\n\tInvite: Invite,\n\tJoin: Join,\n\tYou: You,\n\tMe: Me,\n\tUnknown: Unknown,\n\t\"Toggle device menu\": \"Toggle device menu\",\n\t\"Call Recordings\": \"Call Recordings\",\n\tRefresh: Refresh,\n\t\"Check your browser video permissions\": \"Check your browser video permissions\",\n\t\"Video publishing is disabled by the system\": \"Video publishing is disabled by the system\",\n\t\"You have no permission to share your video\": \"You have no permission to share your video\",\n\t\"You have no permission to share your audio\": \"You have no permission to share your audio\",\n\t\"You are presenting your screen\": \"You are presenting your screen\",\n\t\"Stop Screen Sharing\": \"Stop Screen Sharing\",\n\tAllow: Allow,\n\tRevoke: Revoke,\n\tDismiss: Dismiss,\n\t\"Microphone on\": \"Microphone on\",\n\t\"Microphone off\": \"Microphone off\",\n\t\"Camera on\": \"Camera on\",\n\t\"Camera off\": \"Camera off\",\n\t\"No camera found\": \"No camera found\",\n\t\"Video is disabled\": \"Video is disabled\",\n\tPinned: Pinned,\n\tUnpin: Unpin,\n\tPin: Pin,\n\t\"Pin for everyone\": \"Pin for everyone\",\n\t\"Unpin for everyone\": \"Unpin for everyone\",\n\tBlock: Block,\n\t\"Turn off video\": \"Turn off video\",\n\t\"Turn off screen share\": \"Turn off screen share\",\n\t\"Mute audio\": \"Mute audio\",\n\t\"Mute screen share audio\": \"Mute screen share audio\",\n\t\"Allow audio\": \"Allow audio\",\n\t\"Allow video\": \"Allow video\",\n\t\"Allow screen sharing\": \"Allow screen sharing\",\n\t\"Disable audio\": \"Disable audio\",\n\t\"Disable video\": \"Disable video\",\n\t\"Disable screen sharing\": \"Disable screen sharing\",\n\tEnter: Enter,\n\tLeave: Leave,\n\t\"Leave call\": \"Leave call\",\n\t\"End call for all\": \"End call for all\",\n\t\"{{ direction }} fullscreen\": \"{{ direction }} fullscreen\",\n\t\"{{ direction }} picture-in-picture\": \"{{ direction }} picture-in-picture\",\n\t\"Dominant Speaker\": \"Dominant Speaker\",\n\t\"Poor connection quality\": \"Poor connection quality. Please check your internet connection.\",\n\tParticipants: Participants,\n\tAnonymous: Anonymous,\n\t\"No participants found\": \"No participants found\",\n\t\"Participants ({{ numberOfParticipants }})\": \"Participants ({{ numberOfParticipants }})\",\n\t\"{{ userName }} is sharing their screen\": \"{{ userName }} is sharing their screen\",\n\t\"{{ userName }} is requesting to speak\": \"{{ userName }} is requesting to speak\",\n\t\"{{ userName }} is requesting to share their camera\": \"{{ userName }} is requesting to share their camera\",\n\t\"{{ userName }} is requesting to present their screen\": \"{{ userName }} is requesting to present their screen\",\n\t\"{{ userName }} is requesting permission: {{ permission }}\": \"{{ userName }} is requesting permission: {{ permission }}\"\n};\n\nconst translations = { en };\n\nconst StreamVideo = (props) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider, { translationsOverrides: translations, ...props }));\n};\nStreamVideo.displayName = 'StreamVideo';\n\nconst usePaginatedLayoutSortPreset = (call) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset);\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call]);\n};\nconst useSpeakerLayoutSortPreset = (call, isOneOnOneCall) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        // always show the remote participant in the spotlight\n        if (isOneOnOneCall) {\n            call.setSortParticipantsBy((0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators)(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing, loggedIn));\n        }\n        else {\n            call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset);\n        }\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call, isOneOnOneCall]);\n};\nconst resetSortPreset = (call) => {\n    // reset the sorting to the default for the call type\n    const callConfig = _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes.get(call.type);\n    call.setSortParticipantsBy(callConfig.options.sortParticipantsBy || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset);\n};\nconst loggedIn = (a, b) => {\n    if (a.isLocalParticipant)\n        return 1;\n    if (b.isLocalParticipant)\n        return -1;\n    return 0;\n};\n\nconst LivestreamLayout = (props) => {\n    const { useParticipants, useRemoteParticipants, useHasOngoingScreenShare } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const participants = useParticipants();\n    const [currentSpeaker] = participants;\n    const remoteParticipants = useRemoteParticipants();\n    const hasOngoingScreenShare = useHasOngoingScreenShare();\n    const presenter = hasOngoingScreenShare\n        ? participants.find(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)\n        : undefined;\n    usePaginatedLayoutSortPreset(call);\n    const Overlay = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay, { showParticipantCount: props.showParticipantCount, showDuration: props.showDuration, showLiveBadge: props.showLiveBadge, showSpeakerName: props.showSpeakerName }));\n    const { floatingParticipantProps } = props;\n    const FloatingParticipantOverlay = hasOngoingScreenShare && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay\n    // these elements aren't needed for the video feed\n    , { \n        // these elements aren't needed for the video feed\n        showParticipantCount: floatingParticipantProps?.showParticipantCount ?? false, showDuration: floatingParticipantProps?.showDuration ?? false, showLiveBadge: floatingParticipantProps?.showLiveBadge ?? false, showSpeakerName: floatingParticipantProps?.showSpeakerName ?? true }));\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), hasOngoingScreenShare && presenter && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: \"str-video__livestream-layout__screen-share\", participant: presenter, ParticipantViewUI: Overlay, trackType: \"screenShareTrack\", muteAudio // audio is rendered by ParticipantsAudio\n                : true })), currentSpeaker && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(hasOngoingScreenShare &&\n                    (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__livestream-layout__floating-participant', `str-video__livestream-layout__floating-participant--${floatingParticipantProps?.position ?? 'top-right'}`)), participant: currentSpeaker, ParticipantViewUI: FloatingParticipantOverlay || Overlay, muteAudio // audio is rendered by ParticipantsAudio\n                : true }))] }));\n};\nconst ParticipantOverlay = (props) => {\n    const { enableFullScreen = true, showParticipantCount = true, showDuration = true, showLiveBadge = true, showSpeakerName = false, } = props;\n    const { participant } = useParticipantViewContext();\n    const { useParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participantCount = useParticipantCount();\n    const duration = useUpdateCallDuration();\n    const toggleFullScreen = useToggleFullScreen();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__livestream-layout__overlay\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__overlay__bar\", children: [showLiveBadge && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__live-badge\", children: t('Live') })), showParticipantCount && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__viewers-count\", children: participantCount })), showSpeakerName && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__speaker-name\", title: participant.name || participant.userId || '', children: participant.name || participant.userId || '' })), showDuration && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__duration\", children: formatDuration(duration) })), enableFullScreen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__go-fullscreen\", onClick: toggleFullScreen }))] }) }));\n};\nLivestreamLayout.displayName = 'LivestreamLayout';\nconst useUpdateCallDuration = () => {\n    const { useIsCallLive, useCallSession } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isCallLive = useIsCallLive();\n    const session = useCallSession();\n    const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        if (!session || !session.live_started_at)\n            return 0;\n        const liveStartTime = new Date(session.live_started_at);\n        const now = new Date();\n        return Math.floor((now.getTime() - liveStartTime.getTime()) / 1000);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isCallLive)\n            return;\n        const interval = setInterval(() => {\n            setDuration((d) => d + 1);\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isCallLive]);\n    return duration;\n};\nconst useToggleFullScreen = () => {\n    const { participantViewElement } = useParticipantViewContext();\n    const [isFullscreen, setIsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n        if (isFullscreen) {\n            document.exitFullscreen().then(() => {\n                setIsFullscreen(false);\n            });\n        }\n        else {\n            participantViewElement?.requestFullscreen().then(() => {\n                setIsFullscreen(true);\n            });\n        }\n    }, [isFullscreen, participantViewElement]);\n};\nconst formatDuration = (durationInMs) => {\n    const days = Math.floor(durationInMs / 86400);\n    const hours = Math.floor(durationInMs / 3600);\n    const minutes = Math.floor((durationInMs % 3600) / 60);\n    const seconds = durationInMs % 60;\n    return `${days ? days + ' ' : ''}${hours ? hours + ':' : ''}${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n};\n\nconst GROUP_SIZE = 16;\nconst PaginatedGridLayoutGroup = ({ group, VideoPlaceholder, ParticipantViewUI, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__paginated-grid-layout__group', {\n            'str-video__paginated-grid-layout--one': group.length === 1,\n            'str-video__paginated-grid-layout--two-four': group.length >= 2 && group.length <= 4,\n            'str-video__paginated-grid-layout--five-nine': group.length >= 5 && group.length <= 9,\n        }), children: group.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, muteAudio: true, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI }, participant.sessionId))) }));\n};\nconst PaginatedGridLayout = (props) => {\n    const { groupSize = (props.groupSize || 0) > 0\n        ? props.groupSize || GROUP_SIZE\n        : GROUP_SIZE, excludeLocalParticipant = false, pageArrowsVisible = true, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, } = props;\n    const [page, setPage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [paginatedGridLayoutWrapperElement, setPaginatedGridLayoutWrapperElement,] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useParticipants, useRemoteParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants();\n    // used to render audio elements\n    const remoteParticipants = useRemoteParticipants();\n    usePaginatedLayoutSortPreset(call);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!paginatedGridLayoutWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(paginatedGridLayoutWrapperElement);\n        return () => cleanup();\n    }, [paginatedGridLayoutWrapperElement, call]);\n    // only used to render video elements\n    const participantGroups = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => chunk(excludeLocalParticipant ? remoteParticipants : participants, groupSize), [excludeLocalParticipant, remoteParticipants, participants, groupSize]);\n    const pageCount = participantGroups.length;\n    // update page when page count is reduced and selected page no longer exists\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (page > pageCount - 1) {\n            setPage(Math.max(0, pageCount - 1));\n        }\n    }, [page, pageCount]);\n    const selectedGroup = participantGroups[page];\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout__wrapper\", ref: setPaginatedGridLayoutWrapperElement, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout\", children: [pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"caret-left\", disabled: page === 0, onClick: () => setPage((currentPage) => Math.max(0, currentPage - 1)) })), selectedGroup && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PaginatedGridLayoutGroup, { group: participantGroups[page], VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI })), pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: page === pageCount - 1, icon: \"caret-right\", onClick: () => setPage((currentPage) => Math.min(pageCount - 1, currentPage + 1)) }))] })] }));\n};\nPaginatedGridLayout.displayName = 'PaginatedGridLayout';\n\nconst useCalculateHardLimit = (\n/**\n * Element that stretches to 100% of the whole layout component\n */\nwrapperElement, \n/**\n * Element that directly hosts individual `ParticipantView` (or wrapper) elements\n */\nhostElement, limit) => {\n    const [calculatedLimit, setCalculatedLimit] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        vertical: typeof limit === 'number' ? limit : null,\n        horizontal: typeof limit === 'number' ? limit : null,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!hostElement ||\n            !wrapperElement ||\n            typeof limit === 'number' ||\n            typeof limit === 'undefined')\n            return;\n        let childWidth = null;\n        let childHeight = null;\n        const resizeObserver = new ResizeObserver((entries, observer) => {\n            // this part should ideally run as little times as possible\n            // get child measurements and disconnect\n            // does not consider dynamically sized children\n            // this hook is for SpeakerLayout use only, where children in the bar are fixed size\n            if (entries.length > 1) {\n                const child = hostElement.firstChild;\n                if (child) {\n                    childHeight = child.clientHeight;\n                    childWidth = child.clientWidth;\n                    observer.unobserve(hostElement);\n                }\n            }\n            // keep the state at { vertical: 1, horizontal: 1 }\n            // until we get the proper child measurements\n            if (childHeight === null || childWidth === null)\n                return;\n            const vertical = Math.floor(wrapperElement.clientHeight / childHeight);\n            const horizontal = Math.floor(wrapperElement.clientWidth / childWidth);\n            setCalculatedLimit((pv) => {\n                if (pv.vertical !== vertical || pv.horizontal !== horizontal)\n                    return { vertical, horizontal };\n                return pv;\n            });\n        });\n        resizeObserver.observe(wrapperElement);\n        resizeObserver.observe(hostElement);\n        return () => {\n            resizeObserver.disconnect();\n        };\n    }, [hostElement, limit, wrapperElement]);\n    return calculatedLimit;\n};\n\nconst DefaultParticipantViewUIBar = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultParticipantViewUI, { menuPlacement: \"top-end\" }));\nconst DefaultParticipantViewUISpotlight = () => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultParticipantViewUI, {});\nconst SpeakerLayout = ({ ParticipantViewUIBar = DefaultParticipantViewUIBar, ParticipantViewUISpotlight = DefaultParticipantViewUISpotlight, VideoPlaceholder, participantsBarPosition = 'bottom', participantsBarLimit, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useParticipants, useRemoteParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const [participantInSpotlight, ...otherParticipants] = useParticipants();\n    const remoteParticipants = useRemoteParticipants();\n    const [participantsBarWrapperElement, setParticipantsBarWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [participantsBarElement, setParticipantsBarElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [buttonsWrapperElement, setButtonsWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const isSpeakerScreenSharing = participantInSpotlight && (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participantInSpotlight);\n    const hardLimit = useCalculateHardLimit(buttonsWrapperElement, participantsBarElement, participantsBarLimit);\n    const isVertical = participantsBarPosition === 'left' || participantsBarPosition === 'right';\n    const isHorizontal = participantsBarPosition === 'top' || participantsBarPosition === 'bottom';\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!participantsBarWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(participantsBarWrapperElement);\n        return () => cleanup();\n    }, [participantsBarWrapperElement, call]);\n    const isOneOnOneCall = otherParticipants.length === 1;\n    useSpeakerLayoutSortPreset(call, isOneOnOneCall);\n    let participantsWithAppliedLimit = otherParticipants;\n    const hardLimitToApply = isVertical\n        ? hardLimit.vertical\n        : hardLimit.horizontal;\n    if (typeof participantsBarLimit !== 'undefined' &&\n        hardLimitToApply !== null) {\n        participantsWithAppliedLimit = otherParticipants.slice(0, \n        // subtract 1 if speaker is sharing screen as\n        // that one is rendered independently from otherParticipants array\n        hardLimitToApply - (isSpeakerScreenSharing ? 1 : 0));\n    }\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__speaker-layout__wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speaker-layout', participantsBarPosition &&\n                    `str-video__speaker-layout--variant-${participantsBarPosition}`), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__spotlight\", children: participantInSpotlight && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, muteAudio: true, trackType: isSpeakerScreenSharing ? 'screenShareTrack' : 'videoTrack', ParticipantViewUI: ParticipantViewUISpotlight, VideoPlaceholder: VideoPlaceholder })) }), participantsWithAppliedLimit.length > 0 && participantsBarPosition && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setButtonsWrapperElement, className: \"str-video__speaker-layout__participants-bar-buttons-wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participants-bar-wrapper\", ref: setParticipantsBarWrapperElement, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setParticipantsBarElement, className: \"str-video__speaker-layout__participants-bar\", children: [isSpeakerScreenSharing && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, muteAudio: true }) }, participantInSpotlight.sessionId)), participantsWithAppliedLimit.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, muteAudio: true }) }, participant.sessionId)))] }) }), isVertical && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VerticalScrollButtons, { scrollWrapper: participantsBarWrapperElement })), isHorizontal && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(HorizontalScrollButtons, { scrollWrapper: participantsBarWrapperElement }))] }))] })] }));\n};\nSpeakerLayout.displayName = 'SpeakerLayout';\nconst HorizontalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useHorizontalScrollPosition(scrollWrapper);\n    const scrollStartClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: -150, behavior: 'smooth' });\n    };\n    const scrollEndClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'start' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollStartClickHandler, icon: \"caret-left\", className: \"str-video__speaker-layout__participants-bar--button-left\" })), scrollPosition && scrollPosition !== 'end' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollEndClickHandler, icon: \"caret-right\", className: \"str-video__speaker-layout__participants-bar--button-right\" }))] }));\n};\nconst VerticalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useVerticalScrollPosition(scrollWrapper);\n    const scrollTopClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: -150, behavior: 'smooth' });\n    };\n    const scrollBottomClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'top' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollTopClickHandler, icon: \"caret-up\", className: \"str-video__speaker-layout__participants-bar--button-top\" })), scrollPosition && scrollPosition !== 'bottom' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollBottomClickHandler, icon: \"caret-down\", className: \"str-video__speaker-layout__participants-bar--button-bottom\" }))] }));\n};\n\nconst LivestreamPlayer = (props) => {\n    const { callType, callId, layoutProps } = props;\n    const client = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStreamVideoClient)();\n    const [call, setCall] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!client)\n            return;\n        const myCall = client.call(callType, callId);\n        setCall(myCall);\n        myCall.join().catch((e) => {\n            console.error('Failed to join call', e);\n        });\n        return () => {\n            myCall.leave().catch((e) => {\n                console.error('Failed to leave call', e);\n            });\n            setCall(undefined);\n        };\n    }, [callId, callType, client]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StreamCall, { call: call, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LivestreamLayout, { ...layoutProps }) }));\n};\n\nconst [major, minor, patch] = (\"1.2.23\" ).split('.');\n(0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo)({\n    type: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.SdkType.REACT,\n    major,\n    minor,\n    patch,\n});\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9pbmRleC5lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBYO0FBQ2xWO0FBQzJJO0FBQ25JO0FBQ1E7QUFDa0g7QUFDbEo7QUFDYztBQUN5RDtBQUM0TDtBQUNuTTtBQUNqRDs7QUFFdkMsaUJBQWlCLGdEQUFnRDtBQUNqRSxpQkFBaUIsd0VBQU87QUFDeEIsNENBQTRDLCtDQUFRO0FBQ3BELFlBQVksb0JBQW9CO0FBQ2hDLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWSxzREFBRyxZQUFZLG1JQUFtSTtBQUM5SjtBQUNBOztBQUVBO0FBQ0EsWUFBWSwyQkFBMkI7QUFDdkMsWUFBWSxzREFBRyxDQUFDLHVEQUFRLElBQUk7QUFDNUI7QUFDQTtBQUNBLG9CQUFvQixpREFBaUQ7QUFDckUsa0NBQWtDLGlFQUFRO0FBQzFDLHVFQUF1RSxzREFBRyxVQUFVLGtFQUFrRTtBQUN0Siw2Q0FBNkMsNEVBQW1CO0FBQ2hFO0FBQ0EsMkNBQTJDLHNEQUFHLFVBQVUsNkVBQTZFO0FBQ3JJLG9CQUFvQix1REFBSSxDQUFDLDJDQUFVLElBQUksNkRBQTZEO0FBQ3BHLFNBQVMsR0FBRztBQUNaO0FBQ0E7O0FBRUEsK0JBQStCLG9EQUFhO0FBQzVDLHdDQUF3QyxpREFBVTs7QUFFbEQsa0JBQWtCLDJDQUEyQztBQUM3RCw4QkFBOEIsK0NBQVE7QUFDdEMsWUFBWSx1REFBSSxDQUFDLHVEQUFRLElBQUksNENBQTRDLHNEQUFHLG1CQUFtQixtREFBbUQsMkJBQTJCLHNEQUFHLFVBQVUseURBQXlELGdEQUFJLHdFQUF3RSxLQUFLO0FBQ3BVO0FBQ0EsMEJBQTBCLDBCQUEwQjtBQUNwRCxZQUFZLHNEQUFHLFVBQVUsV0FBVyxnREFBSSw2RUFBNkUsdURBQUksVUFBVSx3Q0FBd0MsR0FBRztBQUM5Szs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsb0RBQWE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaURBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxT0FBcU87QUFDalAsb0RBQW9ELCtDQUFRO0FBQzVELGtEQUFrRCwrQ0FBUTtBQUMxRCwwREFBMEQsK0NBQVE7QUFDbEUsdUNBQXVDLGtEQUFXO0FBQ2xEO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0NBQXNDLGtEQUFXO0FBQ2pEO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsb0NBQW9DLGtEQUFXO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwwQ0FBMEMsK0NBQVE7QUFDbEQsSUFBSSxnREFBUztBQUNiLFFBQVEsaUZBQW1CO0FBQzNCLEtBQUs7QUFDTCxnQ0FBZ0MsK0NBQVE7QUFDeEMsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0VBQVUsR0FBRyxxQ0FBcUM7QUFDMUQ7QUFDQTtBQUNBLEtBQUs7QUFDTCx3QkFBd0Isa0RBQVc7QUFDbkMsUUFBUSxrRUFBUztBQUNqQjtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksdURBQUksc0NBQXNDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxpQ0FBaUMsc0RBQUcsc0JBQXNCLGdCQUFnQixJQUFJO0FBQ3ZGO0FBQ0E7QUFDQSxpQkFBaUIsd0VBQU87QUFDeEIsWUFBWSxrQkFBa0I7QUFDOUIsWUFBWSw0QkFBNEI7QUFDeEMsMkJBQTJCLDZDQUFNO0FBQ2pDO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5REFBeUQ7QUFDckUscUJBQXFCLDZDQUFNO0FBQzNCLHNCQUFzQiw2Q0FBTTtBQUM1Qix1QkFBdUIsNkNBQU07QUFDN0Isc0NBQXNDLCtDQUFRO0FBQzlDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsa0JBQWtCLGtEQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0RBQVM7QUFDekI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiwyQkFBMkIsNEVBQWM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsNkVBQW9CO0FBQ3BELGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxzQkFBc0IsdURBQUksVUFBVSx1REFBdUQsc0RBQUcsWUFBWSxXQUFXLGdEQUFJO0FBQ3pILGlKQUFpSix1QkFBdUIsc0RBQUcsVUFBVSxzSUFBc0ksSUFBSSxzREFBRyxhQUFhLHlGQUF5RixJQUFJO0FBQzVhO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCLGdFQUFnRTtBQUMvRixZQUFZLGdDQUFnQyx3QkFBd0IsYUFBYSxFQUFFLCtEQUFXO0FBQzlGO0FBQ0E7QUFDQTtBQUNBLFlBQVksMERBQU07QUFDbEIsWUFBWSx5REFBSztBQUNqQixZQUFZLHdEQUFJO0FBQ2hCLFlBQVksd0RBQUk7QUFDaEI7QUFDQSwwQkFBMEIsMkJBQTJCO0FBQ3JEO0FBQ0Esc0NBQXNDLGdCQUFnQjtBQUN0RCxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQSx3QkFBd0IsOERBQVU7QUFDbEM7QUFDQSxLQUFLO0FBQ0wsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzREFBc0QsRUFBRSxrRkFBaUI7QUFDckYsaUJBQWlCLHdFQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0Esd0NBQXdDLGlFQUFZO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsd0VBQU87QUFDeEIsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQSx3Q0FBd0MsaUVBQVk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsK0NBQVE7QUFDeEQsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCwrQ0FBUTtBQUN4RCxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQix3RUFBTztBQUN4QixZQUFZLCtCQUErQixFQUFFLGtGQUFpQjtBQUM5RDtBQUNBLHdEQUF3RCwrQ0FBUTtBQUNoRTtBQUNBLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0wsZ0NBQWdDLGtEQUFXO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxpQkFBaUIsd0VBQU87QUFDeEIsWUFBWSxvQkFBb0IsRUFBRSxrRkFBaUI7QUFDbkQ7QUFDQSw0REFBNEQsK0NBQVEsU0FBUztBQUM3RSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDhCQUE4QixrREFBVztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlELE1BQU07QUFDL0Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvREFBYSxHQUFHO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpREFBVTtBQUNyQjtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkMscUJBQXFCLDhDQUFPLDJCQUEyQiwyQ0FBMkM7QUFDbEcsWUFBWSx1REFBSSxDQUFDLHVEQUFRLElBQUksV0FBVyxzREFBRyxVQUFVLDhDQUE4QyxHQUFHLHNEQUFHLENBQUMsK0RBQWUsSUFBSSxVQUFVLHNEQUFHLENBQUMsOERBQWMsSUFBSSx3QkFBd0Isc0RBQUcsVUFBVSxtRkFBbUYsR0FBRyxHQUFHLElBQUk7QUFDL1I7QUFDQSxzQkFBc0IsNkhBQTZIO0FBQ25KLHNDQUFzQywrQ0FBUTtBQUM5QywwQkFBMEIsNkNBQU07QUFDaEM7QUFDQSxZQUFZLHFDQUFxQztBQUNqRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGVBQWU7QUFDMUU7QUFDQTtBQUNBLGtFQUFrRSxlQUFlO0FBQ2pGO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWSx1REFBSSxDQUFDLHVEQUFRLElBQUkseUJBQXlCLHNEQUFHLHlCQUF5QixTQUFTLGtDQUFrQyxvREFBb0Qsc0RBQUcsZUFBZSxnQ0FBZ0MsMkNBQTJDLHNEQUFHLFVBQVU7QUFDM1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0NBQW9DLFdBQVcsSUFBSSxzREFBRyxpQkFBaUIsOENBQThDLElBQUk7QUFDOUk7O0FBRUEsdUJBQXVCLHdCQUF3QjtBQUMvQyxnQkFBZ0IsNkNBQU07QUFDdEIsWUFBWSxzREFBRyxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHNCQUFzQjtBQUMvQjtBQUNBLGlDQUFpQyxtQkFBbUI7QUFDcEQsWUFBWSxzREFBRyxTQUFTLHNEQUFzRCxzREFBRyxhQUFhLDZCQUE2QixHQUFHO0FBQzlIOztBQUVBLGdCQUFnQixpQkFBaUIsTUFBTSxzREFBRyxXQUFXLFdBQVcsZ0RBQUksZ0RBQWdELEtBQUssZUFBZTs7QUFFeEksbUJBQW1CLGlEQUFVO0FBQzdCLFlBQVksc0RBQXNEO0FBQ2xFLFlBQVksc0RBQUcsYUFBYSxXQUFXLGdEQUFJO0FBQzNDLDBEQUEwRCxRQUFRO0FBQ2xFO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTLCtCQUErQixzREFBRyxTQUFTLFlBQVksR0FBRztBQUNuRSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFdBQVcscURBQWM7QUFDekI7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLGlEQUFVLDRCQUE0Qiw4S0FBOEs7QUFDNU8sWUFBWSx1REFBSSxVQUFVLFdBQVcsZ0RBQUk7QUFDekM7QUFDQTtBQUNBLFNBQVMsc0NBQXNDLHVEQUFJLFVBQVUsV0FBVyxnREFBSTtBQUM1RTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYyxzREFBRyxhQUFhO0FBQy9DO0FBQ0E7QUFDQSx5QkFBeUIsMENBQTBDLFlBQVksc0RBQUcsZUFBZSx3SUFBd0ksc0RBQUcsU0FBUyxVQUFVLEtBQUssZUFBZSxzREFBRyxVQUFVLHNFQUFzRSxLQUFLO0FBQzNXLENBQUM7QUFDRCxnQ0FBZ0MsaURBQVUsb0NBQW9DLFdBQVc7QUFDekYsWUFBWSxzREFBRyxlQUFlLFdBQVcsZ0RBQUk7QUFDN0M7QUFDQSxTQUFTLDBEQUEwRDtBQUNuRSxDQUFDOztBQUVELHNCQUFzQixtQkFBbUI7QUFDekMsWUFBWSxzREFBRyxhQUFhLGtFQUFrRTtBQUM5Rjs7QUFFQSw0QkFBNEIsOEJBQThCO0FBQzFELGlCQUFpQix3RUFBTztBQUN4Qix3QkFBd0Isa0RBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWSxzREFBRyxlQUFlLHdIQUF3SDtBQUN0Sjs7QUFFQTtBQUNBLFlBQVksOElBQThJO0FBQzFKLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLFlBQVksdURBQUksVUFBVSxpREFBaUQsdURBQUksVUFBVTtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw4QkFBOEIsc0RBQUcsUUFBUSwwQkFBMEIsR0FBRyxzREFBRyxXQUFXLGtFQUFrRSxZQUFZLHNEQUFHLFFBQVEsb0dBQW9HLFlBQVksZUFBZTtBQUM3VDs7QUFFQTtBQUNBLFlBQVksZ0lBQWdJO0FBQzVJLFlBQVksb0JBQW9CLEVBQUUsa0ZBQWlCO0FBQ25EO0FBQ0EsOEJBQThCLDZDQUFNO0FBQ3BDLG9EQUFvRCwrQ0FBUTtBQUM1RCxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwyQkFBMkIsa0RBQVc7QUFDdEM7QUFDQSxnQkFBZ0Isc0RBQUcsaUJBQWlCLHVHQUF1RztBQUMzSTtBQUNBLFlBQVksc0RBQUcsaUJBQWlCLHFNQUFxTTtBQUNyTzs7QUFFQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLFlBQVkscUJBQXFCLEVBQUUsa0ZBQWlCO0FBQ3BELFlBQVksdUJBQXVCO0FBQ25DLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCO0FBQ0EsWUFBWSxzREFBRyxpQkFBaUIsNEdBQTRHO0FBQzVJOztBQUVBLDJDQUEyQyxpQkFBaUI7QUFDNUQsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekIsWUFBWSw0QkFBNEI7QUFDeEMsb0NBQW9DLCtDQUFRO0FBQzVDO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZLHNEQUFHLGlCQUFpQixvTEFBb0w7QUFDcE47O0FBRUEsNEJBQTRCLDZDQUE2QztBQUN6RSxZQUFZLHVEQUFJLFVBQVUsV0FBVyxnREFBSSx3RUFBd0Usc0RBQUcsVUFBVSxXQUFXLGdEQUFJLDhDQUE4QyxXQUFXLHNEQUFHLFFBQVEsZ0VBQWdFLElBQUk7QUFDclI7O0FBRUEsbUJBQW1CLDBGQUEwRjtBQUM3RyxxQkFBcUIsNkNBQU07QUFDM0IsWUFBWSxnQ0FBZ0M7QUFDNUM7QUFDQTtBQUNBLHFCQUFxQix5REFBSyxHQUFHLG1CQUFtQjtBQUNoRCxLQUFLO0FBQ0wsSUFBSSxnREFBUztBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLHVEQUFJLFVBQVUsV0FBVyxnREFBSTtBQUN6QztBQUNBO0FBQ0E7QUFDQSxTQUFTLGFBQWEsc0RBQUcsQ0FBQyw2REFBYSxJQUFJLHNGQUFzRixjQUFjO0FBQy9JOztBQUVBLGlDQUFpQyw4QkFBOEIsSUFBSTtBQUNuRSxnREFBZ0QsK0NBQVE7QUFDeEQsNkJBQTZCLGtEQUFXO0FBQ3hDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsNkJBQTZCLGtEQUFXO0FBQ3hDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsYUFBYTtBQUNiOztBQUVBO0FBQ0EsdUJBQXVCLHNFQUFzRTtBQUM3RixZQUFZLHFEQUFxRDtBQUNqRSw4Q0FBOEMsK0NBQVE7QUFDdEQ7QUFDQSxZQUFZLHVEQUFJLENBQUMsdURBQVEsSUFBSSxXQUFXLHNEQUFHLFlBQVksaUtBQWlLLEdBQUcsc0RBQUcsVUFBVSxpR0FBaUcsSUFBSTtBQUM3VTs7QUFFQTtBQUNBLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVksMENBQTBDO0FBQ3RELFlBQVksUUFBUTtBQUNwQixZQUFZLHVEQUFJLFVBQVUsZ0VBQWdFLHVEQUFJLFVBQVUsMERBQTBELHNEQUFHLFNBQVMsc0JBQXNCLEdBQUcsc0RBQUcsU0FBUyw4RUFBOEUsSUFBSSxHQUFHLHNEQUFHLFFBQVEsNkdBQTZHLEdBQUcsdURBQUksVUFBVSwyREFBMkQsc0RBQUcsb0JBQW9CLDZEQUE2RCxHQUFHLHNEQUFHLG9CQUFvQixpRkFBaUYsc0RBQUcscUJBQXFCLHdCQUF3QixJQUFJLElBQUk7QUFDbnVCO0FBQ0EscUNBQXFDLGlEQUFVO0FBQy9DLFlBQVksc0RBQUcsb0JBQW9CLGdHQUFnRyxzREFBRyxTQUFTLHVCQUF1QixHQUFHO0FBQ3pLLENBQUM7QUFDRCx3Q0FBd0MsVUFBVTtBQUNsRCxZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLHFFQUFxRTtBQUNqRjtBQUNBLGdCQUFnQixzREFBRyxDQUFDLHVFQUFVLElBQUk7QUFDbEMsZ0JBQWdCLGtFQUFhO0FBQzdCLGdCQUFnQixrRUFBYTtBQUM3Qix5QkFBeUIsc0RBQUcsZUFBZSx5RkFBeUYsc0RBQUcsMEJBQTBCLEdBQUcsR0FBRztBQUN2SztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0RBQUcsQ0FBQyx1RUFBVSxJQUFJO0FBQzlCLFlBQVksa0VBQWE7QUFDekIsWUFBWSxrRUFBYTtBQUN6QixxQkFBcUIsc0RBQUcsZ0JBQWdCLHdCQUF3QixzREFBRyxvQkFBb0IsbU5BQW1OLHNEQUFHLHFCQUFxQixNQUFNLHNEQUFHLFNBQVMsdUJBQXVCLElBQUksR0FBRyxHQUFHO0FBQ3JYO0FBQ0EsNEJBQTRCLFNBQVM7QUFDckMsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekIsWUFBWSxxRUFBcUU7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzREFBRyxDQUFDLHVFQUFVLElBQUk7QUFDOUIsWUFBWSxrRUFBYTtBQUN6QixZQUFZLGtFQUFhO0FBQ3pCLHFCQUFxQixzREFBRyxvQkFBb0I7QUFDNUM7QUFDQSx5SkFBeUosc0RBQUcscUJBQXFCLE1BQU0sc0RBQUcsU0FBUyxvRUFBb0UsSUFBSSxHQUFHO0FBQzlROztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZUFBZSxxQkFBcUIsNEVBQTRFO0FBQ3BJLGlCQUFpQix3RUFBTztBQUN4QixJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQyxZQUFZLHNEQUFHLFVBQVUsNENBQTRDLHNEQUFHLFdBQVcsNkZBQTZGLEdBQUc7QUFDbkw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMkJBQTJCLCtCQUErQjtBQUMxRCxZQUFZLHNEQUFHLENBQUMsdUVBQVUsSUFBSSxpQkFBaUIsa0VBQWEsNkJBQTZCLHNEQUFHLGVBQWUsc0dBQXNHLHNEQUFHLHlCQUF5QixzQkFBc0IsR0FBRyxHQUFHO0FBQ3pRO0FBQ0Esa0NBQWtDLGlEQUFVLHNDQUFzQyxXQUFXO0FBQzdGLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVksc0RBQUcsZ0JBQWdCLDZEQUE2RCxzREFBRyxvQkFBb0IsMkRBQTJELHNEQUFHLFNBQVMsbUJBQW1CLEdBQUcsR0FBRztBQUNuTixDQUFDO0FBQ0QsZ0NBQWdDLG1DQUFtQztBQUNuRSxpQkFBaUIsd0VBQU87QUFDeEIsWUFBWSxRQUFRO0FBQ3BCLFlBQVksc0RBQUcsVUFBVSxXQUFXLGdEQUFJO0FBQ3hDO0FBQ0E7QUFDQSxTQUFTLDBDQUEwQyxzREFBRyxhQUFhO0FBQ25FO0FBQ0E7QUFDQSxhQUFhLGlGQUFpRiwwQkFBMEI7QUFDeEg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrRUFBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLFVBQVU7QUFDdEIsWUFBWSxpRUFBaUUsRUFBRSxrRkFBaUI7QUFDaEc7QUFDQSxZQUFZLHlEQUF5RCx1QkFBdUIsa0VBQWE7QUFDekc7QUFDQTtBQUNBLFlBQVksZ0NBQWdDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksc0RBQUcsQ0FBQyx1RUFBVSxJQUFJLGlCQUFpQixrRUFBYSx5QkFBeUIsc0RBQUcsMkJBQTJCLFlBQVksa0VBQWEsNFBBQTRQLHNEQUFHLGdCQUFnQiwrQ0FBK0Msc0RBQUcsb0JBQW9CO0FBQ2plO0FBQ0EsMkhBQTJILHNEQUFHLFNBQVMsdUVBQXVFLEdBQUcsR0FBRyxHQUFHLEdBQUc7QUFDMU47O0FBRUEsc0JBQXNCLG9EQUFhLEdBQUc7QUFDdEM7QUFDQSxZQUFZLDhGQUE4RjtBQUMxRyxnQ0FBZ0MsK0NBQVE7QUFDeEMsMENBQTBDLCtDQUFRO0FBQ2xELDhDQUE4QywrQ0FBUTtBQUN0RCw4Q0FBOEMsK0NBQVE7QUFDdEQsWUFBWSxnQkFBZ0IsRUFBRSwrREFBVztBQUN6QztBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMERBQVU7QUFDeEMscUJBQXFCLHdEQUFJO0FBQ3pCLEtBQUs7QUFDTCx3QkFBd0IsNkNBQU07QUFDOUIsc0JBQXNCLDZDQUFNO0FBQzVCLHlCQUF5QixrREFBVztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxRUFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0JBQXNCLGdFQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGtCQUFrQiw0REFBUTtBQUMxQixvQkFBb0IsOERBQVU7QUFDOUIsaUJBQWlCLDJEQUFPLFlBQVksaUJBQWlCO0FBQ3JELFlBQVksb0RBQW9ELEVBQUUsbUVBQWU7QUFDakYsMEJBQTBCLDhDQUFPO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksdURBQUksVUFBVSw2Q0FBNkMsdURBQUksVUFBVSxtSEFBbUgsdURBQUksWUFBWSxzRUFBc0Usc0RBQUcsU0FBUyw2REFBNkQsb0JBQW9CLEdBQUcsc0RBQUcsU0FBUyxrR0FBa0csSUFBSSxHQUFHLHNEQUFHLDJCQUEyQiwyQ0FBMkMsc0RBQUcsQ0FBQyxvRUFBb0IsSUFBSSwwQ0FBMEMsc0RBQUcsVUFBVSwrRkFBK0Ysc0RBQUcsQ0FBQyw0REFBWSxJQUFJLG9FQUFvRSxHQUFHLEdBQUcsSUFBSSxJQUFJO0FBQ3AxQjtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEMsWUFBWSw2QkFBNkIsRUFBRSxpREFBVTtBQUNyRCxZQUFZLGFBQWEsRUFBRSwrREFBVztBQUN0QyxZQUFZLHVEQUFJLFVBQVUsV0FBVyxnREFBSTtBQUN6QztBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVMsY0FBYyxzREFBRyxTQUFTLG1EQUFtRCxHQUFHLHNEQUFHLFdBQVcseURBQXlELElBQUk7QUFDcEs7QUFDQTtBQUNBLFlBQVksNEVBQTRFO0FBQ3hGLFlBQVksc0RBQUcsV0FBVyxvSkFBb0o7QUFDOUs7O0FBRUEsZ0NBQWdDLHVFQUF1RTtBQUN2RyxZQUFZLHVEQUFJLFlBQVksV0FBVyxnREFBSTtBQUMzQztBQUNBO0FBQ0EsU0FBUywyQkFBMkIsc0RBQUcsWUFBWSw0SUFBNEksV0FBVztBQUMxTTtBQUNBO0FBQ0EsWUFBWSxrRkFBa0Y7QUFDOUYsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFJLFVBQVUsMkVBQTJFLHNEQUFHLFVBQVUsaUZBQWlGLHVCQUF1QixzREFBRyx5QkFBeUIsT0FBTyxLQUFLLGtGQUFrRjtBQUNwVix3QkFBd0Isc0RBQUcseUJBQXlCLE9BQU8sS0FBSyxJQUFJLGdCQUFnQjtBQUNwRjtBQUNBO0FBQ0EscUJBQXFCLHNGQUFzRjtBQUMzRyxhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBLFlBQVksa0ZBQWtGO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrREFBVztBQUNwQztBQUNBLEtBQUs7QUFDTCxZQUFZLHVEQUFJLFVBQVUsaUVBQWlFLHNEQUFHLFVBQVUsaUZBQWlGLEdBQUcsc0RBQUcsbUJBQW1CO0FBQ2xOLDRCQUE0QixzREFBRyx5QkFBeUIseUdBQXlHO0FBQ2pLLGlCQUFpQixHQUFHLElBQUk7QUFDeEI7QUFDQTtBQUNBLFlBQVksa0RBQWtEO0FBQzlEO0FBQ0EsZUFBZSxzREFBRyx1QkFBdUIsU0FBUztBQUNsRDtBQUNBLFlBQVksc0RBQUcsMkJBQTJCLCtDQUErQztBQUN6Rjs7QUFFQSxvQ0FBb0Msb0JBQW9CO0FBQ3hELFlBQVkscUJBQXFCLEVBQUUsa0ZBQWlCO0FBQ3BELFlBQVksc0NBQXNDO0FBQ2xELFlBQVksc0RBQUcsbUJBQW1CO0FBQ2xDO0FBQ0EsU0FBUyxxREFBcUQ7QUFDOUQ7QUFDQSxxQ0FBcUMsb0JBQW9CO0FBQ3pELFlBQVksa0JBQWtCLEVBQUUsa0ZBQWlCO0FBQ2pELFlBQVksK0RBQStEO0FBQzNFO0FBQ0E7QUFDQSxZQUFZLHNEQUFHLG1CQUFtQjtBQUNsQztBQUNBLFNBQVMseURBQXlEO0FBQ2xFOztBQUVBLCtCQUErQixvQkFBb0I7QUFDbkQsWUFBWSxpQkFBaUIsRUFBRSxrRkFBaUI7QUFDaEQsWUFBWSxrQ0FBa0M7QUFDOUMsWUFBWSxzREFBRyxtQkFBbUI7QUFDbEM7QUFDQSxTQUFTLHdEQUF3RDtBQUNqRTs7QUFFQSwwQkFBMEIsbUNBQW1DO0FBQzdELFlBQVksc0RBQUcsZUFBZSx5R0FBeUcsc0RBQUcsU0FBUyxHQUFHO0FBQ3RKO0FBQ0E7QUFDQSxZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLHVEQUFJLFVBQVUsb0RBQW9ELHNEQUFHLHdCQUF3Qiw2QkFBNkIsR0FBRyxzREFBRyw2QkFBNkIsMEJBQTBCLEdBQUcsc0RBQUcsOEJBQThCLDZCQUE2QixJQUFJO0FBQ3hRO0FBQ0EsdUNBQXVDLGlEQUFVLDJDQUEyQyxXQUFXO0FBQ3ZHLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVksc0RBQUcsZUFBZSxXQUFXLGdEQUFJO0FBQzdDO0FBQ0EsU0FBUyxzRUFBc0U7QUFDL0UsQ0FBQzs7QUFFRDtBQUNBLFlBQVkscURBQXFEO0FBQ2pFLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVkscUJBQXFCLEVBQUUsa0ZBQWlCO0FBQ3BELFlBQVkscURBQXFEO0FBQ2pFLGtEQUFrRCwrQ0FBUTtBQUMxRDtBQUNBLFlBQVksc0RBQUcsZ0JBQWdCO0FBQy9CO0FBQ0EsK0VBQStFLHVEQUFJLG9CQUFvQix1REFBdUQsZ0RBQUk7QUFDbEs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWEsc0RBQUcsU0FBUyw2Q0FBNkMsNkJBQTZCLHNEQUFHLFdBQVcsOEdBQThHLEtBQUssR0FBRztBQUNwUDtBQUNBO0FBQ0EsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekIsWUFBWSxnQkFBZ0Isc0RBQUcsNkJBQTZCLG9CQUFvQixzRUFBc0U7QUFDdEosWUFBWSx5REFBeUQsdUJBQXVCLGtFQUFhO0FBQ3pHLFlBQVkscUJBQXFCLEVBQUUsa0ZBQWlCO0FBQ3BELFlBQVkscURBQXFEO0FBQ2pFLGtEQUFrRCwrQ0FBUTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZLHNEQUFHLENBQUMsdUVBQVUsSUFBSSxpQkFBaUIsa0VBQWEsd0JBQXdCLHNEQUFHLDJCQUEyQixZQUFZLGtFQUFhLDROQUE0TixzREFBRyxnQkFBZ0I7QUFDMVg7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGLHVEQUFJLG9CQUFvQjtBQUNuSDtBQUNBO0FBQ0EscUJBQXFCLGFBQWEsc0RBQUcsU0FBUyw0Q0FBNEMsaURBQWlELHNEQUFHLFdBQVcsNERBQTRELEtBQUssR0FBRyxHQUFHLEdBQUc7QUFDbk87O0FBRUE7QUFDQSxZQUFZLHdHQUF3RztBQUNwSCxZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLGlCQUFpQixFQUFFLGtGQUFpQjtBQUNoRCxZQUFZLGlEQUFpRDtBQUM3RCxrREFBa0QsK0NBQVE7QUFDMUQ7QUFDQSxZQUFZLHNEQUFHLGdCQUFnQjtBQUMvQjtBQUNBLGlGQUFpRix1REFBSSxvQkFBb0IsdURBQXVELGdEQUFJO0FBQ3BLO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxhQUFhLHNEQUFHLFNBQVMsbURBQW1ELDZCQUE2QixzREFBRyxXQUFXLDhHQUE4RyxLQUFLLEdBQUc7QUFDMVA7QUFDQTtBQUNBLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVksZ0JBQWdCLHNEQUFHLHdCQUF3QixvQkFBb0Isc0VBQXNFO0FBQ2pKLFlBQVkseURBQXlELHVCQUF1QixrRUFBYTtBQUN6RyxZQUFZLGtDQUFrQyxFQUFFLGtGQUFpQjtBQUNqRSxZQUFZLGlEQUFpRDtBQUM3RDtBQUNBO0FBQ0Esa0RBQWtELCtDQUFRO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksc0RBQUcsQ0FBQyx1RUFBVSxJQUFJLGlCQUFpQixrRUFBYSx3QkFBd0Isc0RBQUcsMkJBQTJCLFlBQVksa0VBQWEsNlBBQTZQLHNEQUFHLGdCQUFnQjtBQUMzWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUdBQWlHLHVEQUFJLG9CQUFvQjtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixhQUFhLHNEQUFHLFNBQVMsa0RBQWtEO0FBQ2hHO0FBQ0EsMkRBQTJELHNEQUFHLFdBQVcsNERBQTRELEtBQUssR0FBRyxHQUFHLEdBQUc7QUFDbko7O0FBRUE7QUFDQSxZQUFZLGlCQUFpQjtBQUM3QixZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLHVEQUFJLFVBQVUsMkRBQTJELHVEQUFJLGFBQWEsNElBQTRJLHNEQUFHLFNBQVMsc0ZBQXNGLHFCQUFxQixHQUFHLHNEQUFHLENBQUMsdUVBQVUsSUFBSSxpQkFBaUIsa0VBQWEsc0JBQXNCLHVEQUFJLGFBQWEsOElBQThJLHNEQUFHLFNBQVMsc0ZBQXNGLDJCQUEyQixHQUFHLElBQUk7QUFDcnRCO0FBQ0EsbUNBQW1DLGlEQUFVLHVDQUF1QyxXQUFXO0FBQy9GLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVksc0RBQUcsZ0JBQWdCLDhEQUE4RCxzREFBRyxlQUFlLGdJQUFnSSxHQUFHO0FBQ2xQLENBQUM7QUFDRCxtQ0FBbUMsbUJBQW1CO0FBQ3RELGlCQUFpQix3RUFBTztBQUN4Qix3QkFBd0Isa0RBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsMEJBQTBCLGtEQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksc0RBQUcsZUFBZSw0RUFBNEUsc0RBQUcsZ0JBQWdCLDRDQUE0QyxHQUFHO0FBQzVLO0FBQ0EsNEJBQTRCLHNDQUFzQztBQUNsRSxpQkFBaUIsd0VBQU87QUFDeEIsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekIsd0JBQXdCLGtEQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksc0RBQUcsZUFBZSx1SkFBdUo7QUFDckw7O0FBRUEsd0JBQXdCLFNBQVMsTUFBTSx1REFBSSxVQUFVLGtEQUFrRCxzREFBRyxtQ0FBbUMsVUFBVSxzREFBRyxnQ0FBZ0MsR0FBRyxHQUFHLHNEQUFHLGdDQUFnQyxHQUFHLHNEQUFHLG9CQUFvQixHQUFHLHNEQUFHLHNCQUFzQixHQUFHLHNEQUFHLHFCQUFxQixHQUFHLHNEQUFHLHFCQUFxQixrQkFBa0IsSUFBSTs7QUFFclcsNENBQUssVUFBVSxvREFBYSxFQUFFLGtEQUFXLEVBQUUsa0RBQVcsRUFBRSxtREFBWTtBQUNwRTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixnQkFBZ0IsR0FBRyxrQkFBa0I7QUFDM0QsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixJQUFJO0FBQ2hDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esb0JBQW9CLDhDQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxZQUFZLHNEQUFHLFVBQVUsbUVBQW1FLHNEQUFHLENBQUMsa0RBQUksSUFBSSxnRkFBZ0YsR0FBRztBQUMzTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEI7QUFDN0IsdUJBQXVCLDZCQUE2QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLCtDQUErQztBQUMzRCw4Q0FBOEMsK0NBQVE7QUFDdEQ7QUFDQSw0QkFBNEIsWUFBWSxlQUFlLGtCQUFrQjtBQUN6RSxLQUFLO0FBQ0wsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekIsZ0RBQWdELCtDQUFRO0FBQ3hELG9EQUFvRCwrQ0FBUTtBQUM1RCwwQkFBMEIsNkNBQU07QUFDaEMsWUFBWSxxQkFBcUIsRUFBRSxrRkFBaUI7QUFDcEQ7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzREFBRyxVQUFVLGtFQUFrRSx1REFBSSxDQUFDLHVEQUFRLElBQUksV0FBVyx1REFBSSxVQUFVLHVEQUF1RCx1REFBSSxTQUFTLHdEQUF3RCxzREFBRyxTQUFTLGdFQUFnRSx1QkFBdUIsR0FBRyxzREFBRyxRQUFRLGdLQUFnSyxJQUFJLEdBQUcsc0RBQUcsVUFBVSw0REFBNEQsc0RBQUcsMEJBQTBCLHVCQUF1QixHQUFHLEdBQUcsdURBQUksVUFBVSx1REFBdUQsdURBQUksU0FBUyx3REFBd0Qsc0RBQUcsU0FBUyxtRUFBbUUsMkJBQTJCLEdBQUcsc0RBQUcsUUFBUSw2SEFBNkgsSUFBSSxHQUFHLHVEQUFJLFVBQVUsK0RBQStELHNEQUFHLGFBQWEsdURBQXVELEdBQUcsc0RBQUcsYUFBYSwrQkFBK0IseURBQXlELHFDQUFxQyxHQUFHLHNEQUFHLGFBQWEsc0NBQXNDLG1EQUFtRDtBQUNsN0M7QUFDQTtBQUNBLCtCQUErQixHQUFHLHNEQUFHLGFBQWEsc0NBQXNDLGtEQUFrRDtBQUMxSTtBQUNBO0FBQ0EsK0JBQStCLEdBQUcsc0RBQUcsYUFBYSxvRkFBb0YsR0FBRyxzREFBRyxhQUFhLHlHQUF5RyxHQUFHLHNEQUFHLGFBQWEsdUZBQXVGLEdBQUcsc0RBQUcsYUFBYSwwR0FBMEcsR0FBRyxzREFBRyxhQUFhLG9EQUFvRCxHQUFHLHNEQUFHLGFBQWEsd0RBQXdELElBQUksSUFBSSxJQUFJO0FBQ3ZvQjtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCLGdDQUFnQywrQ0FBUTtBQUN4QyxZQUFZLGdDQUFnQyxFQUFFLCtEQUFXO0FBQ3pEO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsa0JBQWtCLDREQUFRO0FBQzFCLFlBQVksc0NBQXNDLEVBQUUsbUVBQWU7QUFDbkUsWUFBWSx1REFBSSxDQUFDLHVEQUFRLElBQUksV0FBVyxzREFBRyxVQUFVLG9HQUFvRyxzREFBRyxTQUFTLDhEQUE4RCxHQUFHLGNBQWMsc0RBQUcsVUFBVSxtSkFBbUosS0FBSztBQUN6WjtBQUNBLG9CQUFvQixtQ0FBbUM7QUFDdkQsWUFBWSxzREFBRyxVQUFVLFdBQVcsZ0RBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsU0FBUyxhQUFhLHNEQUFHLFVBQVUsbUVBQW1FLEdBQUc7QUFDekc7QUFDQTtBQUNBLFlBQVksd0NBQXdDO0FBQ3BELFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCO0FBQ0EsWUFBWSx1REFBSSxVQUFVLHFEQUFxRCx1REFBSSxVQUFVLDZEQUE2RCx1REFBSSxVQUFVLGlGQUFpRixzREFBRyx3QkFBd0IsMEJBQTBCLElBQUksR0FBRyxzREFBRyxVQUFVLGlFQUFpRSxJQUFJLDJCQUEyQixzREFBRyxhQUFhLHFDQUFxQyxJQUFJO0FBQzNkO0FBQ0E7QUFDQSxZQUFZLDRFQUE0RTtBQUN4RjtBQUNBO0FBQ0Esa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0FBQ3pCO0FBQ0Esd0JBQXdCLElBQUk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0JBQWtCLHVFQUF1RSxJQUFJO0FBQ3pHLFlBQVksa0JBQWtCLDJCQUEyQixJQUFJO0FBQzdEO0FBQ0E7QUFDQSxjQUFjLDRDQUE0QztBQUMxRDtBQUNBO0FBQ0EsWUFBWSxtQkFBbUIsK0VBQStFLElBQUk7QUFDbEgsWUFBWSxtQkFBbUIsK0JBQStCLElBQUk7QUFDbEU7QUFDQTtBQUNBLGNBQWMsZ0RBQWdEO0FBQzlEOztBQUVBLCtCQUErQixzREFBRyxlQUFlLGdFQUFnRSxzREFBRyxjQUFjLEdBQUc7QUFDckkseUJBQXlCLGlEQUFVO0FBQ25DLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVkscUJBQXFCO0FBQ2pDLFlBQVksc0RBQUcsb0JBQW9CLDJIQUEySCxzREFBRyxTQUFTLGVBQWUsR0FBRztBQUM1TCxDQUFDOztBQUVEO0FBQ0EsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekIsWUFBWSxrRkFBa0Y7QUFDOUYsa0RBQWtELCtDQUFRO0FBQzFELFlBQVksc0RBQUcsZ0JBQWdCLDZFQUE2RSxzREFBRyxvQkFBb0I7QUFDbkk7QUFDQTtBQUNBLGFBQWEsWUFBWSxzREFBRyxTQUFTLGlCQUFpQixHQUFHLEdBQUc7QUFDNUQ7O0FBRUEsOEJBQThCLE1BQU07QUFDcEM7QUFDQTtBQUNBLFlBQVksc0RBQUcsQ0FBQyx1REFBUSxJQUFJLFVBQVUsc0RBQUcsVUFBVSw2RUFBNkUsc0RBQUcsMkJBQTJCLGdCQUFnQixhQUFhLEdBQUc7QUFDOUw7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQyxpQkFBaUIsd0VBQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFJLFVBQVUsNkRBQTZELHNEQUFHLFVBQVUsa0ZBQWtGLEdBQUcsc0RBQUcsQ0FBQyx1RUFBVSxJQUFJLGlCQUFpQixrRUFBYSx5QkFBeUIsc0RBQUcsZUFBZSx1REFBdUQsR0FBRyxJQUFJO0FBQ2xWOztBQUVBLHFDQUFxQyxVQUFVO0FBQy9DLFlBQVksZ0RBQWdELEVBQUUsa0ZBQWlCO0FBQy9FO0FBQ0E7QUFDQSxZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLHVEQUFJLFVBQVUsNERBQTRELHVEQUFJLFVBQVUsMkZBQTJGLHVEQUFJLFdBQVcseUdBQXlHLHFDQUFxQyxzREFBRyxXQUFXLDZGQUE2RixrQ0FBa0MsR0FBRyxLQUFLLEdBQUcsc0RBQUcsZUFBZSxnR0FBZ0csSUFBSTtBQUMxbUI7O0FBRUEsc0NBQXNDLGdEQUFnRDtBQUN0RixzQkFBc0IsaUVBQVE7QUFDOUIsc0JBQXNCLGlFQUFRO0FBQzlCLHVCQUF1QixpRUFBUTtBQUMvQixZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLHVEQUFJLFVBQVUsNkRBQTZELHNEQUFHLFdBQVcscURBQXFELEdBQUcsc0RBQUcsZ0JBQWdCLDBCQUEwQixHQUFHLHVEQUFJLFVBQVUsb0ZBQW9GLHNEQUFHLG1CQUFtQix3RUFBd0UsZ0RBQUksMkZBQTJGLDhCQUE4QixJQUFJLEdBQUcsc0RBQUcsbUJBQW1CLGdFQUFnRSxnREFBSSwyRkFBMkYsb0NBQW9DLElBQUksa0JBQWtCLHNEQUFHLG1CQUFtQiwrQkFBK0IsZ0RBQUksbUdBQW1HLElBQUksc0RBQUcsZUFBZSxpRUFBaUUsc0RBQUcsb0NBQW9DLFNBQVMsZ0NBQWdDLFlBQVksc0RBQUcsa0NBQWtDLEdBQUcsR0FBRyxJQUFJLElBQUk7QUFDbG9DO0FBQ0EsbUNBQW1DLHNEQUFHLGdCQUFnQixVQUFVO0FBQ2hFLDhCQUE4QixhQUFhO0FBQzNDLDBCQUEwQixpRkFBZ0I7QUFDMUMsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsVUFBVSxHQUFHLE9BQU87QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNEQUFHLGdCQUFnQiwyR0FBMkc7QUFDMUk7QUFDQSx1QkFBdUIsaURBQVU7QUFDakMsV0FBVyxzREFBRyxlQUFlLHNEQUFzRDtBQUNuRixDQUFDOztBQUVELGtDQUFrQyxPQUFPLE1BQU0sc0RBQUcsVUFBVSxrRkFBa0Ysc0RBQUcsK0JBQStCLDBCQUEwQiw0QkFBNEI7O0FBRXRPO0FBQ0EsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekIsWUFBWSxzREFBRyxVQUFVLHVGQUF1RjtBQUNoSDs7QUFFQSx1QkFBdUIsK0JBQStCO0FBQ3RELDRDQUE0QywrQ0FBUTtBQUNwRCxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWSx1REFBSSxVQUFVLFdBQVcsZ0RBQUk7QUFDekM7QUFDQSxTQUFTLGNBQWMsc0RBQUcsWUFBWSxzREFBc0QsZUFBZSxzREFBRyxhQUFhLGdGQUFnRixzREFBRyxXQUFXLG9EQUFvRCxHQUFHLE1BQU0sc0RBQUcsV0FBVyw0Q0FBNEMsS0FBSztBQUNyVjs7QUFFQSx5QkFBeUIsOElBQThJO0FBQ3ZLO0FBQ0EsZ0JBQWdCLHNEQUFHLFVBQVUsMkRBQTJELHNEQUFHLHVCQUF1QixHQUFHO0FBQ3JIO0FBQ0E7QUFDQSxlQUFlLHNEQUFHLCtCQUErQjtBQUNqRDtBQUNBLFdBQVcsc0RBQUcscUJBQXFCLHFCQUFxQjtBQUN4RDs7QUFFQSxxQkFBcUIsK0NBQStDO0FBQ3BFLDhDQUE4QywrQ0FBUTtBQUN0RCw4REFBOEQsK0NBQVE7QUFDdEUsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw2RUFBNkU7QUFDN0csMENBQTBDLCtDQUFRO0FBQ2xELDRDQUE0QywrQ0FBUTtBQUNwRCx1QkFBdUIsa0RBQVc7QUFDbEMsWUFBWSx1REFBSSxVQUFVLHFEQUFxRCxzREFBRyw4QkFBOEIsa0JBQWtCLEdBQUcsc0RBQUcsZ0JBQWdCLGlDQUFpQyxlQUFlLDJGQUEyRixHQUFHLHNEQUFHLHFDQUFxQyw4REFBOEQsR0FBRyx1REFBSSxVQUFVLDRGQUE0RixzREFBRyw2QkFBNkIsb0hBQW9ILG1DQUFtQyxzREFBRyw4QkFBOEIsc0hBQXNILEtBQUssSUFBSTtBQUNoMUI7QUFDQSw0Q0FBNEMsZ0NBQWdDO0FBQzVFLGlCQUFpQix3RUFBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFJLFVBQVUscUVBQXFFLHNEQUFHLFVBQVUsd0dBQXdHLHNEQUFHLENBQUMsdUVBQVUsSUFBSSxpQkFBaUIsa0VBQWEsa0RBQWtELHNEQUFHLGVBQWUsd0NBQXdDLEdBQUcsSUFBSSxHQUFHLHNEQUFHLGVBQWUsaUVBQWlFLHNEQUFHLGdCQUFnQixrREFBa0Qsc0RBQUcsMEJBQTBCLHVHQUF1RyxTQUFTLEdBQUcsSUFBSTtBQUN0cUI7QUFDQSxvQ0FBb0MsNEhBQTRIO0FBQ2hLLFlBQVksa0JBQWtCLEVBQUUsa0ZBQWlCO0FBQ2pELDJDQUEyQyxRQUFRLHlEQUFJLEVBQUU7QUFDekQsZ0NBQWdDLGtEQUFXO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0wsWUFBWSx1Q0FBdUM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksc0RBQUcsa0JBQWtCLCtPQUErTztBQUNoUjtBQUNBLHFDQUFxQyw4SEFBOEg7QUFDbkssWUFBWSx3QkFBd0IsRUFBRSxrRkFBaUI7QUFDdkQ7QUFDQSxpQ0FBaUMsa0RBQVc7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTCxZQUFZLHVDQUF1QztBQUNuRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWSxzREFBRyxrQkFBa0IsMk9BQTJPO0FBQzVRO0FBQ0EsdUJBQXVCLGlEQUFVO0FBQ2pDLFdBQVcsc0RBQUcsZUFBZSxvREFBb0Q7QUFDakYsQ0FBQzs7QUFFRDtBQUNBLFlBQVksbUJBQW1CO0FBQy9CLGlCQUFpQix3RUFBTztBQUN4QixZQUFZLG1CQUFtQixFQUFFLGtGQUFpQjtBQUNsRDtBQUNBLG9DQUFvQywrQ0FBUTtBQUM1QyxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksc0RBQUcsVUFBVSxXQUFXLGdEQUFJLHVHQUF1RztBQUMvSTs7QUFFQSxtQ0FBbUMsNEJBQTRCO0FBQy9ELFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVksdURBQUksVUFBVSxnRUFBZ0UsdURBQUksVUFBVSwrREFBK0Qsc0RBQUcsV0FBVyxnQ0FBZ0MsMkJBQTJCLHVEQUFJLFdBQVcsNkNBQTZDLFdBQVcsaUJBQWlCLHNEQUFHLGVBQWUsMERBQTBELEtBQUs7QUFDelo7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsWUFBWTtBQUM3QyxZQUFZLHVEQUFJLFNBQVMsOERBQThELHNEQUFHLFVBQVUsZ0lBQWdJLEdBQUcsc0RBQUcsVUFBVSwwSUFBMEksR0FBRyxzREFBRyxVQUFVLHdJQUF3SSxHQUFHLHNEQUFHLFVBQVUsNEdBQTRHLHNEQUFHLFFBQVEsV0FBVyxnREFBSSxzT0FBc08sc0RBQUcsU0FBUyxrQkFBa0IsR0FBRyxHQUFHLElBQUk7QUFDMTdCOztBQUVBO0FBQ0EsWUFBWSx1REFBSSxVQUFVLGdIQUFnSCxzREFBRyxVQUFVLGtFQUFrRSxHQUFHLHNEQUFHLFFBQVEsdUdBQXVHLElBQUk7QUFDbFY7O0FBRUEsdUNBQXVDLGlCQUFpQjtBQUN4RCxZQUFZLHVEQUFJLENBQUMsdURBQVEsSUFBSSw4Q0FBOEMsc0RBQUcsMEJBQTBCLHNCQUFzQix5QkFBeUIsc0RBQUcscUJBQXFCLGlDQUFpQyxJQUFJO0FBQ3BOOztBQUVBLDZCQUE2Qix1U0FBdVM7QUFDcFUsWUFBWSx1REFBSSxVQUFVLHdEQUF3RCxzREFBRyw4QkFBOEIsc0RBQXNELEdBQUcsc0RBQUcsVUFBVSwyRUFBMkUsc0RBQUcsNkJBQTZCLGdDQUFnQyw4QkFBOEIsdURBQUksQ0FBQyx1REFBUSxJQUFJLFdBQVcsc0RBQUcsU0FBUyw2REFBNkQsdURBQUksU0FBUyw4REFBOEQsc0RBQUcsVUFBVSx5RUFBeUUsR0FBRyxzREFBRyxVQUFVLDJFQUEyRSxHQUFHLHNEQUFHLFVBQVUseUVBQXlFLEdBQUcsc0RBQUcsVUFBVSx1REFBdUQsSUFBSSxHQUFHLEdBQUcsc0RBQUcsU0FBUyxnR0FBZ0csc0RBQUcsNEJBQTRCLHNCQUFzQix5QkFBeUIsSUFBSSxNQUFNLHNEQUFHLDJCQUEyQixJQUFJLElBQUk7QUFDdmxDOztBQUVBLGlDQUFpQyxvREFBYTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlEQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksOEJBQThCO0FBQzFDLGlCQUFpQix3RUFBTztBQUN4QixZQUFZLHFDQUFxQyxFQUFFLGtGQUFpQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0ZBQWlDO0FBQzdDLDRDQUE0QyxrRUFBYTtBQUN6RCw0REFBNEQsK0NBQVE7QUFDcEUsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHNDQUFzQywrQ0FBUTtBQUM5QyxtQkFBbUIsNkNBQU07QUFDekIsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksc0RBQUcsc0NBQXNDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUyxzQkFBc0I7QUFDL0I7O0FBRUE7QUFDQSxpQkFBaUIsd0VBQU87QUFDeEIsWUFBWSxzQkFBc0IsRUFBRSxrRkFBaUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGlFQUFZO0FBQzdELFlBQVksc0RBQUcsVUFBVSwrRUFBK0Usc0RBQUcscUJBQXFCLDJCQUEyQixNQUFNLHVEQUFJLENBQUMsdURBQVEsSUFBSSxXQUFXLHNEQUFHLHFCQUFxQiwyQkFBMkIsR0FBRyxzREFBRyxxQkFBcUIsNEJBQTRCLGNBQWMsOEJBQThCLElBQUksSUFBSTtBQUMzVjs7QUFFQTtBQUNBLEtBQUssaUVBQVk7QUFDakIsS0FBSyxpRUFBWTtBQUNqQixLQUFLLGlFQUFZO0FBQ2pCLEtBQUssaUVBQVk7QUFDakIsS0FBSyxpRUFBWTtBQUNqQixLQUFLLGlFQUFZO0FBQ2pCLEtBQUssaUVBQVk7QUFDakIsS0FBSyxpRUFBWTtBQUNqQixLQUFLLGlFQUFZO0FBQ2pCLEtBQUssaUVBQVk7QUFDakI7QUFDQTtBQUNBLFlBQVksOENBQThDO0FBQzFELGlCQUFpQix3RUFBTztBQUN4QixZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLHNDQUFzQyxFQUFFLGtGQUFpQjtBQUNyRTtBQUNBO0FBQ0EsMEJBQTBCLGlGQUFnQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE1BQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxNQUFNO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFJLFVBQVUsOEVBQThFLHNEQUFHLFVBQVUseUZBQXlGLHVEQUFJLFVBQVUsMkRBQTJELHNEQUFHLFdBQVcsdUNBQXVDLGlCQUFpQixzREFBRyxVQUFVLGtEQUFrRCxzREFBRyxXQUFXLDBEQUEwRCxHQUFHLEtBQUssY0FBYyx5QkFBeUIsc0RBQUcsVUFBVSx5RkFBeUYsS0FBSyxpRUFBWSxVQUFVLGlFQUFZLHFDQUFxQyxzREFBRyx3QkFBd0IsS0FBSztBQUNydUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHdFQUFPO0FBQ3hCLFlBQVkseUNBQXlDLEVBQUUsa0ZBQWlCO0FBQ3hFO0FBQ0Esb0NBQW9DLCtDQUFRO0FBQzVDLHdEQUF3RCwrQ0FBUTtBQUNoRSx1REFBdUQsa0VBQWE7QUFDcEU7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFJLFVBQVUsZ0ZBQWdGLHVEQUFJLFVBQVUsc0VBQXNFLHVEQUFJLFdBQVcsMklBQTJJLEdBQUcsc0RBQUcsV0FBVztBQUN6VztBQUNBLHlCQUF5QiwwREFBMEQsSUFBSSxnQkFBZ0Isc0RBQUcsMEJBQTBCO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDBGQUEwRixLQUFLO0FBQ2hIO0FBQ0EsOEJBQThCLGlEQUFVO0FBQ3hDLFlBQVksc0RBQXNEO0FBQ2xFLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVksc0RBQUcsVUFBVTtBQUN6QixvQkFBb0Isb0JBQW9CO0FBQ3hDLG9CQUFvQixzREFBRyxDQUFDLDJDQUFVLElBQUksMkNBQTJDLHVEQUFJLFVBQVUsdURBQXVELHNEQUFHLFVBQVUsMEhBQTBILEdBQUcsc0RBQUcsV0FBVyxvSkFBb0osR0FBRyxzREFBRyxXQUFXLHVKQUF1SixHQUFHLHNEQUFHLFdBQVcseUpBQXlKLElBQUksaUJBQWlCLEtBQUssUUFBUSxHQUFHLFNBQVM7QUFDbDBCLFNBQVMsR0FBRztBQUNaLENBQUM7QUFDRDtBQUNBLFlBQVkscUJBQXFCO0FBQ2pDLFlBQVksc0RBQUcsYUFBYSxXQUFXLGdEQUFJLCtEQUErRDtBQUMxRztBQUNBO0FBQ0E7QUFDQSxhQUFhLGtFQUFhO0FBQzFCLHlCQUF5QixZQUFZLDJCQUEyQixVQUFVO0FBQzFFLGFBQWEsa0VBQWE7QUFDMUIseUJBQXlCLFlBQVk7QUFDckM7QUFDQSxhQUFhO0FBQ2IsYUFBYSxrRUFBYTtBQUMxQix5QkFBeUIsWUFBWTtBQUNyQztBQUNBLGFBQWE7QUFDYjtBQUNBLHlCQUF5QixZQUFZLDZCQUE2QixhQUFhO0FBQy9FO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQSx1QkFBdUIsc0RBQXNEO0FBQzdFLFlBQVksc0RBQUcsY0FBYyxxQkFBcUIsZ0RBQUksOENBQThDO0FBQ3BHOztBQUVBLGdDQUFnQyxpREFBVSxvQ0FBb0Msb0JBQW9CO0FBQ2xHLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLDhCQUE4QiwrQ0FBUTtBQUN0QztBQUNBLFlBQVksdURBQUksVUFBVTtBQUMxQix5QkFBeUIsc0RBQUcscUJBQXFCLFlBQVksTUFBTSxzREFBRyxVQUFVLDZGQUE2RixxQ0FBcUMsc0RBQUcsVUFBVSxvSUFBb0ksS0FBSztBQUN4VyxDQUFDO0FBQ0Q7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0RBQUcsVUFBVSxrRkFBa0Y7QUFDM0c7O0FBRUEsbUJBQW1CLDhGQUE4RjtBQUNqSCxZQUFZLGtHQUFrRztBQUM5RyxpQkFBaUIsd0VBQU87QUFDeEIsNENBQTRDLCtDQUFRO0FBQ3BEO0FBQ0EsOENBQThDLCtDQUFRO0FBQ3RELHdDQUF3QywrQ0FBUTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBZTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdCQUF3QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlFQUFRO0FBQ2xCO0FBQ0EsY0FBYyx1RUFBYztBQUM1QjtBQUNBO0FBQ0EsaURBQWlELG9FQUFlO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLFlBQVksdURBQUksQ0FBQyx1REFBUSxJQUFJLHNDQUFzQyxzREFBRyxZQUFZLG9CQUFvQixnREFBSTtBQUMxRztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsbUJBQW1CLHFFQUFxRSxzREFBRyxxQkFBcUIsU0FBUyxzQkFBc0IsbUVBQW1FLEtBQUs7QUFDdk47QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpREFBVSxzQkFBc0IsaUJBQWlCO0FBQ25FLDRDQUE0QywrQ0FBUTtBQUNwRCxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNkRBQVEsZUFBZSw2REFBUTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksc0RBQUcsWUFBWTtBQUMzQjtBQUNBO0FBQ0EsV0FBVztBQUNYLENBQUM7O0FBRUQ7QUFDQSxZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLHNEQUFHLFVBQVUsaUdBQWlHO0FBQzFIO0FBQ0E7QUFDQSxZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QixZQUFZLHNEQUFHLFVBQVUsMEZBQTBGO0FBQ25IO0FBQ0Esd0JBQXdCLG1LQUFtSztBQUMzTCxZQUFZLGlCQUFpQixFQUFFLGtGQUFpQjtBQUNoRCxZQUFZLHVDQUF1QztBQUNuRDtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFHLG9CQUFvQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdURBQUksQ0FBQyx1REFBUSxJQUFJLDJCQUEyQixzREFBRyxjQUFjLGdDQUFnQyxnREFBSTtBQUNySDtBQUNBO0FBQ0EscUJBQXFCLEdBQUcsZUFBZSxzREFBRywwQkFBMEIsSUFBSTtBQUN4RTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFHLHlCQUF5QjtBQUMvQztBQUNBLFlBQVksc0RBQUcsVUFBVSxXQUFXLGdEQUFJLHVFQUF1RTtBQUMvRzs7QUFFQTtBQUNBLFlBQVksb0RBQW9EO0FBQ2hFLG9EQUFvRCwrQ0FBUTtBQUM1RCxrRUFBa0UsK0NBQVE7QUFDMUUsaUJBQWlCLHdFQUFPO0FBQ3hCLFlBQVksSUFBSSxFQUFFLHdFQUFPO0FBQ3pCLFlBQVkseUJBQXlCO0FBQ3JDLDBCQUEwQixpRUFBUTtBQUNsQywwQkFBMEIsaUVBQVE7QUFDbEMsZ0NBQWdDLHVFQUFjO0FBQzlDLHFDQUFxQyw0RUFBbUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHVEQUF1RCxPQUFPO0FBQzlELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSx5REFBeUQsT0FBTztBQUNoRSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsWUFBWSx1REFBSSxnQkFBZ0IsK0JBQStCLHVEQUFJLDBCQUEwQiw0RUFBNEUsc0RBQUcsU0FBUyxhQUFhLGlDQUFpQyxHQUFHLHVEQUFJLENBQUMsdUVBQVUsSUFBSSxpQkFBaUIsa0VBQWEsK0JBQStCLHVEQUFJLDBCQUEwQixzRUFBc0Usc0RBQUcsU0FBUyxhQUFhLDJCQUEyQixHQUFHLHVEQUFJLDBCQUEwQix3RUFBd0Usc0RBQUcsU0FBUyxhQUFhLDZCQUE2QixJQUFJLEdBQUcsc0RBQUcsQ0FBQyx1RUFBVSxJQUFJLGlCQUFpQixrRUFBYSx5QkFBeUIsdURBQUksMEJBQTBCLCtCQUErQixzREFBRyxTQUFTLHFCQUFxQixnQkFBZ0IsR0FBRyxHQUFHLHVEQUFJLENBQUMsdUVBQVUsSUFBSSxpQkFBaUIsa0VBQWEsMkNBQTJDLHVEQUFJLDBCQUEwQiwrQkFBK0Isc0RBQUcsU0FBUyw0QkFBNEIseUJBQXlCLDRCQUE0Qix1REFBSSwwQkFBMEIscUNBQXFDLHNEQUFHLFNBQVMsMEJBQTBCLGdDQUFnQyxzQkFBc0IsdURBQUksMEJBQTBCLCtCQUErQixzREFBRyxTQUFTLGtCQUFrQixxQkFBcUIsaUNBQWlDLHVEQUFJLDBCQUEwQiwwQ0FBMEMsc0RBQUcsU0FBUyxrQkFBa0Isa0NBQWtDLEtBQUssOEJBQThCLHNEQUFHLDBCQUEwQiwrQ0FBK0MsYUFBYTtBQUMzbEQ7QUFDQSxpQkFBaUIsR0FBRyx5REFBeUQsc0RBQUcsMEJBQTBCLGlEQUFpRCxhQUFhO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixHQUFHLElBQUksdURBQUksQ0FBQyx1RUFBVSxJQUFJLGlCQUFpQixrRUFBYSxzQ0FBc0Msc0RBQUcsMEJBQTBCLHlCQUF5QixrRUFBYSwwQ0FBMEMsR0FBRyxzREFBRywwQkFBMEIseUJBQXlCLGtFQUFhLDBDQUEwQyxHQUFHLHNEQUFHLDBCQUEwQix5QkFBeUIsa0VBQWEsb0RBQW9ELEdBQUcsc0RBQUcsMEJBQTBCLDBCQUEwQixrRUFBYSw0Q0FBNEMsR0FBRyxzREFBRywwQkFBMEIsMEJBQTBCLGtFQUFhLDRDQUE0QyxHQUFHLHNEQUFHLDBCQUEwQiwwQkFBMEIsa0VBQWEsc0RBQXNELElBQUksSUFBSTtBQUNqekI7O0FBRUEscUNBQXFDLGdGQUFnRjtBQUNySCxpQkFBaUIsd0VBQU87QUFDeEI7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBLHFCQUFxQixpREFBVTtBQUMvQixXQUFXLHNEQUFHLGVBQWUsc0RBQXNEO0FBQ25GLENBQUM7QUFDRDtBQUNBLGlCQUFpQix3RUFBTztBQUN4QixZQUFZLElBQUksRUFBRSx3RUFBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFJLFVBQVUseURBQXlELHNEQUFHLFNBQVMsMEJBQTBCLEdBQUcsc0RBQUcsV0FBVyxvR0FBb0csR0FBRyx1REFBSSxhQUFhLDJGQUEyRixzREFBRyxTQUFTLGVBQWUsbUNBQW1DLElBQUk7QUFDL1o7QUFDQSxvQ0FBb0Msa0xBQWtMO0FBQ3ROLFlBQVkseUJBQXlCO0FBQ3JDLDRCQUE0Qix1RUFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdURBQUksQ0FBQyx1REFBUSxJQUFJLFdBQVcsc0RBQUcsOEJBQThCLEdBQUcsc0RBQUcsdUJBQXVCLHNDQUFzQyxJQUFJO0FBQ3BKO0FBQ0EsWUFBWSx1REFBSSxDQUFDLHVEQUFRLElBQUksOEJBQThCLHNEQUFHLGVBQWUsbUZBQW1GLHNEQUFHLG9DQUFvQyxHQUFHLElBQUksc0RBQUcsYUFBYSwwQkFBMEIsR0FBRyxzREFBRyx1QkFBdUIsc0NBQXNDLElBQUk7QUFDL1Q7QUFDQSw4QkFBOEIsMkJBQTJCO0FBQ3pELFlBQVksY0FBYztBQUMxQixZQUFZLHVFQUF1RTtBQUNuRixpQkFBaUIsd0VBQU87QUFDeEIsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekI7QUFDQSxRQUFRLDhEQUFTO0FBQ2pCLDBCQUEwQixpRUFBUTtBQUNsQywwQkFBMEIsaUVBQVE7QUFDbEM7QUFDQSxZQUFZLHVEQUFJLENBQUMsdURBQVEsSUFBSSxXQUFXLHNEQUFHLFVBQVUsdURBQXVELHVEQUFJLFdBQVcsc0hBQXNILHNEQUFHLFdBQVcsZ0VBQWdFLDRDQUE0QyxzREFBRyxXQUFXLGdFQUFnRTtBQUN6YjtBQUNBLHdCQUF3QixzREFBRyxXQUFXLHFIQUFxSCx5QkFBeUIsc0RBQUcsb0JBQW9CLElBQUksR0FBRyx5QkFBeUIsc0RBQUcsaUJBQWlCO0FBQy9QLDBDQUEwQyw4REFBUyx3R0FBd0csc0RBQUcsV0FBVyxXQUFXLGdEQUFJLDhHQUE4RywwQkFBMEIsc0NBQXNDLElBQUksS0FBSztBQUMvVztBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCLFlBQVksZ0NBQWdDO0FBQzVDLFlBQVksdURBQUksV0FBVyxXQUFXLGdEQUFJLGlLQUFpSyxzREFBRyxXQUFXLCtDQUErQyxHQUFHLHNEQUFHLFdBQVcsK0NBQStDLEdBQUcsc0RBQUcsV0FBVywrQ0FBK0MsSUFBSTtBQUM1WTs7QUFFQSx3QkFBd0IsaURBQVUsNEJBQTRCLDBEQUEwRCw4Q0FBOEMsSUFBSSw4RUFBOEU7QUFDeFAsWUFBWSwrREFBK0Q7QUFDM0UsMEJBQTBCLGlFQUFRO0FBQ2xDLDBCQUEwQixpRUFBUTtBQUNsQyxxQ0FBcUMsNEVBQW1CO0FBQ3hELGdEQUFnRCwrQ0FBUTtBQUN4RCwwREFBMEQsK0NBQVE7QUFDbEUsZ0ZBQWdGLCtDQUFRO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsd0NBQXdDLDhDQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDhDQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMLFlBQVksc0RBQUcsVUFBVTtBQUN6QjtBQUNBO0FBQ0EsU0FBUyxhQUFhLGdEQUFJLHlTQUF5Uyx1REFBSSxvQ0FBb0MscUZBQXFGLHVEQUFJLENBQUMsdURBQVEsSUFBSSw2QkFBNkIsc0RBQUcsVUFBVSxtREFBbUQsaUNBQWlDLHNEQUFHLFVBQVUsOERBQThELEtBQUssSUFBSSxzREFBRyxZQUFZLHFIQUFxSCx5Q0FBeUMsc0RBQUcsc0JBQXNCLDJCQUEyQixHQUFHO0FBQ3Y0QixDQUFDO0FBQ0Q7O0FBRUE7QUFDQSxtQkFBbUIsK0VBQWtCO0FBQ3JDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixRQUFRO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssYUFBYSxpQkFBaUIsYUFBYTtBQUNoRCxLQUFLLGFBQWEseUJBQXlCLGFBQWE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUIsc0JBQXNCLHVCQUF1QjtBQUN2RixLQUFLLFlBQVksOEJBQThCLFlBQVk7QUFDM0QsS0FBSyxZQUFZLDZCQUE2QixZQUFZO0FBQzFELEtBQUssWUFBWSwwQ0FBMEMsWUFBWTtBQUN2RSxLQUFLLFlBQVksNENBQTRDLFlBQVk7QUFDekUsS0FBSyxZQUFZLDZCQUE2QixhQUFhLE9BQU8sWUFBWSw2QkFBNkIsYUFBYTtBQUN4SDs7QUFFQSx1QkFBdUI7O0FBRXZCO0FBQ0EsWUFBWSxzREFBRyxDQUFDLGdGQUFtQixJQUFJLCtDQUErQztBQUN0RjtBQUNBOztBQUVBO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQSxtQ0FBbUMsOEVBQXlCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLDJFQUFrQixDQUFDLGtFQUFhO0FBQ3ZFO0FBQ0E7QUFDQSx1Q0FBdUMsNEVBQXVCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw4REFBUztBQUNoQyx3RUFBd0Usc0VBQWlCO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLG1FQUFtRSxFQUFFLGtGQUFpQjtBQUNsRyxpQkFBaUIsd0VBQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtRUFBYztBQUMxQztBQUNBO0FBQ0EscUJBQXFCLHNEQUFHLHVCQUF1QixnS0FBZ0s7QUFDL00sWUFBWSwyQkFBMkI7QUFDdkMsaUVBQWlFLHNEQUFHO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLDJSQUEyUjtBQUMzUixZQUFZLHVEQUFJLFVBQVUsK0RBQStELHNEQUFHLHNCQUFzQixrQ0FBa0MsMENBQTBDLHNEQUFHLG9CQUFvQjtBQUNyTix3QkFBd0IsdUJBQXVCLHNEQUFHLG9CQUFvQixXQUFXLGdEQUFJO0FBQ3JGLG9CQUFvQixnREFBSSw4R0FBOEcsa0RBQWtEO0FBQ3hMLHdCQUF3QixLQUFLO0FBQzdCO0FBQ0E7QUFDQSxZQUFZLDRIQUE0SDtBQUN4SSxZQUFZLGNBQWM7QUFDMUIsWUFBWSxzQkFBc0IsRUFBRSxrRkFBaUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxJQUFJLEVBQUUsd0VBQU87QUFDekIsWUFBWSxzREFBRyxVQUFVLDhEQUE4RCx1REFBSSxVQUFVLHNGQUFzRixzREFBRyxXQUFXLDRFQUE0RSw2QkFBNkIsc0RBQUcsV0FBVyxzRkFBc0Ysd0JBQXdCLHNEQUFHLFdBQVcsc0tBQXNLLHFCQUFxQixzREFBRyxXQUFXLHlGQUF5Rix5QkFBeUIsc0RBQUcsV0FBVyxxRkFBcUYsS0FBSyxHQUFHO0FBQ2wyQjtBQUNBO0FBQ0E7QUFDQSxZQUFZLGdDQUFnQyxFQUFFLGtGQUFpQjtBQUMvRDtBQUNBO0FBQ0Esb0NBQW9DLCtDQUFRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlCQUF5QjtBQUNyQyw0Q0FBNEMsK0NBQVE7QUFDcEQsV0FBVyxrREFBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx1QkFBdUIsRUFBRSx5QkFBeUIsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEdBQUcsd0JBQXdCLEVBQUUsUUFBUTtBQUN6STs7QUFFQTtBQUNBLG9DQUFvQyw2Q0FBNkM7QUFDakYsWUFBWSxzREFBRyxVQUFVLFdBQVcsZ0RBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsU0FBUyx5Q0FBeUMsc0RBQUcsb0JBQW9CLHFIQUFxSCw0QkFBNEI7QUFDMU47QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLG1KQUFtSjtBQUNuSiw0QkFBNEIsK0NBQVE7QUFDcEMsdUZBQXVGLCtDQUFRO0FBQy9GLGlCQUFpQix3RUFBTztBQUN4QixZQUFZLHlDQUF5QyxFQUFFLGtGQUFpQjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDhCQUE4Qiw4Q0FBTztBQUNyQztBQUNBO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFJLFVBQVUsOEdBQThHLHNEQUFHLHNCQUFzQixrQ0FBa0MsR0FBRyx1REFBSSxVQUFVLGlHQUFpRyxzREFBRyxlQUFlLGlIQUFpSCxzQkFBc0Isc0RBQUcsNkJBQTZCLDBHQUEwRywyQ0FBMkMsc0RBQUcsZUFBZSwwSUFBMEksS0FBSyxJQUFJO0FBQ3h5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCwrQ0FBUTtBQUMxRDtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsMkNBQTJDLHNEQUFHLDZCQUE2QiwwQkFBMEI7QUFDckcsZ0RBQWdELHNEQUFHLDZCQUE2QjtBQUNoRix5QkFBeUIsaU1BQWlNO0FBQzFOLGlCQUFpQix3RUFBTztBQUN4QixZQUFZLHlDQUF5QyxFQUFFLGtGQUFpQjtBQUN4RTtBQUNBO0FBQ0EsOEVBQThFLCtDQUFRO0FBQ3RGLGdFQUFnRSwrQ0FBUTtBQUN4RSw4REFBOEQsK0NBQVE7QUFDdEUsNkRBQTZELHVFQUFjO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFJLFVBQVUsNERBQTRELHNEQUFHLHNCQUFzQixrQ0FBa0MsR0FBRyx1REFBSSxVQUFVLFdBQVcsZ0RBQUk7QUFDakwsMERBQTBELHdCQUF3QixlQUFlLHNEQUFHLFVBQVUsd0ZBQXdGLHNEQUFHLG9CQUFvQixnTkFBZ04sSUFBSSwwRUFBMEUsdURBQUksVUFBVSxvSEFBb0gsc0RBQUcsVUFBVSxtSEFBbUgsdURBQUksVUFBVSxnSUFBZ0ksc0RBQUcsVUFBVSxvRUFBb0Usc0RBQUcsb0JBQW9CLG1JQUFtSSxHQUFHLHlGQUF5RixzREFBRyxVQUFVLG9FQUFvRSxzREFBRyxvQkFBb0Isd0hBQXdILEdBQUcsNkJBQTZCLEdBQUcsa0JBQWtCLHNEQUFHLDBCQUEwQiw4Q0FBOEMscUJBQXFCLHNEQUFHLDRCQUE0Qiw4Q0FBOEMsS0FBSyxLQUFLLElBQUk7QUFDbHFEO0FBQ0E7QUFDQSxtQ0FBbUMsZ0JBQWdCO0FBQ25EO0FBQ0E7QUFDQSxrQ0FBa0MsZ0NBQWdDO0FBQ2xFO0FBQ0E7QUFDQSxrQ0FBa0MsK0JBQStCO0FBQ2pFO0FBQ0EsWUFBWSx1REFBSSxDQUFDLHVEQUFRLElBQUksNERBQTRELHNEQUFHLGVBQWUsNkhBQTZILG1EQUFtRCxzREFBRyxlQUFlLDZIQUE2SCxLQUFLO0FBQy9hO0FBQ0EsaUNBQWlDLGdCQUFnQjtBQUNqRDtBQUNBO0FBQ0Esa0NBQWtDLCtCQUErQjtBQUNqRTtBQUNBO0FBQ0Esa0NBQWtDLDhCQUE4QjtBQUNoRTtBQUNBLFlBQVksdURBQUksQ0FBQyx1REFBUSxJQUFJLDBEQUEwRCxzREFBRyxlQUFlLHdIQUF3SCxzREFBc0Qsc0RBQUcsZUFBZSxnSUFBZ0ksS0FBSztBQUM5YTs7QUFFQTtBQUNBLFlBQVksZ0NBQWdDO0FBQzVDLG1CQUFtQixxRkFBb0I7QUFDdkMsNEJBQTRCLCtDQUFRO0FBQ3BDLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWSxzREFBRyxlQUFlLHNCQUFzQixzREFBRyxxQkFBcUIsZ0JBQWdCLEdBQUc7QUFDL0Y7O0FBRUE7QUFDQSxtRUFBVTtBQUNWLFVBQVUsOERBQVM7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFK3lEO0FBQ2h6RCIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtLWlvL3ZpZGVvLXJlYWN0LXNkay9kaXN0L2luZGV4LmVzLmpzP2M4MmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzQXVkaW8sIGhhc1NjcmVlblNoYXJlQXVkaW8sIGdldExvZ2dlciwgZGlzcG9zZU9mTWVkaWFTdHJlYW0sIENhbGxpbmdTdGF0ZSwgT3duQ2FwYWJpbGl0eSwgaGFzVmlkZW8sIGlzUGlubmVkLCBuYW1lLCBOb2lzZUNhbmNlbGxhdGlvblNldHRpbmdzTW9kZUVudW0sIGhhc1NjcmVlblNoYXJlLCBWaXNpYmlsaXR5U3RhdGUsIEJyb3dzZXJzLCBTZnVNb2RlbHMsIHBhZ2luYXRlZExheW91dFNvcnRQcmVzZXQsIGNvbWJpbmVDb21wYXJhdG9ycywgc2NyZWVuU2hhcmluZywgc3BlYWtlckxheW91dFNvcnRQcmVzZXQsIENhbGxUeXBlcywgZGVmYXVsdFNvcnRQcmVzZXQsIHNldFNka0luZm8gfSBmcm9tICdAc3RyZWFtLWlvL3ZpZGVvLWNsaWVudCc7XG5leHBvcnQgKiBmcm9tICdAc3RyZWFtLWlvL3ZpZGVvLWNsaWVudCc7XG5pbXBvcnQgeyB1c2VDYWxsLCB1c2VDYWxsU3RhdGVIb29rcywgdXNlSTE4biwgUmVzdHJpY3RlZCwgdXNlQ29ubmVjdGVkVXNlciwgU3RyZWFtQ2FsbFByb3ZpZGVyLCBTdHJlYW1WaWRlb1Byb3ZpZGVyLCB1c2VTdHJlYW1WaWRlb0NsaWVudCB9IGZyb20gJ0BzdHJlYW0taW8vdmlkZW8tcmVhY3QtYmluZGluZ3MnO1xuZXhwb3J0ICogZnJvbSAnQHN0cmVhbS1pby92aWRlby1yZWFjdC1iaW5kaW5ncyc7XG5pbXBvcnQgeyBqc3gsIEZyYWdtZW50LCBqc3hzIH0gZnJvbSAncmVhY3QvanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgRnJhZ21lbnQgYXMgRnJhZ21lbnQkMSwgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlTWVtbywgZm9yd2FyZFJlZiwgaXNWYWxpZEVsZW1lbnQsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZmx1c2hTeW5jIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TdXBwb3J0ZWQsIGxvYWRURkxpdGUsIGNyZWF0ZVJlbmRlcmVyIH0gZnJvbSAnQHN0cmVhbS1pby92aWRlby1maWx0ZXJzLXdlYic7XG5pbXBvcnQgeyB1c2VGbG9hdGluZywgb2Zmc2V0LCBzaGlmdCwgZmxpcCwgc2l6ZSwgYXV0b1VwZGF0ZSwgRmxvYXRpbmdPdmVybGF5LCBGbG9hdGluZ1BvcnRhbCwgYXJyb3csIEZsb2F0aW5nQXJyb3csIHVzZUxpc3RJdGVtLCB1c2VMaXN0TmF2aWdhdGlvbiwgdXNlVHlwZWFoZWFkLCB1c2VDbGljaywgdXNlRGlzbWlzcywgdXNlUm9sZSwgdXNlSW50ZXJhY3Rpb25zLCBGbG9hdGluZ0ZvY3VzTWFuYWdlciwgRmxvYXRpbmdMaXN0LCB1c2VIb3ZlciB9IGZyb20gJ0BmbG9hdGluZy11aS9yZWFjdCc7XG5pbXBvcnQgeyBDaGFydCwgQ2F0ZWdvcnlTY2FsZSwgTGluZWFyU2NhbGUsIExpbmVFbGVtZW50LCBQb2ludEVsZW1lbnQgfSBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAncmVhY3QtY2hhcnRqcy0yJztcblxuY29uc3QgQXVkaW8gPSAoeyBwYXJ0aWNpcGFudCwgdHJhY2tUeXBlID0gJ2F1ZGlvVHJhY2snLCAuLi5yZXN0IH0pID0+IHtcbiAgICBjb25zdCBjYWxsID0gdXNlQ2FsbCgpO1xuICAgIGNvbnN0IFthdWRpb0VsZW1lbnQsIHNldEF1ZGlvRWxlbWVudF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgICBjb25zdCB7IHVzZXJJZCwgc2Vzc2lvbklkIH0gPSBwYXJ0aWNpcGFudDtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNhbGwgfHwgIWF1ZGlvRWxlbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgY2xlYW51cCA9IGNhbGwuYmluZEF1ZGlvRWxlbWVudChhdWRpb0VsZW1lbnQsIHNlc3Npb25JZCwgdHJhY2tUeXBlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFudXA/LigpO1xuICAgICAgICB9O1xuICAgIH0sIFtjYWxsLCBzZXNzaW9uSWQsIGF1ZGlvRWxlbWVudCwgdHJhY2tUeXBlXSk7XG4gICAgcmV0dXJuIChqc3goXCJhdWRpb1wiLCB7IGF1dG9QbGF5OiB0cnVlLCAuLi5yZXN0LCByZWY6IHNldEF1ZGlvRWxlbWVudCwgXCJkYXRhLXVzZXItaWRcIjogdXNlcklkLCBcImRhdGEtc2Vzc2lvbi1pZFwiOiBzZXNzaW9uSWQsIFwiZGF0YS10cmFjay10eXBlXCI6IHRyYWNrVHlwZSB9KSk7XG59O1xuQXVkaW8uZGlzcGxheU5hbWUgPSAnQXVkaW8nO1xuXG5jb25zdCBQYXJ0aWNpcGFudHNBdWRpbyA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgcGFydGljaXBhbnRzLCBhdWRpb1Byb3BzIH0gPSBwcm9wcztcbiAgICByZXR1cm4gKGpzeChGcmFnbWVudCwgeyBjaGlsZHJlbjogcGFydGljaXBhbnRzLm1hcCgocGFydGljaXBhbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJ0aWNpcGFudC5pc0xvY2FsUGFydGljaXBhbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjb25zdCB7IGF1ZGlvU3RyZWFtLCBzY3JlZW5TaGFyZUF1ZGlvU3RyZWFtLCBzZXNzaW9uSWQgfSA9IHBhcnRpY2lwYW50O1xuICAgICAgICAgICAgY29uc3QgaGFzQXVkaW9UcmFjayA9IGhhc0F1ZGlvKHBhcnRpY2lwYW50KTtcbiAgICAgICAgICAgIGNvbnN0IGF1ZGlvVHJhY2tFbGVtZW50ID0gaGFzQXVkaW9UcmFjayAmJiBhdWRpb1N0cmVhbSAmJiAoanN4KEF1ZGlvLCB7IC4uLmF1ZGlvUHJvcHMsIHRyYWNrVHlwZTogXCJhdWRpb1RyYWNrXCIsIHBhcnRpY2lwYW50OiBwYXJ0aWNpcGFudCB9KSk7XG4gICAgICAgICAgICBjb25zdCBoYXNTY3JlZW5TaGFyZUF1ZGlvVHJhY2sgPSBoYXNTY3JlZW5TaGFyZUF1ZGlvKHBhcnRpY2lwYW50KTtcbiAgICAgICAgICAgIGNvbnN0IHNjcmVlblNoYXJlQXVkaW9UcmFja0VsZW1lbnQgPSBoYXNTY3JlZW5TaGFyZUF1ZGlvVHJhY2sgJiZcbiAgICAgICAgICAgICAgICBzY3JlZW5TaGFyZUF1ZGlvU3RyZWFtICYmIChqc3goQXVkaW8sIHsgLi4uYXVkaW9Qcm9wcywgdHJhY2tUeXBlOiBcInNjcmVlblNoYXJlQXVkaW9UcmFja1wiLCBwYXJ0aWNpcGFudDogcGFydGljaXBhbnQgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIChqc3hzKEZyYWdtZW50JDEsIHsgY2hpbGRyZW46IFthdWRpb1RyYWNrRWxlbWVudCwgc2NyZWVuU2hhcmVBdWRpb1RyYWNrRWxlbWVudF0gfSwgc2Vzc2lvbklkKSk7XG4gICAgICAgIH0pIH0pKTtcbn07XG5QYXJ0aWNpcGFudHNBdWRpby5kaXNwbGF5TmFtZSA9ICdQYXJ0aWNpcGFudHNBdWRpbyc7XG5cbmNvbnN0IFBhcnRpY2lwYW50Vmlld0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5jb25zdCB1c2VQYXJ0aWNpcGFudFZpZXdDb250ZXh0ID0gKCkgPT4gdXNlQ29udGV4dChQYXJ0aWNpcGFudFZpZXdDb250ZXh0KTtcblxuY29uc3QgQXZhdGFyID0gKHsgaW1hZ2VTcmMsIG5hbWUsIHN0eWxlLCBjbGFzc05hbWUsIC4uLnJlc3QgfSkgPT4ge1xuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIHJldHVybiAoanN4cyhGcmFnbWVudCwgeyBjaGlsZHJlbjogWyghaW1hZ2VTcmMgfHwgZXJyb3IpICYmIG5hbWUgJiYgKGpzeChBdmF0YXJGYWxsYmFjaywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgc3R5bGU6IHN0eWxlLCBuYW1lczogW25hbWVdIH0pKSwgaW1hZ2VTcmMgJiYgIWVycm9yICYmIChqc3goXCJpbWdcIiwgeyBvbkVycm9yOiAoKSA9PiBzZXRFcnJvcih0cnVlKSwgYWx0OiBcImF2YXRhclwiLCBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fYXZhdGFyJywgY2xhc3NOYW1lKSwgc3JjOiBpbWFnZVNyYywgc3R5bGU6IHN0eWxlLCAuLi5yZXN0IH0pKV0gfSkpO1xufTtcbmNvbnN0IEF2YXRhckZhbGxiYWNrID0gKHsgY2xhc3NOYW1lLCBuYW1lcywgc3R5bGUsIH0pID0+IHtcbiAgICByZXR1cm4gKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19hdmF0YXItLWluaXRpYWxzLWZhbGxiYWNrJywgY2xhc3NOYW1lKSwgc3R5bGU6IHN0eWxlLCBjaGlsZHJlbjoganN4cyhcImRpdlwiLCB7IGNoaWxkcmVuOiBbbmFtZXNbMF1bMF0sIG5hbWVzWzFdPy5bMF1dIH0pIH0pKTtcbn07XG5cbi8qKlxuICogVGhlIGNvbnRleHQgZm9yIHRoZSBiYWNrZ3JvdW5kIGZpbHRlcnMuXG4gKi9cbmNvbnN0IEJhY2tncm91bmRGaWx0ZXJzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgYmFja2dyb3VuZCBmaWx0ZXJzIGNvbnRleHQgQVBJLlxuICovXG5jb25zdCB1c2VCYWNrZ3JvdW5kRmlsdGVycyA9ICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChCYWNrZ3JvdW5kRmlsdGVyc0NvbnRleHQpO1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZUJhY2tncm91bmRGaWx0ZXJzIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBCYWNrZ3JvdW5kRmlsdGVyc1Byb3ZpZGVyJyk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xufTtcbi8qKlxuICogQSBwcm92aWRlciBjb21wb25lbnQgdGhhdCBlbmFibGVzIHRoZSB1c2Ugb2YgYmFja2dyb3VuZCBmaWx0ZXJzIGluIHlvdXIgYXBwLlxuICpcbiAqIFBsZWFzZSBtYWtlIHN1cmUgeW91IGhhdmUgdGhlIGBAc3RyZWFtLWlvL3ZpZGVvLWZpbHRlcnMtd2ViYCBwYWNrYWdlIGluc3RhbGxlZFxuICogaW4geW91ciBwcm9qZWN0IGJlZm9yZSB1c2luZyB0aGlzIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgQmFja2dyb3VuZEZpbHRlcnNQcm92aWRlciA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGJhY2tncm91bmRJbWFnZXMgPSBbXSwgYmFja2dyb3VuZEZpbHRlcjogYmdGaWx0ZXJGcm9tUHJvcHMgPSB1bmRlZmluZWQsIGJhY2tncm91bmRJbWFnZTogYmdJbWFnZUZyb21Qcm9wcyA9IHVuZGVmaW5lZCwgYmFja2dyb3VuZEJsdXJMZXZlbDogYmdCbHVyTGV2ZWxGcm9tUHJvcHMgPSAnaGlnaCcsIHRmRmlsZVBhdGgsIG1vZGVsRmlsZVBhdGgsIGJhc2VQYXRoLCBvbkVycm9yLCB9ID0gcHJvcHM7XG4gICAgY29uc3QgW2JhY2tncm91bmRGaWx0ZXIsIHNldEJhY2tncm91bmRGaWx0ZXJdID0gdXNlU3RhdGUoYmdGaWx0ZXJGcm9tUHJvcHMpO1xuICAgIGNvbnN0IFtiYWNrZ3JvdW5kSW1hZ2UsIHNldEJhY2tncm91bmRJbWFnZV0gPSB1c2VTdGF0ZShiZ0ltYWdlRnJvbVByb3BzKTtcbiAgICBjb25zdCBbYmFja2dyb3VuZEJsdXJMZXZlbCwgc2V0QmFja2dyb3VuZEJsdXJMZXZlbF0gPSB1c2VTdGF0ZShiZ0JsdXJMZXZlbEZyb21Qcm9wcyk7XG4gICAgY29uc3QgYXBwbHlCYWNrZ3JvdW5kSW1hZ2VGaWx0ZXIgPSB1c2VDYWxsYmFjaygoaW1hZ2VVcmwpID0+IHtcbiAgICAgICAgc2V0QmFja2dyb3VuZEZpbHRlcignaW1hZ2UnKTtcbiAgICAgICAgc2V0QmFja2dyb3VuZEltYWdlKGltYWdlVXJsKTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgYXBwbHlCYWNrZ3JvdW5kQmx1ckZpbHRlciA9IHVzZUNhbGxiYWNrKChibHVyTGV2ZWwgPSAnaGlnaCcpID0+IHtcbiAgICAgICAgc2V0QmFja2dyb3VuZEZpbHRlcignYmx1cicpO1xuICAgICAgICBzZXRCYWNrZ3JvdW5kQmx1ckxldmVsKGJsdXJMZXZlbCk7XG4gICAgfSwgW10pO1xuICAgIGNvbnN0IGRpc2FibGVCYWNrZ3JvdW5kRmlsdGVyID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBzZXRCYWNrZ3JvdW5kRmlsdGVyKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldEJhY2tncm91bmRJbWFnZSh1bmRlZmluZWQpO1xuICAgICAgICBzZXRCYWNrZ3JvdW5kQmx1ckxldmVsKCdoaWdoJyk7XG4gICAgfSwgW10pO1xuICAgIGNvbnN0IFtpc1N1cHBvcnRlZCwgc2V0SXNTdXBwb3J0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlzUGxhdGZvcm1TdXBwb3J0ZWQoKS50aGVuKHNldElzU3VwcG9ydGVkKTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgW3RmTGl0ZSwgc2V0VGZMaXRlXSA9IHVzZVN0YXRlKCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgLy8gZG9uJ3QgdHJ5IHRvIGxvYWQgVEZMaXRlIGlmIHRoZSBwbGF0Zm9ybSBpcyBub3Qgc3VwcG9ydGVkXG4gICAgICAgIGlmICghaXNTdXBwb3J0ZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxvYWRURkxpdGUoeyBiYXNlUGF0aCwgbW9kZWxGaWxlUGF0aCwgdGZGaWxlUGF0aCB9KVxuICAgICAgICAgICAgLnRoZW4oc2V0VGZMaXRlKVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIFRGTGl0ZScsIGVycikpO1xuICAgIH0sIFtiYXNlUGF0aCwgaXNTdXBwb3J0ZWQsIG1vZGVsRmlsZVBhdGgsIHRmRmlsZVBhdGhdKTtcbiAgICBjb25zdCBoYW5kbGVFcnJvciA9IHVzZUNhbGxiYWNrKChlcnJvcikgPT4ge1xuICAgICAgICBnZXRMb2dnZXIoWydmaWx0ZXJzJ10pKCd3YXJuJywgJ0ZpbHRlciBlbmNvdW50ZXJlZCBhbiBlcnJvciBhbmQgd2lsbCBiZSBkaXNhYmxlZCcpO1xuICAgICAgICBkaXNhYmxlQmFja2dyb3VuZEZpbHRlcigpO1xuICAgICAgICBvbkVycm9yPy4oZXJyb3IpO1xuICAgIH0sIFtkaXNhYmxlQmFja2dyb3VuZEZpbHRlciwgb25FcnJvcl0pO1xuICAgIHJldHVybiAoanN4cyhCYWNrZ3JvdW5kRmlsdGVyc0NvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHtcbiAgICAgICAgICAgIGlzU3VwcG9ydGVkLFxuICAgICAgICAgICAgaXNSZWFkeTogISF0ZkxpdGUsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2UsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQmx1ckxldmVsLFxuICAgICAgICAgICAgYmFja2dyb3VuZEZpbHRlcixcbiAgICAgICAgICAgIGRpc2FibGVCYWNrZ3JvdW5kRmlsdGVyLFxuICAgICAgICAgICAgYXBwbHlCYWNrZ3JvdW5kQmx1ckZpbHRlcixcbiAgICAgICAgICAgIGFwcGx5QmFja2dyb3VuZEltYWdlRmlsdGVyLFxuICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlcyxcbiAgICAgICAgICAgIHRmRmlsZVBhdGgsXG4gICAgICAgICAgICBtb2RlbEZpbGVQYXRoLFxuICAgICAgICAgICAgYmFzZVBhdGgsXG4gICAgICAgICAgICBvbkVycm9yOiBoYW5kbGVFcnJvcixcbiAgICAgICAgfSwgY2hpbGRyZW46IFtjaGlsZHJlbiwgdGZMaXRlICYmIGpzeChCYWNrZ3JvdW5kRmlsdGVycywgeyB0ZkxpdGU6IHRmTGl0ZSB9KV0gfSkpO1xufTtcbmNvbnN0IEJhY2tncm91bmRGaWx0ZXJzID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgY2FsbCA9IHVzZUNhbGwoKTtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBzdGFydCB9ID0gdXNlUmVuZGVyZXIocHJvcHMudGZMaXRlKTtcbiAgICBjb25zdCB7IGJhY2tncm91bmRGaWx0ZXIsIG9uRXJyb3IgfSA9IHVzZUJhY2tncm91bmRGaWx0ZXJzKCk7XG4gICAgY29uc3QgaGFuZGxlRXJyb3JSZWYgPSB1c2VSZWYodW5kZWZpbmVkKTtcbiAgICBoYW5kbGVFcnJvclJlZi5jdXJyZW50ID0gb25FcnJvcjtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNhbGwgfHwgIWJhY2tncm91bmRGaWx0ZXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgdW5yZWdpc3RlciB9ID0gY2FsbC5jYW1lcmEucmVnaXN0ZXJGaWx0ZXIoKG1zKSA9PiBzdGFydChtcywgKGVycm9yKSA9PiBoYW5kbGVFcnJvclJlZi5jdXJyZW50Py4oZXJyb3IpKSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB1bnJlZ2lzdGVyKCk7XG4gICAgICAgIH07XG4gICAgfSwgW2JhY2tncm91bmRGaWx0ZXIsIGNhbGwsIHN0YXJ0XSk7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xufTtcbmNvbnN0IHVzZVJlbmRlcmVyID0gKHRmTGl0ZSkgPT4ge1xuICAgIGNvbnN0IHsgYmFja2dyb3VuZEZpbHRlciwgYmFja2dyb3VuZEJsdXJMZXZlbCwgYmFja2dyb3VuZEltYWdlIH0gPSB1c2VCYWNrZ3JvdW5kRmlsdGVycygpO1xuICAgIGNvbnN0IHZpZGVvUmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IGNhbnZhc1JlZiA9IHVzZVJlZihudWxsKTtcbiAgICBjb25zdCBiZ0ltYWdlUmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IFt2aWRlb1NpemUsIHNldFZpZGVvU2l6ZV0gPSB1c2VTdGF0ZSh7XG4gICAgICAgIHdpZHRoOiAxOTIwLFxuICAgICAgICBoZWlnaHQ6IDEwODAsXG4gICAgfSk7XG4gICAgY29uc3Qgc3RhcnQgPSB1c2VDYWxsYmFjaygobXMsIG9uRXJyb3IpID0+IHtcbiAgICAgICAgbGV0IG91dHB1dFN0cmVhbTtcbiAgICAgICAgbGV0IHJlbmRlcmVyO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWJhY2tncm91bmRGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdObyBmaWx0ZXIgc3BlY2lmaWVkJykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZpZGVvRWwgPSB2aWRlb1JlZi5jdXJyZW50O1xuICAgICAgICAgICAgY29uc3QgY2FudmFzRWwgPSBjYW52YXNSZWYuY3VycmVudDtcbiAgICAgICAgICAgIGNvbnN0IGJnSW1hZ2VFbCA9IGJnSW1hZ2VSZWYuY3VycmVudDtcbiAgICAgICAgICAgIGlmICghdmlkZW9FbCB8fCAhY2FudmFzRWwgfHwgKGJhY2tncm91bmRJbWFnZSAmJiAhYmdJbWFnZUVsKSkge1xuICAgICAgICAgICAgICAgIC8vIFlvdSBzaG91bGQgc3RhcnQgcmVuZGVyZXIgaW4gZWZmZWN0IG9yIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignUmVuZGVyZXIgc3RhcnRlZCBiZWZvcmUgZWxlbWVudHMgYXJlIHJlYWR5JykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZGVvRWwuc3JjT2JqZWN0ID0gbXM7XG4gICAgICAgICAgICB2aWRlb0VsLnBsYXkoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbdHJhY2tdID0gbXMuZ2V0VmlkZW9UcmFja3MoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRyYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05vIHZpZGVvIHRyYWNrcyBpbiBpbnB1dCBtZWRpYSBzdHJlYW0nKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tTZXR0aW5ncyA9IHRyYWNrLmdldFNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgZmx1c2hTeW5jKCgpID0+IHNldFZpZGVvU2l6ZSh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0cmFja1NldHRpbmdzLndpZHRoID8/IDAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdHJhY2tTZXR0aW5ncy5oZWlnaHQgPz8gMCxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcih0ZkxpdGUsIHZpZGVvRWwsIGNhbnZhc0VsLCB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRGaWx0ZXIsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRCbHVyTGV2ZWwsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYmdJbWFnZUVsID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9LCBvbkVycm9yKTtcbiAgICAgICAgICAgICAgICBvdXRwdXRTdHJlYW0gPSBjYW52YXNFbC5jYXB0dXJlU3RyZWFtKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShvdXRwdXRTdHJlYW0pO1xuICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0NvdWxkIG5vdCBwbGF5IHRoZSBzb3VyY2UgdmlkZW8gc3RyZWFtJykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3V0cHV0LFxuICAgICAgICAgICAgc3RvcDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyPy5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdmlkZW9SZWYuY3VycmVudCAmJiAodmlkZW9SZWYuY3VycmVudC5zcmNPYmplY3QgPSBudWxsKTtcbiAgICAgICAgICAgICAgICBvdXRwdXRTdHJlYW0gJiYgZGlzcG9zZU9mTWVkaWFTdHJlYW0ob3V0cHV0U3RyZWFtKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSwgW2JhY2tncm91bmRCbHVyTGV2ZWwsIGJhY2tncm91bmRGaWx0ZXIsIGJhY2tncm91bmRJbWFnZSwgdGZMaXRlXSk7XG4gICAgY29uc3QgY2hpbGRyZW4gPSAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2JhY2tncm91bmQtZmlsdGVyc1wiLCBjaGlsZHJlbjogW2pzeChcInZpZGVvXCIsIHsgY2xhc3NOYW1lOiBjbHN4KCdzdHItdmlkZW9fX2JhY2tncm91bmQtZmlsdGVyc19fdmlkZW8nLCB2aWRlb1NpemUuaGVpZ2h0ID4gdmlkZW9TaXplLndpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICdzdHItdmlkZW9fX2JhY2tncm91bmQtZmlsdGVyc19fdmlkZW8tLXRhbGwnKSwgcmVmOiB2aWRlb1JlZiwgcGxheXNJbmxpbmU6IHRydWUsIG11dGVkOiB0cnVlLCBjb250cm9sczogZmFsc2UsIC4uLnZpZGVvU2l6ZSB9KSwgYmFja2dyb3VuZEltYWdlICYmIChqc3goXCJpbWdcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19iYWNrZ3JvdW5kLWZpbHRlcnNfX2JhY2tncm91bmQtaW1hZ2VcIiwgYWx0OiBcIkJhY2tncm91bmRcIiwgcmVmOiBiZ0ltYWdlUmVmLCBzcmM6IGJhY2tncm91bmRJbWFnZSwgLi4udmlkZW9TaXplIH0pKSwganN4KFwiY2FudmFzXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fYmFja2dyb3VuZC1maWx0ZXJzX190YXJnZXQtY2FudmFzXCIsIC4uLnZpZGVvU2l6ZSwgcmVmOiBjYW52YXNSZWYgfSldIH0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgfTtcbn07XG5cbmNvbnN0IHVzZUZsb2F0aW5nVUlQcmVzZXQgPSAoeyBtaWRkbGV3YXJlID0gW10sIHBsYWNlbWVudCwgc3RyYXRlZ3ksIG9mZnNldDogb2Zmc2V0SW5QeCA9IDEwLCB9KSA9PiB7XG4gICAgY29uc3QgeyByZWZzLCB4LCB5LCB1cGRhdGUsIGVsZW1lbnRzOiB7IGRvbVJlZmVyZW5jZSwgZmxvYXRpbmcgfSwgY29udGV4dCwgfSA9IHVzZUZsb2F0aW5nKHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBzdHJhdGVneSxcbiAgICAgICAgbWlkZGxld2FyZTogW1xuICAgICAgICAgICAgb2Zmc2V0KG9mZnNldEluUHgpLFxuICAgICAgICAgICAgc2hpZnQoKSxcbiAgICAgICAgICAgIGZsaXAoKSxcbiAgICAgICAgICAgIHNpemUoe1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgICAgIGFwcGx5OiAoeyBhdmFpbGFibGVIZWlnaHQsIGVsZW1lbnRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50cy5mbG9hdGluZy5zdHlsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiBgJHthdmFpbGFibGVIZWlnaHR9cHhgLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAuLi5taWRkbGV3YXJlLFxuICAgICAgICBdLFxuICAgIH0pO1xuICAgIC8vIGhhbmRsZSB3aW5kb3cgcmVzaXppbmdcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWRvbVJlZmVyZW5jZSB8fCAhZmxvYXRpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNsZWFudXAgPSBhdXRvVXBkYXRlKGRvbVJlZmVyZW5jZSwgZmxvYXRpbmcsIHVwZGF0ZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiBjbGVhbnVwKCk7XG4gICAgfSwgW2RvbVJlZmVyZW5jZSwgZmxvYXRpbmcsIHVwZGF0ZV0pO1xuICAgIHJldHVybiB7IHJlZnMsIHgsIHksIGRvbVJlZmVyZW5jZSwgZmxvYXRpbmcsIHN0cmF0ZWd5LCBjb250ZXh0IH07XG59O1xuXG5jb25zdCBkZWZhdWx0RGV2aWNlID0gJ2RlZmF1bHQnO1xuLyoqXG4gKiBUaGlzIGhvb2sgd2lsbCBwZXJzaXN0IHRoZSBkZXZpY2Ugc2V0dGluZ3MgdG8gbG9jYWwgc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0ga2V5IHRoZSBrZXkgdG8gdXNlIGZvciBsb2NhbCBzdG9yYWdlLlxuICovXG5jb25zdCB1c2VQZXJzaXN0RGV2aWNlUHJlZmVyZW5jZXMgPSAoa2V5KSA9PiB7XG4gICAgY29uc3QgeyB1c2VNaWNyb3Bob25lU3RhdGUsIHVzZUNhbWVyYVN0YXRlLCB1c2VTcGVha2VyU3RhdGUgfSA9IHVzZUNhbGxTdGF0ZUhvb2tzKCk7XG4gICAgY29uc3QgY2FsbCA9IHVzZUNhbGwoKTtcbiAgICBjb25zdCBtaWMgPSB1c2VNaWNyb3Bob25lU3RhdGUoKTtcbiAgICBjb25zdCBjYW1lcmEgPSB1c2VDYW1lcmFTdGF0ZSgpO1xuICAgIGNvbnN0IHNwZWFrZXIgPSB1c2VTcGVha2VyU3RhdGUoKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNhbGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChjYWxsLnN0YXRlLmNhbGxpbmdTdGF0ZSA9PT0gQ2FsbGluZ1N0YXRlLkxFRlQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcmVmZXJlbmNlcyA9IHtcbiAgICAgICAgICAgICAgICBtaWM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWREZXZpY2VJZDogbWljLnNlbGVjdGVkRGV2aWNlIHx8IGRlZmF1bHREZXZpY2UsXG4gICAgICAgICAgICAgICAgICAgIG11dGVkOiBtaWMuaXNNdXRlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FtZXJhOiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRGV2aWNlSWQ6IGNhbWVyYS5zZWxlY3RlZERldmljZSB8fCBkZWZhdWx0RGV2aWNlLFxuICAgICAgICAgICAgICAgICAgICBtdXRlZDogY2FtZXJhLmlzTXV0ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwZWFrZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWREZXZpY2VJZDogc3BlYWtlci5zZWxlY3RlZERldmljZSB8fCBkZWZhdWx0RGV2aWNlLFxuICAgICAgICAgICAgICAgICAgICBtdXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShwcmVmZXJlbmNlcykpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHNhdmUgZGV2aWNlIHByZWZlcmVuY2VzJywgZXJyKTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgY2FsbCxcbiAgICAgICAgY2FtZXJhLmlzTXV0ZSxcbiAgICAgICAgY2FtZXJhLnNlbGVjdGVkRGV2aWNlLFxuICAgICAgICBrZXksXG4gICAgICAgIG1pYy5pc011dGUsXG4gICAgICAgIG1pYy5zZWxlY3RlZERldmljZSxcbiAgICAgICAgc3BlYWtlci5zZWxlY3RlZERldmljZSxcbiAgICBdKTtcbn07XG4vKipcbiAqIFRoaXMgaG9vayB3aWxsIGFwcGx5IHRoZSBkZXZpY2Ugc2V0dGluZ3MgZnJvbSBsb2NhbCBzdG9yYWdlLlxuICpcbiAqIEBwYXJhbSBrZXkgdGhlIGtleSB0byB1c2UgZm9yIGxvY2FsIHN0b3JhZ2UuXG4gKi9cbmNvbnN0IHVzZUFwcGx5RGV2aWNlUHJlZmVyZW5jZXMgPSAoa2V5KSA9PiB7XG4gICAgY29uc3QgY2FsbCA9IHVzZUNhbGwoKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNhbGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChjYWxsLnN0YXRlLmNhbGxpbmdTdGF0ZSA9PT0gQ2FsbGluZ1N0YXRlLkxFRlQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGFwcGx5ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5pdE1pYyA9IGFzeW5jIChzZXR0aW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2FsbC5taWNyb3Bob25lLnNlbGVjdChwYXJzZURldmljZUlkKHNldHRpbmcuc2VsZWN0ZWREZXZpY2VJZCkpO1xuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5nLm11dGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNhbGwubWljcm9waG9uZS5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjYWxsLm1pY3JvcGhvbmUuZW5hYmxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGluaXRDYW1lcmEgPSBhc3luYyAoc2V0dGluZykgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IGNhbGwuY2FtZXJhLnNlbGVjdChwYXJzZURldmljZUlkKHNldHRpbmcuc2VsZWN0ZWREZXZpY2VJZCkpO1xuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5nLm11dGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNhbGwuY2FtZXJhLmRpc2FibGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNhbGwuY2FtZXJhLmVuYWJsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBpbml0U3BlYWtlciA9IChzZXR0aW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbC5zcGVha2VyLnNlbGVjdChwYXJzZURldmljZUlkKHNldHRpbmcuc2VsZWN0ZWREZXZpY2VJZCkgPz8gJycpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCBwcmVmZXJlbmNlcyA9IG51bGw7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHByZWZlcmVuY2VzID0gSlNPTi5wYXJzZSh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gbG9hZCBkZXZpY2UgcHJlZmVyZW5jZXMnLCBlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZWZlcmVuY2VzKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgaW5pdE1pYyhwcmVmZXJlbmNlcy5taWMpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGluaXRDYW1lcmEocHJlZmVyZW5jZXMuY2FtZXJhKTtcbiAgICAgICAgICAgICAgICBpbml0U3BlYWtlcihwcmVmZXJlbmNlcy5zcGVha2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgYXBwbHkoKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBhcHBseSBkZXZpY2UgcHJlZmVyZW5jZXMnLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9LCBbY2FsbCwga2V5XSk7XG59O1xuLyoqXG4gKiBUaGlzIGhvb2sgd2lsbCBhcHBseSBhbmQgcGVyc2lzdCB0aGUgZGV2aWNlIHByZWZlcmVuY2VzIGZyb20gbG9jYWwgc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0ga2V5IHRoZSBrZXkgdG8gdXNlIGZvciBsb2NhbCBzdG9yYWdlLlxuICovXG5jb25zdCB1c2VQZXJzaXN0ZWREZXZpY2VQcmVmZXJlbmNlcyA9IChrZXkgPSAnQHN0cmVhbS1pby9kZXZpY2UtcHJlZmVyZW5jZXMnKSA9PiB7XG4gICAgdXNlQXBwbHlEZXZpY2VQcmVmZXJlbmNlcyhrZXkpO1xuICAgIHVzZVBlcnNpc3REZXZpY2VQcmVmZXJlbmNlcyhrZXkpO1xufTtcbmNvbnN0IHBhcnNlRGV2aWNlSWQgPSAoZGV2aWNlSWQpID0+IGRldmljZUlkICE9PSBkZWZhdWx0RGV2aWNlID8gZGV2aWNlSWQgOiB1bmRlZmluZWQ7XG5cbmNvbnN0IFNDUk9MTF9USFJFU0hPTEQgPSAxMDtcbi8qKlxuICogSG9vayB3aGljaCBvYnNlcnZlcyBlbGVtZW50J3Mgc2Nyb2xsIHBvc2l0aW9uIGFuZCByZXR1cm5zIHRleHQgdmFsdWUgYmFzZWQgb24gdGhlXG4gKiBwb3NpdGlvbiBvZiB0aGUgc2Nyb2xsYmFyIChgdG9wYCwgYGJvdHRvbWAsIGBiZXR3ZWVuYCBhbmQgYG51bGxgIGlmIG5vIHNjcm9sbGJhciBpcyBhdmFpbGFibGUpXG4gKi9cbmNvbnN0IHVzZVZlcnRpY2FsU2Nyb2xsUG9zaXRpb24gPSAoc2Nyb2xsRWxlbWVudCwgdGhyZXNob2xkID0gU0NST0xMX1RIUkVTSE9MRCkgPT4ge1xuICAgIGNvbnN0IFtzY3JvbGxQb3NpdGlvbiwgc2V0U2Nyb2xsUG9zaXRpb25dID0gdXNlU3RhdGUobnVsbCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFzY3JvbGxFbGVtZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBzY3JvbGxIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCBoYXNWZXJ0aWNhbFNjcm9sbGJhciA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICBpZiAoIWhhc1ZlcnRpY2FsU2Nyb2xsYmFyKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZXRTY3JvbGxQb3NpdGlvbihudWxsKTtcbiAgICAgICAgICAgIGNvbnN0IGlzQXRUaGVUb3AgPSBlbGVtZW50LnNjcm9sbFRvcCA8PSB0aHJlc2hvbGQ7XG4gICAgICAgICAgICBpZiAoaXNBdFRoZVRvcClcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0U2Nyb2xsUG9zaXRpb24oJ3RvcCcpO1xuICAgICAgICAgICAgY29uc3QgaXNBdFRoZUJvdHRvbSA9IE1hdGguYWJzKGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZWxlbWVudC5zY3JvbGxUb3AgLSBlbGVtZW50LmNsaWVudEhlaWdodCkgPD0gdGhyZXNob2xkO1xuICAgICAgICAgICAgaWYgKGlzQXRUaGVCb3R0b20pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFNjcm9sbFBvc2l0aW9uKCdib3R0b20nKTtcbiAgICAgICAgICAgIHNldFNjcm9sbFBvc2l0aW9uKCdiZXR3ZWVuJyk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKHNjcm9sbEhhbmRsZXIpO1xuICAgICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKHNjcm9sbEVsZW1lbnQpO1xuICAgICAgICBzY3JvbGxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNjcm9sbEhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc2Nyb2xsRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgICAgIHJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfTtcbiAgICB9LCBbc2Nyb2xsRWxlbWVudCwgdGhyZXNob2xkXSk7XG4gICAgcmV0dXJuIHNjcm9sbFBvc2l0aW9uO1xufTtcbmNvbnN0IHVzZUhvcml6b250YWxTY3JvbGxQb3NpdGlvbiA9IChzY3JvbGxFbGVtZW50LCB0aHJlc2hvbGQgPSBTQ1JPTExfVEhSRVNIT0xEKSA9PiB7XG4gICAgY29uc3QgW3Njcm9sbFBvc2l0aW9uLCBzZXRTY3JvbGxQb3NpdGlvbl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXNjcm9sbEVsZW1lbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHNjcm9sbEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IGhhc0hvcml6b250YWxTY3JvbGxiYXIgPSBlbGVtZW50LnNjcm9sbFdpZHRoID4gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIGlmICghaGFzSG9yaXpvbnRhbFNjcm9sbGJhcilcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0U2Nyb2xsUG9zaXRpb24obnVsbCk7XG4gICAgICAgICAgICBjb25zdCBpc0F0VGhlU3RhcnQgPSBlbGVtZW50LnNjcm9sbExlZnQgPD0gdGhyZXNob2xkO1xuICAgICAgICAgICAgaWYgKGlzQXRUaGVTdGFydClcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0U2Nyb2xsUG9zaXRpb24oJ3N0YXJ0Jyk7XG4gICAgICAgICAgICBjb25zdCBpc0F0VGhlRW5kID0gTWF0aC5hYnMoZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuc2Nyb2xsTGVmdCAtIGVsZW1lbnQuY2xpZW50V2lkdGgpIDw9IHRocmVzaG9sZDtcbiAgICAgICAgICAgIGlmIChpc0F0VGhlRW5kKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZXRTY3JvbGxQb3NpdGlvbignZW5kJyk7XG4gICAgICAgICAgICBzZXRTY3JvbGxQb3NpdGlvbignYmV0d2VlbicpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihzY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgc2Nyb2xsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHNjcm9sbEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2Nyb2xsSGFuZGxlcik7XG4gICAgICAgICAgICByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH07XG4gICAgfSwgW3Njcm9sbEVsZW1lbnQsIHRocmVzaG9sZF0pO1xuICAgIHJldHVybiBzY3JvbGxQb3NpdGlvbjtcbn07XG5cbmNvbnN0IHVzZVRvZ2dsZUNhbGxSZWNvcmRpbmcgPSAoKSA9PiB7XG4gICAgY29uc3QgY2FsbCA9IHVzZUNhbGwoKTtcbiAgICBjb25zdCB7IHVzZUlzQ2FsbFJlY29yZGluZ0luUHJvZ3Jlc3MgfSA9IHVzZUNhbGxTdGF0ZUhvb2tzKCk7XG4gICAgY29uc3QgaXNDYWxsUmVjb3JkaW5nSW5Qcm9ncmVzcyA9IHVzZUlzQ2FsbFJlY29yZGluZ0luUHJvZ3Jlc3MoKTtcbiAgICBjb25zdCBbaXNBd2FpdGluZ1Jlc3BvbnNlLCBzZXRJc0F3YWl0aW5nUmVzcG9uc2VdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIC8vIFRPRE86IGFkZCBwZXJtaXNzaW9uc1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIC8vIHdlIHdhaXQgdW50aWwgY2FsbC5yZWNvcmRpbmdfc3RhcnRlZC9zdG9wcGVkIGV2ZW50IHRvIGZsaXBzIHRoZVxuICAgICAgICAvLyBgaXNDYWxsUmVjb3JkaW5nSW5Qcm9ncmVzc2Agc3RhdGUgdmFyaWFibGUuXG4gICAgICAgIC8vIE9uY2UgdGhlIGZsaXAgaGFwcGVucywgd2UgcmVtb3ZlIHRoZSBsb2FkaW5nIGluZGljYXRvclxuICAgICAgICBzZXRJc0F3YWl0aW5nUmVzcG9uc2UoKGlzQXdhaXRpbmcpID0+IHtcbiAgICAgICAgICAgIGlmIChpc0F3YWl0aW5nKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBpc0F3YWl0aW5nO1xuICAgICAgICB9KTtcbiAgICB9LCBbaXNDYWxsUmVjb3JkaW5nSW5Qcm9ncmVzc10pO1xuICAgIGNvbnN0IHRvZ2dsZUNhbGxSZWNvcmRpbmcgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXRJc0F3YWl0aW5nUmVzcG9uc2UodHJ1ZSk7XG4gICAgICAgICAgICBpZiAoaXNDYWxsUmVjb3JkaW5nSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIGF3YWl0IGNhbGw/LnN0b3BSZWNvcmRpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IGNhbGw/LnN0YXJ0UmVjb3JkaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCBzdGFydCByZWNvcmRpbmdgLCBlKTtcbiAgICAgICAgfVxuICAgIH0sIFtjYWxsLCBpc0NhbGxSZWNvcmRpbmdJblByb2dyZXNzXSk7XG4gICAgcmV0dXJuIHsgdG9nZ2xlQ2FsbFJlY29yZGluZywgaXNBd2FpdGluZ1Jlc3BvbnNlLCBpc0NhbGxSZWNvcmRpbmdJblByb2dyZXNzIH07XG59O1xuXG5jb25zdCB1c2VSZXF1ZXN0UGVybWlzc2lvbiA9IChwZXJtaXNzaW9uKSA9PiB7XG4gICAgY29uc3QgY2FsbCA9IHVzZUNhbGwoKTtcbiAgICBjb25zdCB7IHVzZUhhc1Blcm1pc3Npb25zIH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IGhhc1Blcm1pc3Npb24gPSB1c2VIYXNQZXJtaXNzaW9ucyhwZXJtaXNzaW9uKTtcbiAgICBjb25zdCBbaXNBd2FpdGluZ1Blcm1pc3Npb24sIHNldElzQXdhaXRpbmdQZXJtaXNzaW9uXSA9IHVzZVN0YXRlKGZhbHNlKTsgLy8gVE9ETzogbG9hZCB3aXRoIHBvc3NpYmx5IHBlbmRpbmcgc3RhdGVcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCByZXNldCA9ICgpID0+IHNldElzQXdhaXRpbmdQZXJtaXNzaW9uKGZhbHNlKTtcbiAgICAgICAgaWYgKGhhc1Blcm1pc3Npb24pXG4gICAgICAgICAgICByZXNldCgpO1xuICAgIH0sIFtoYXNQZXJtaXNzaW9uXSk7XG4gICAgY29uc3QgcmVxdWVzdFBlcm1pc3Npb24gPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChoYXNQZXJtaXNzaW9uKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNvbnN0IGNhblJlcXVlc3RQZXJtaXNzaW9uID0gISFjYWxsPy5wZXJtaXNzaW9uc0NvbnRleHQuY2FuUmVxdWVzdChwZXJtaXNzaW9uKTtcbiAgICAgICAgaWYgKGlzQXdhaXRpbmdQZXJtaXNzaW9uIHx8ICFjYW5SZXF1ZXN0UGVybWlzc2lvbilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgc2V0SXNBd2FpdGluZ1Blcm1pc3Npb24odHJ1ZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjYWxsPy5yZXF1ZXN0UGVybWlzc2lvbnMoe1xuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zOiBbcGVybWlzc2lvbl0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHNldElzQXdhaXRpbmdQZXJtaXNzaW9uKGZhbHNlKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVxdWVzdFBlcm1pc3Npb24gZmFpbGVkOiAke2Vycm9yfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCBbY2FsbCwgaGFzUGVybWlzc2lvbiwgaXNBd2FpdGluZ1Blcm1pc3Npb24sIHBlcm1pc3Npb25dKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1ZXN0UGVybWlzc2lvbixcbiAgICAgICAgaGFzUGVybWlzc2lvbixcbiAgICAgICAgY2FuUmVxdWVzdFBlcm1pc3Npb246ICEhY2FsbD8ucGVybWlzc2lvbnNDb250ZXh0LmNhblJlcXVlc3QocGVybWlzc2lvbiksXG4gICAgICAgIGlzQXdhaXRpbmdQZXJtaXNzaW9uLFxuICAgIH07XG59O1xuXG52YXIgTWVudVZpc3VhbFR5cGU7XG4oZnVuY3Rpb24gKE1lbnVWaXN1YWxUeXBlKSB7XG4gICAgTWVudVZpc3VhbFR5cGVbXCJQT1JUQUxcIl0gPSBcInBvcnRhbFwiO1xuICAgIE1lbnVWaXN1YWxUeXBlW1wiTUVOVVwiXSA9IFwibWVudVwiO1xufSkoTWVudVZpc3VhbFR5cGUgfHwgKE1lbnVWaXN1YWxUeXBlID0ge30pKTtcbi8qKlxuICogVXNlZCB0byBwcm92aWRlIHV0aWxpdHkgQVBJcyB0byB0aGUgY29tcG9uZW50cyByZW5kZXJlZCBpbnNpZGUgdGhlIHBvcnRhbC5cbiAqL1xuY29uc3QgTWVudUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcbi8qKlxuICogQWNjZXNzIHRvIHRoZSBjbG9zZXMgTWVudUNvbnRleHQuXG4gKi9cbmNvbnN0IHVzZU1lbnVDb250ZXh0ID0gKCkgPT4ge1xuICAgIHJldHVybiB1c2VDb250ZXh0KE1lbnVDb250ZXh0KTtcbn07XG5jb25zdCBNZW51UG9ydGFsID0gKHsgY2hpbGRyZW4sIHJlZnMsIH0pID0+IHtcbiAgICBjb25zdCBwb3J0YWxJZCA9IHVzZU1lbW8oKCkgPT4gYHN0ci12aWRlby1wb3J0YWwtJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOSl9YCwgW10pO1xuICAgIHJldHVybiAoanN4cyhGcmFnbWVudCwgeyBjaGlsZHJlbjogW2pzeChcImRpdlwiLCB7IGlkOiBwb3J0YWxJZCwgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcG9ydGFsXCIgfSksIGpzeChGbG9hdGluZ092ZXJsYXksIHsgY2hpbGRyZW46IGpzeChGbG9hdGluZ1BvcnRhbCwgeyBpZDogcG9ydGFsSWQsIGNoaWxkcmVuOiBqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wb3J0YWwtY29udGVudFwiLCByZWY6IHJlZnMuc2V0RmxvYXRpbmcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9KSB9KSB9KV0gfSkpO1xufTtcbmNvbnN0IE1lbnVUb2dnbGUgPSAoeyBUb2dnbGVCdXR0b24sIHBsYWNlbWVudCA9ICd0b3Atc3RhcnQnLCBzdHJhdGVneSA9ICdhYnNvbHV0ZScsIG9mZnNldCwgdmlzdWFsVHlwZSA9IE1lbnVWaXN1YWxUeXBlLk1FTlUsIGNoaWxkcmVuLCBvblRvZ2dsZSwgfSkgPT4ge1xuICAgIGNvbnN0IFttZW51U2hvd24sIHNldE1lbnVTaG93bl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgdG9nZ2xlSGFuZGxlciA9IHVzZVJlZihvblRvZ2dsZSk7XG4gICAgdG9nZ2xlSGFuZGxlci5jdXJyZW50ID0gb25Ub2dnbGU7XG4gICAgY29uc3QgeyBmbG9hdGluZywgZG9tUmVmZXJlbmNlLCByZWZzLCB4LCB5IH0gPSB1c2VGbG9hdGluZ1VJUHJlc2V0KHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBzdHJhdGVneSxcbiAgICAgICAgb2Zmc2V0LFxuICAgIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhhbmRsZUNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWZsb2F0aW5nICYmIGRvbVJlZmVyZW5jZT8uY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIHNldE1lbnVTaG93bih0cnVlKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVIYW5kbGVyLmN1cnJlbnQ/Lih0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZsb2F0aW5nICYmICFmbG9hdGluZz8uY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIHNldE1lbnVTaG93bihmYWxzZSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlSGFuZGxlci5jdXJyZW50Py4oZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5ICYmIC8vIGtleSBjYW4gYmUgdW5kZWZpbmVkIGluIHNvbWUgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICBldmVudC5rZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2VzY2FwZScgJiZcbiAgICAgICAgICAgICAgICAhZXZlbnQuYWx0S2V5ICYmXG4gICAgICAgICAgICAgICAgIWV2ZW50LmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICBzZXRNZW51U2hvd24oZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZUhhbmRsZXIuY3VycmVudD8uKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQ/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2ssIHsgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgICAgICAgZG9jdW1lbnQ/LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50Py5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gICAgICAgICAgICBkb2N1bWVudD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pO1xuICAgICAgICB9O1xuICAgIH0sIFtmbG9hdGluZywgZG9tUmVmZXJlbmNlXSk7XG4gICAgcmV0dXJuIChqc3hzKEZyYWdtZW50LCB7IGNoaWxkcmVuOiBbbWVudVNob3duICYmIChqc3goTWVudUNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHsgY2xvc2U6ICgpID0+IHNldE1lbnVTaG93bihmYWxzZSkgfSwgY2hpbGRyZW46IHZpc3VhbFR5cGUgPT09IE1lbnVWaXN1YWxUeXBlLlBPUlRBTCA/IChqc3goTWVudVBvcnRhbCwgeyByZWZzOiByZWZzLCBjaGlsZHJlbjogY2hpbGRyZW4gfSkpIDogdmlzdWFsVHlwZSA9PT0gTWVudVZpc3VhbFR5cGUuTUVOVSA/IChqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19tZW51LWNvbnRhaW5lclwiLCByZWY6IHJlZnMuc2V0RmxvYXRpbmcsIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogc3RyYXRlZ3ksXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHkgPz8gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHggPz8gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICB9LCByb2xlOiBcIm1lbnVcIiwgY2hpbGRyZW46IGNoaWxkcmVuIH0pKSA6IG51bGwgfSkpLCBqc3goVG9nZ2xlQnV0dG9uLCB7IG1lbnVTaG93bjogbWVudVNob3duLCByZWY6IHJlZnMuc2V0UmVmZXJlbmNlIH0pXSB9KSk7XG59O1xuXG5jb25zdCBHZW5lcmljTWVudSA9ICh7IGNoaWxkcmVuLCBvbkl0ZW1DbGljaywgfSkgPT4ge1xuICAgIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKTtcbiAgICByZXR1cm4gKGpzeChcInVsXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZ2VuZXJpYy1tZW51XCIsIHJlZjogcmVmLCBvbkNsaWNrOiAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG9uSXRlbUNsaWNrICYmXG4gICAgICAgICAgICAgICAgZS50YXJnZXQgIT09IHJlZi5jdXJyZW50ICYmXG4gICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQ/LmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIG9uSXRlbUNsaWNrKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xufTtcbmNvbnN0IEdlbmVyaWNNZW51QnV0dG9uSXRlbSA9ICh7IGNoaWxkcmVuLCAuLi5yZXN0IH0pID0+IHtcbiAgICByZXR1cm4gKGpzeChcImxpXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZ2VuZXJpYy1tZW51LS1pdGVtXCIsIGNoaWxkcmVuOiBqc3goXCJidXR0b25cIiwgeyAuLi5yZXN0LCBjaGlsZHJlbjogY2hpbGRyZW4gfSkgfSkpO1xufTtcblxuY29uc3QgSWNvbiA9ICh7IGNsYXNzTmFtZSwgaWNvbiB9KSA9PiAoanN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19pY29uJywgaWNvbiAmJiBgc3RyLXZpZGVvX19pY29uLS0ke2ljb259YCwgY2xhc3NOYW1lKSB9KSk7XG5cbmNvbnN0IEljb25CdXR0b24gPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIEljb25CdXR0b24ocHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHsgaWNvbiwgZW5hYmxlZCwgdmFyaWFudCwgb25DbGljaywgY2xhc3NOYW1lLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgICByZXR1cm4gKGpzeChcImJ1dHRvblwiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19jYWxsLWNvbnRyb2xzX19idXR0b24nLCBjbGFzc05hbWUsIHtcbiAgICAgICAgICAgIFtgc3RyLXZpZGVvX19jYWxsLWNvbnRyb2xzX19idXR0b24tLXZhcmlhbnQtJHt2YXJpYW50fWBdOiB2YXJpYW50LFxuICAgICAgICAgICAgJ3N0ci12aWRlb19fY2FsbC1jb250cm9sc19fYnV0dG9uLS1lbmFibGVkJzogZW5hYmxlZCxcbiAgICAgICAgfSksIG9uQ2xpY2s6IChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBvbkNsaWNrPy4oZSk7XG4gICAgICAgIH0sIHJlZjogcmVmLCAuLi5yZXN0LCBjaGlsZHJlbjoganN4KEljb24sIHsgaWNvbjogaWNvbiB9KSB9KSk7XG59KTtcblxuY29uc3QgaXNDb21wb25lbnRUeXBlID0gKGVsZW1lbnRPckNvbXBvbmVudCkgPT4ge1xuICAgIHJldHVybiBlbGVtZW50T3JDb21wb25lbnQgPT09IG51bGxcbiAgICAgICAgPyBmYWxzZVxuICAgICAgICA6ICFpc1ZhbGlkRWxlbWVudChlbGVtZW50T3JDb21wb25lbnQpO1xufTtcblxuY29uc3QgY2h1bmsgPSAoYXJyYXksIHNpemUpID0+IHtcbiAgICBjb25zdCBjaHVua0NvdW50ID0gTWF0aC5jZWlsKGFycmF5Lmxlbmd0aCAvIHNpemUpO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHsgbGVuZ3RoOiBjaHVua0NvdW50IH0sIChfLCBpbmRleCkgPT4gYXJyYXkuc2xpY2Uoc2l6ZSAqIGluZGV4LCBzaXplICogaW5kZXggKyBzaXplKSk7XG59O1xuXG5jb25zdCBhcHBseUVsZW1lbnRUb1JlZiA9IChyZWYsIGVsZW1lbnQpID0+IHtcbiAgICBpZiAoIXJlZilcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gcmVmKGVsZW1lbnQpO1xuICAgIHJlZi5jdXJyZW50ID0gZWxlbWVudDtcbn07XG5cbmNvbnN0IENvbXBvc2l0ZUJ1dHRvbiA9IGZvcndhcmRSZWYoZnVuY3Rpb24gQ29tcG9zaXRlQnV0dG9uKHsgY2FwdGlvbiwgY2hpbGRyZW4sIGNsYXNzTmFtZSwgYWN0aXZlLCBNZW51LCBtZW51UGxhY2VtZW50LCBtZW51T2Zmc2V0LCB0aXRsZSwgVG9nZ2xlTWVudUJ1dHRvbiA9IERlZmF1bHRUb2dnbGVNZW51QnV0dG9uLCB2YXJpYW50LCBvbkNsaWNrLCBvbk1lbnVUb2dnbGUsIC4uLnJlc3RCdXR0b25Qcm9wcyB9LCByZWYpIHtcbiAgICByZXR1cm4gKGpzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fY29tcG9zaXRlLWJ1dHRvbicsIGNsYXNzTmFtZSwge1xuICAgICAgICAgICAgJ3N0ci12aWRlb19fY29tcG9zaXRlLWJ1dHRvbi0tY2FwdGlvbic6IGNhcHRpb24sXG4gICAgICAgICAgICAnc3RyLXZpZGVvX19jb21wb3NpdGUtYnV0dG9uLS1tZW51JzogTWVudSxcbiAgICAgICAgfSksIHRpdGxlOiB0aXRsZSwgcmVmOiByZWYsIGNoaWxkcmVuOiBbanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19jb21wb3NpdGUtYnV0dG9uX19idXR0b24tZ3JvdXAnLCB7XG4gICAgICAgICAgICAgICAgICAgICdzdHItdmlkZW9fX2NvbXBvc2l0ZS1idXR0b25fX2J1dHRvbi1ncm91cC0tYWN0aXZlJzogYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAnc3RyLXZpZGVvX19jb21wb3NpdGUtYnV0dG9uX19idXR0b24tZ3JvdXAtLWFjdGl2ZS1wcmltYXJ5JzogYWN0aXZlICYmIHZhcmlhbnQgPT09ICdwcmltYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgJ3N0ci12aWRlb19fY29tcG9zaXRlLWJ1dHRvbl9fYnV0dG9uLWdyb3VwLS1hY3RpdmUtc2Vjb25kYXJ5JzogYWN0aXZlICYmIHZhcmlhbnQgPT09ICdzZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgIH0pLCBjaGlsZHJlbjogW2pzeChcImJ1dHRvblwiLCB7IHR5cGU6IFwiYnV0dG9uXCIsIGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NvbXBvc2l0ZS1idXR0b25fX2J1dHRvblwiLCBvbkNsaWNrOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPy4oZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAuLi5yZXN0QnV0dG9uUHJvcHMsIGNoaWxkcmVuOiBjaGlsZHJlbiB9KSwgTWVudSAmJiAoanN4KE1lbnVUb2dnbGUsIHsgb2Zmc2V0OiBtZW51T2Zmc2V0LCBwbGFjZW1lbnQ6IG1lbnVQbGFjZW1lbnQsIFRvZ2dsZUJ1dHRvbjogVG9nZ2xlTWVudUJ1dHRvbiwgb25Ub2dnbGU6IG9uTWVudVRvZ2dsZSwgY2hpbGRyZW46IGlzQ29tcG9uZW50VHlwZShNZW51KSA/IGpzeChNZW51LCB7fSkgOiBNZW51IH0pKV0gfSksIGNhcHRpb24gJiYgKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NvbXBvc2l0ZS1idXR0b25fX2NhcHRpb25cIiwgY2hpbGRyZW46IGNhcHRpb24gfSkpXSB9KSk7XG59KTtcbmNvbnN0IERlZmF1bHRUb2dnbGVNZW51QnV0dG9uID0gZm9yd2FyZFJlZihmdW5jdGlvbiBEZWZhdWx0VG9nZ2xlTWVudUJ1dHRvbih7IG1lbnVTaG93biB9LCByZWYpIHtcbiAgICByZXR1cm4gKGpzeChJY29uQnV0dG9uLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19tZW51LXRvZ2dsZS1idXR0b24nLCB7XG4gICAgICAgICAgICAnc3RyLXZpZGVvX19tZW51LXRvZ2dsZS1idXR0b24tLWFjdGl2ZSc6IG1lbnVTaG93bixcbiAgICAgICAgfSksIGljb246IG1lbnVTaG93biA/ICdjYXJldC1kb3duJyA6ICdjYXJldC11cCcsIHJlZjogcmVmIH0pKTtcbn0pO1xuXG5jb25zdCBUZXh0QnV0dG9uID0gKHsgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xuICAgIHJldHVybiAoanN4KFwiYnV0dG9uXCIsIHsgLi4ucmVzdCwgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fdGV4dC1idXR0b25cIiwgY2hpbGRyZW46IGNoaWxkcmVuIH0pKTtcbn07XG5cbmNvbnN0IEFjY2VwdENhbGxCdXR0b24gPSAoeyBkaXNhYmxlZCwgb25BY2NlcHQsIG9uQ2xpY2ssIH0pID0+IHtcbiAgICBjb25zdCBjYWxsID0gdXNlQ2FsbCgpO1xuICAgIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKGUpID0+IHtcbiAgICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgICAgIG9uQ2xpY2soZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2FsbCkge1xuICAgICAgICAgICAgYXdhaXQgY2FsbC5qb2luKCk7XG4gICAgICAgICAgICBvbkFjY2VwdD8uKCk7XG4gICAgICAgIH1cbiAgICB9LCBbb25DbGljaywgb25BY2NlcHQsIGNhbGxdKTtcbiAgICByZXR1cm4gKGpzeChJY29uQnV0dG9uLCB7IGRpc2FibGVkOiBkaXNhYmxlZCwgaWNvbjogXCJjYWxsLWFjY2VwdFwiLCB2YXJpYW50OiBcInN1Y2Nlc3NcIiwgXCJkYXRhLXRlc3RpZFwiOiBcImFjY2VwdC1jYWxsLWJ1dHRvblwiLCBvbkNsaWNrOiBoYW5kbGVDbGljayB9KSk7XG59O1xuXG5jb25zdCBOb3RpZmljYXRpb24gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGlzVmlzaWJsZSwgbWVzc2FnZSwgY2hpbGRyZW4sIHZpc2liaWxpdHlUaW1lb3V0LCByZXNldElzVmlzaWJsZSwgcGxhY2VtZW50ID0gJ3RvcCcsIGljb25DbGFzc05hbWUgPSAnc3RyLXZpZGVvX19ub3RpZmljYXRpb25fX2ljb24nLCBjbG9zZSwgfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgcmVmcywgeCwgeSwgc3RyYXRlZ3kgfSA9IHVzZUZsb2F0aW5nVUlQcmVzZXQoe1xuICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghaXNWaXNpYmxlIHx8ICF2aXNpYmlsaXR5VGltZW91dCB8fCAhcmVzZXRJc1Zpc2libGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlc2V0SXNWaXNpYmxlKCk7XG4gICAgICAgIH0sIHZpc2liaWxpdHlUaW1lb3V0KTtcbiAgICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB9LCBbaXNWaXNpYmxlLCByZXNldElzVmlzaWJsZSwgdmlzaWJpbGl0eVRpbWVvdXRdKTtcbiAgICByZXR1cm4gKGpzeHMoXCJkaXZcIiwgeyByZWY6IHJlZnMuc2V0UmVmZXJlbmNlLCBjaGlsZHJlbjogW2lzVmlzaWJsZSAmJiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX25vdGlmaWNhdGlvblwiLCByZWY6IHJlZnMuc2V0RmxvYXRpbmcsIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBzdHJhdGVneSxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB5ID8/IDAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHggPz8gMCxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgfSwgY2hpbGRyZW46IFtpY29uQ2xhc3NOYW1lICYmIGpzeChcImlcIiwgeyBjbGFzc05hbWU6IGljb25DbGFzc05hbWUgfSksIGpzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19ub3RpZmljYXRpb25fX21lc3NhZ2VcIiwgY2hpbGRyZW46IG1lc3NhZ2UgfSksIGNsb3NlID8gKGpzeChcImlcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19pY29uIHN0ci12aWRlb19faWNvbi0tY2xvc2Ugc3RyLXZpZGVvX19ub3RpZmljYXRpb25fX2Nsb3NlXCIsIG9uQ2xpY2s6IGNsb3NlIH0pKSA6IG51bGxdIH0pKSwgY2hpbGRyZW5dIH0pKTtcbn07XG5cbmNvbnN0IFBlcm1pc3Npb25Ob3RpZmljYXRpb24gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHBlcm1pc3Npb24sIGlzQXdhaXRpbmdBcHByb3ZhbCwgbWVzc2FnZUFwcHJvdmVkLCBtZXNzYWdlQXdhaXRpbmdBcHByb3ZhbCwgbWVzc2FnZVJldm9rZWQsIHZpc2liaWxpdHlUaW1lb3V0ID0gMzUwMCwgY2hpbGRyZW4sIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IHVzZUhhc1Blcm1pc3Npb25zIH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IGhhc1Blcm1pc3Npb24gPSB1c2VIYXNQZXJtaXNzaW9ucyhwZXJtaXNzaW9uKTtcbiAgICBjb25zdCBwcmV2SGFzUGVybWlzc2lvbiA9IHVzZVJlZihoYXNQZXJtaXNzaW9uKTtcbiAgICBjb25zdCBbc2hvd05vdGlmaWNhdGlvbiwgc2V0U2hvd05vdGlmaWNhdGlvbl0gPSB1c2VTdGF0ZSgpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChoYXNQZXJtaXNzaW9uICYmICFwcmV2SGFzUGVybWlzc2lvbi5jdXJyZW50KSB7XG4gICAgICAgICAgICBzZXRTaG93Tm90aWZpY2F0aW9uKCdncmFudGVkJyk7XG4gICAgICAgICAgICBwcmV2SGFzUGVybWlzc2lvbi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaGFzUGVybWlzc2lvbiAmJiBwcmV2SGFzUGVybWlzc2lvbi5jdXJyZW50KSB7XG4gICAgICAgICAgICBzZXRTaG93Tm90aWZpY2F0aW9uKCdyZXZva2VkJyk7XG4gICAgICAgICAgICBwcmV2SGFzUGVybWlzc2lvbi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LCBbaGFzUGVybWlzc2lvbl0pO1xuICAgIGNvbnN0IHJlc2V0SXNWaXNpYmxlID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0U2hvd05vdGlmaWNhdGlvbih1bmRlZmluZWQpLCBbXSk7XG4gICAgaWYgKGlzQXdhaXRpbmdBcHByb3ZhbCkge1xuICAgICAgICByZXR1cm4gKGpzeChOb3RpZmljYXRpb24sIHsgaXNWaXNpYmxlOiBpc0F3YWl0aW5nQXBwcm92YWwgJiYgIWhhc1Blcm1pc3Npb24sIG1lc3NhZ2U6IG1lc3NhZ2VBd2FpdGluZ0FwcHJvdmFsLCBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xuICAgIH1cbiAgICByZXR1cm4gKGpzeChOb3RpZmljYXRpb24sIHsgaXNWaXNpYmxlOiAhIXNob3dOb3RpZmljYXRpb24sIHZpc2liaWxpdHlUaW1lb3V0OiB2aXNpYmlsaXR5VGltZW91dCwgcmVzZXRJc1Zpc2libGU6IHJlc2V0SXNWaXNpYmxlLCBtZXNzYWdlOiBzaG93Tm90aWZpY2F0aW9uID09PSAnZ3JhbnRlZCcgPyBtZXNzYWdlQXBwcm92ZWQgOiBtZXNzYWdlUmV2b2tlZCwgY2hpbGRyZW46IGNoaWxkcmVuIH0pKTtcbn07XG5cbmNvbnN0IFNwZWFraW5nV2hpbGVNdXRlZE5vdGlmaWNhdGlvbiA9ICh7IGNoaWxkcmVuLCB0ZXh0LCBwbGFjZW1lbnQsIH0pID0+IHtcbiAgICBjb25zdCB7IHVzZU1pY3JvcGhvbmVTdGF0ZSB9ID0gdXNlQ2FsbFN0YXRlSG9va3MoKTtcbiAgICBjb25zdCB7IGlzU3BlYWtpbmdXaGlsZU11dGVkIH0gPSB1c2VNaWNyb3Bob25lU3RhdGUoKTtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCBtZXNzYWdlID0gdGV4dCA/PyB0KCdZb3UgYXJlIG11dGVkLiBVbm11dGUgdG8gc3BlYWsuJyk7XG4gICAgcmV0dXJuIChqc3goTm90aWZpY2F0aW9uLCB7IG1lc3NhZ2U6IG1lc3NhZ2UsIGlzVmlzaWJsZTogaXNTcGVha2luZ1doaWxlTXV0ZWQsIHBsYWNlbWVudDogcGxhY2VtZW50IHx8ICd0b3Atc3RhcnQnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xufTtcblxuY29uc3QgUmVjb3JkaW5nSW5Qcm9ncmVzc05vdGlmaWNhdGlvbiA9ICh7IGNoaWxkcmVuLCB0ZXh0LCB9KSA9PiB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgeyBpc0NhbGxSZWNvcmRpbmdJblByb2dyZXNzIH0gPSB1c2VUb2dnbGVDYWxsUmVjb3JkaW5nKCk7XG4gICAgY29uc3QgW2lzVmlzaWJsZSwgc2V0VmlzaWJsZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgbWVzc2FnZSA9IHRleHQgPz8gdCgnUmVjb3JkaW5nIGluIHByb2dyZXNzLi4uJyk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGlzQ2FsbFJlY29yZGluZ0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0sIFtpc0NhbGxSZWNvcmRpbmdJblByb2dyZXNzXSk7XG4gICAgcmV0dXJuIChqc3goTm90aWZpY2F0aW9uLCB7IG1lc3NhZ2U6IG1lc3NhZ2UsIGljb25DbGFzc05hbWU6IFwic3RyLXZpZGVvX19pY29uIHN0ci12aWRlb19faWNvbi0tcmVjb3JkaW5nLW9uXCIsIGlzVmlzaWJsZTogaXNWaXNpYmxlLCBwbGFjZW1lbnQ6IFwidG9wLXN0YXJ0XCIsIGNsb3NlOiAoKSA9PiBzZXRWaXNpYmxlKGZhbHNlKSwgY2hpbGRyZW46IGNoaWxkcmVuIH0pKTtcbn07XG5cbmNvbnN0IExvYWRpbmdJbmRpY2F0b3IgPSAoeyBjbGFzc05hbWUsIHR5cGUgPSAnc3Bpbm5lcicsIHRleHQsIHRvb2x0aXAsIH0pID0+IHtcbiAgICByZXR1cm4gKGpzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fbG9hZGluZy1pbmRpY2F0b3InLCBjbGFzc05hbWUpLCB0aXRsZTogdG9vbHRpcCwgY2hpbGRyZW46IFtqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fbG9hZGluZy1pbmRpY2F0b3JfX2ljb24nLCB0eXBlKSB9KSwgdGV4dCAmJiBqc3goXCJwXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fbG9hZGluZy1pbmRpY2F0b3ItdGV4dFwiLCBjaGlsZHJlbjogdGV4dCB9KV0gfSkpO1xufTtcblxuY29uc3QgVG9vbHRpcCA9ICh7IGNoaWxkcmVuLCByZWZlcmVuY2VFbGVtZW50LCB0b29sdGlwQ2xhc3NOYW1lLCB0b29sdGlwUGxhY2VtZW50ID0gJ3RvcCcsIHZpc2libGUgPSBmYWxzZSwgfSkgPT4ge1xuICAgIGNvbnN0IGFycm93UmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IHsgcmVmcywgeCwgeSwgc3RyYXRlZ3ksIGNvbnRleHQgfSA9IHVzZUZsb2F0aW5nVUlQcmVzZXQoe1xuICAgICAgICBwbGFjZW1lbnQ6IHRvb2x0aXBQbGFjZW1lbnQsXG4gICAgICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgICAgICBtaWRkbGV3YXJlOiBbYXJyb3coeyBlbGVtZW50OiBhcnJvd1JlZiB9KV0sXG4gICAgfSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgcmVmcy5zZXRSZWZlcmVuY2UocmVmZXJlbmNlRWxlbWVudCk7XG4gICAgfSwgW3JlZmVyZW5jZUVsZW1lbnQsIHJlZnNdKTtcbiAgICBpZiAoIXZpc2libGUpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX190b29sdGlwJywgdG9vbHRpcENsYXNzTmFtZSksIHJlZjogcmVmcy5zZXRGbG9hdGluZywgc3R5bGU6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBzdHJhdGVneSxcbiAgICAgICAgICAgIHRvcDogeSA/PyAwLFxuICAgICAgICAgICAgbGVmdDogeCA/PyAwLFxuICAgICAgICB9LCBjaGlsZHJlbjogW2pzeChGbG9hdGluZ0Fycm93LCB7IHJlZjogYXJyb3dSZWYsIGNvbnRleHQ6IGNvbnRleHQsIGZpbGw6IFwidmFyKC0tc3RyLXZpZGVvX190b29sdGlwLS1iYWNrZ3JvdW5kLWNvbG9yKVwiIH0pLCBjaGlsZHJlbl0gfSkpO1xufTtcblxuY29uc3QgdXNlRW50ZXJMZWF2ZUhhbmRsZXJzID0gKHsgb25Nb3VzZUVudGVyLCBvbk1vdXNlTGVhdmUsIH0gPSB7fSkgPT4ge1xuICAgIGNvbnN0IFt0b29sdGlwVmlzaWJsZSwgc2V0VG9vbHRpcFZpc2libGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGhhbmRsZU1vdXNlRW50ZXIgPSB1c2VDYWxsYmFjaygoZSkgPT4ge1xuICAgICAgICBzZXRUb29sdGlwVmlzaWJsZSh0cnVlKTtcbiAgICAgICAgb25Nb3VzZUVudGVyPy4oZSk7XG4gICAgfSwgW29uTW91c2VFbnRlcl0pO1xuICAgIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VDYWxsYmFjaygoZSkgPT4ge1xuICAgICAgICBzZXRUb29sdGlwVmlzaWJsZShmYWxzZSk7XG4gICAgICAgIG9uTW91c2VMZWF2ZT8uKGUpO1xuICAgIH0sIFtvbk1vdXNlTGVhdmVdKTtcbiAgICByZXR1cm4geyBoYW5kbGVNb3VzZUVudGVyLCBoYW5kbGVNb3VzZUxlYXZlLCB0b29sdGlwVmlzaWJsZSB9O1xufTtcblxuLy8gdG9kbzogZHVwbGljYXRlIG9mIENhbGxQYXJ0aWNpcGFudExpc3QudHN4I01lZGlhSW5kaWNhdG9yIC0gcmVmYWN0b3IgdG8gYSBzaW5nbGUgY29tcG9uZW50XG5jb25zdCBXaXRoVG9vbHRpcCA9ICh7IHRpdGxlLCB0b29sdGlwQ2xhc3NOYW1lLCB0b29sdGlwUGxhY2VtZW50LCB0b29sdGlwRGlzYWJsZWQsIC4uLnByb3BzIH0pID0+IHtcbiAgICBjb25zdCB7IGhhbmRsZU1vdXNlRW50ZXIsIGhhbmRsZU1vdXNlTGVhdmUsIHRvb2x0aXBWaXNpYmxlIH0gPSB1c2VFbnRlckxlYXZlSGFuZGxlcnMoKTtcbiAgICBjb25zdCBbdG9vbHRpcEFuY2hvciwgc2V0VG9vbHRpcEFuY2hvcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgICBjb25zdCB0b29sdGlwQWN0dWFsbHlWaXNpYmxlID0gIXRvb2x0aXBEaXNhYmxlZCAmJiBCb29sZWFuKHRpdGxlKSAmJiB0b29sdGlwVmlzaWJsZTtcbiAgICByZXR1cm4gKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtqc3goVG9vbHRpcCwgeyByZWZlcmVuY2VFbGVtZW50OiB0b29sdGlwQW5jaG9yLCB2aXNpYmxlOiB0b29sdGlwQWN0dWFsbHlWaXNpYmxlLCB0b29sdGlwQ2xhc3NOYW1lOiB0b29sdGlwQ2xhc3NOYW1lLCB0b29sdGlwUGxhY2VtZW50OiB0b29sdGlwUGxhY2VtZW50LCBjaGlsZHJlbjogdGl0bGUgfHwgJycgfSksIGpzeChcImRpdlwiLCB7IHJlZjogc2V0VG9vbHRpcEFuY2hvciwgb25Nb3VzZUVudGVyOiBoYW5kbGVNb3VzZUVudGVyLCBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsIC4uLnByb3BzIH0pXSB9KSk7XG59O1xuXG5jb25zdCBSZWNvcmRFbmRDb25maXJtYXRpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgeyB0b2dnbGVDYWxsUmVjb3JkaW5nLCBpc0F3YWl0aW5nUmVzcG9uc2UgfSA9IHVzZVRvZ2dsZUNhbGxSZWNvcmRpbmcoKTtcbiAgICBjb25zdCB7IGNsb3NlIH0gPSB1c2VNZW51Q29udGV4dCgpO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2VuZC1yZWNvcmRpbmdfX2NvbmZpcm1hdGlvblwiLCBjaGlsZHJlbjogW2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19lbmQtcmVjb3JkaW5nX19oZWFkZXJcIiwgY2hpbGRyZW46IFtqc3goSWNvbiwgeyBpY29uOiBcInJlY29yZGluZy1vblwiIH0pLCBqc3goXCJoMlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2VuZC1yZWNvcmRpbmdfX2hlYWRpbmdcIiwgY2hpbGRyZW46IHQoJ0VuZCByZWNvcmRpbmcnKSB9KV0gfSksIGpzeChcInBcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19lbmQtcmVjb3JkaW5nX19kZXNjcmlwdGlvblwiLCBjaGlsZHJlbjogdCgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IGVuZCB0aGUgcmVjb3JkaW5nPycpIH0pLCBqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZW5kLXJlY29yZGluZ19fYWN0aW9uc1wiLCBjaGlsZHJlbjogW2pzeChDb21wb3NpdGVCdXR0b24sIHsgdmFyaWFudDogXCJzZWNvbmRhcnlcIiwgb25DbGljazogY2xvc2UsIGNoaWxkcmVuOiB0KCdDYW5jZWwnKSB9KSwganN4KENvbXBvc2l0ZUJ1dHRvbiwgeyB2YXJpYW50OiBcInByaW1hcnlcIiwgb25DbGljazogdG9nZ2xlQ2FsbFJlY29yZGluZywgY2hpbGRyZW46IGlzQXdhaXRpbmdSZXNwb25zZSA/IGpzeChMb2FkaW5nSW5kaWNhdG9yLCB7fSkgOiB0KCdFbmQgcmVjb3JkaW5nJykgfSldIH0pXSB9KSk7XG59O1xuY29uc3QgVG9nZ2xlRW5kUmVjb3JkaW5nTWVudUJ1dHRvbiA9IGZvcndhcmRSZWYoZnVuY3Rpb24gVG9nZ2xlRW5kUmVjb3JkaW5nTWVudUJ1dHRvbihwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIChqc3goQ29tcG9zaXRlQnV0dG9uLCB7IHJlZjogcmVmLCBhY3RpdmU6IHRydWUsIHZhcmlhbnQ6IFwic2Vjb25kYXJ5XCIsIFwiZGF0YS10ZXN0aWRcIjogXCJyZWNvcmRpbmctc3RvcC1idXR0b25cIiwgY2hpbGRyZW46IGpzeChJY29uLCB7IGljb246IFwicmVjb3JkaW5nLW9mZlwiIH0pIH0pKTtcbn0pO1xuY29uc3QgUmVjb3JkQ2FsbENvbmZpcm1hdGlvbkJ1dHRvbiA9ICh7IGNhcHRpb24sIH0pID0+IHtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCB7IHRvZ2dsZUNhbGxSZWNvcmRpbmcsIGlzQXdhaXRpbmdSZXNwb25zZSwgaXNDYWxsUmVjb3JkaW5nSW5Qcm9ncmVzcyB9ID0gdXNlVG9nZ2xlQ2FsbFJlY29yZGluZygpO1xuICAgIGlmIChpc0NhbGxSZWNvcmRpbmdJblByb2dyZXNzKSB7XG4gICAgICAgIHJldHVybiAoanN4KFJlc3RyaWN0ZWQsIHsgcmVxdWlyZWRHcmFudHM6IFtcbiAgICAgICAgICAgICAgICBPd25DYXBhYmlsaXR5LlNUQVJUX1JFQ09SRF9DQUxMLFxuICAgICAgICAgICAgICAgIE93bkNhcGFiaWxpdHkuU1RPUF9SRUNPUkRfQ0FMTCxcbiAgICAgICAgICAgIF0sIGNoaWxkcmVuOiBqc3goTWVudVRvZ2dsZSwgeyBUb2dnbGVCdXR0b246IFRvZ2dsZUVuZFJlY29yZGluZ01lbnVCdXR0b24sIHZpc3VhbFR5cGU6IE1lbnVWaXN1YWxUeXBlLlBPUlRBTCwgY2hpbGRyZW46IGpzeChSZWNvcmRFbmRDb25maXJtYXRpb24sIHt9KSB9KSB9KSk7XG4gICAgfVxuICAgIGNvbnN0IHRpdGxlID0gaXNBd2FpdGluZ1Jlc3BvbnNlXG4gICAgICAgID8gdCgnV2FpdGluZyBmb3IgcmVjb3JkaW5nIHRvIHN0YXJ0Li4uJylcbiAgICAgICAgOiBjYXB0aW9uID8/IHQoJ1JlY29yZCBjYWxsJyk7XG4gICAgcmV0dXJuIChqc3goUmVzdHJpY3RlZCwgeyByZXF1aXJlZEdyYW50czogW1xuICAgICAgICAgICAgT3duQ2FwYWJpbGl0eS5TVEFSVF9SRUNPUkRfQ0FMTCxcbiAgICAgICAgICAgIE93bkNhcGFiaWxpdHkuU1RPUF9SRUNPUkRfQ0FMTCxcbiAgICAgICAgXSwgY2hpbGRyZW46IGpzeChXaXRoVG9vbHRpcCwgeyB0aXRsZTogdGl0bGUsIGNoaWxkcmVuOiBqc3goQ29tcG9zaXRlQnV0dG9uLCB7IGFjdGl2ZTogaXNDYWxsUmVjb3JkaW5nSW5Qcm9ncmVzcywgY2FwdGlvbjogY2FwdGlvbiwgdmFyaWFudDogXCJzZWNvbmRhcnlcIiwgXCJkYXRhLXRlc3RpZFwiOiBcInJlY29yZGluZy1zdGFydC1idXR0b25cIiwgb25DbGljazogaXNBd2FpdGluZ1Jlc3BvbnNlID8gdW5kZWZpbmVkIDogdG9nZ2xlQ2FsbFJlY29yZGluZywgY2hpbGRyZW46IGlzQXdhaXRpbmdSZXNwb25zZSA/IChqc3goTG9hZGluZ0luZGljYXRvciwge30pKSA6IChqc3goSWNvbiwgeyBpY29uOiBcInJlY29yZGluZy1vZmZcIiB9KSkgfSkgfSkgfSkpO1xufTtcbmNvbnN0IFJlY29yZENhbGxCdXR0b24gPSAoeyBjYXB0aW9uIH0pID0+IHtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCB7IHRvZ2dsZUNhbGxSZWNvcmRpbmcsIGlzQXdhaXRpbmdSZXNwb25zZSwgaXNDYWxsUmVjb3JkaW5nSW5Qcm9ncmVzcyB9ID0gdXNlVG9nZ2xlQ2FsbFJlY29yZGluZygpO1xuICAgIGxldCB0aXRsZSA9IGNhcHRpb24gPz8gdCgnUmVjb3JkIGNhbGwnKTtcbiAgICBpZiAoaXNBd2FpdGluZ1Jlc3BvbnNlKSB7XG4gICAgICAgIHRpdGxlID0gaXNDYWxsUmVjb3JkaW5nSW5Qcm9ncmVzc1xuICAgICAgICAgICAgPyB0KCdXYWl0aW5nIGZvciByZWNvcmRpbmcgdG8gc3RvcC4uLicpXG4gICAgICAgICAgICA6IHQoJ1dhaXRpbmcgZm9yIHJlY29yZGluZyB0byBzdGFydC4uLicpO1xuICAgIH1cbiAgICByZXR1cm4gKGpzeChSZXN0cmljdGVkLCB7IHJlcXVpcmVkR3JhbnRzOiBbXG4gICAgICAgICAgICBPd25DYXBhYmlsaXR5LlNUQVJUX1JFQ09SRF9DQUxMLFxuICAgICAgICAgICAgT3duQ2FwYWJpbGl0eS5TVE9QX1JFQ09SRF9DQUxMLFxuICAgICAgICBdLCBjaGlsZHJlbjoganN4KENvbXBvc2l0ZUJ1dHRvbiwgeyBhY3RpdmU6IGlzQ2FsbFJlY29yZGluZ0luUHJvZ3Jlc3MsIGNhcHRpb246IGNhcHRpb24sIHZhcmlhbnQ6IFwic2Vjb25kYXJ5XCIsIFwiZGF0YS10ZXN0aWRcIjogaXNDYWxsUmVjb3JkaW5nSW5Qcm9ncmVzc1xuICAgICAgICAgICAgICAgID8gJ3JlY29yZGluZy1zdG9wLWJ1dHRvbidcbiAgICAgICAgICAgICAgICA6ICdyZWNvcmRpbmctc3RhcnQtYnV0dG9uJywgdGl0bGU6IHRpdGxlLCBvbkNsaWNrOiBpc0F3YWl0aW5nUmVzcG9uc2UgPyB1bmRlZmluZWQgOiB0b2dnbGVDYWxsUmVjb3JkaW5nLCBjaGlsZHJlbjogaXNBd2FpdGluZ1Jlc3BvbnNlID8gKGpzeChMb2FkaW5nSW5kaWNhdG9yLCB7fSkpIDogKGpzeChJY29uLCB7IGljb246IGlzQ2FsbFJlY29yZGluZ0luUHJvZ3Jlc3MgPyAncmVjb3JkaW5nLW9uJyA6ICdyZWNvcmRpbmctb2ZmJyB9KSkgfSkgfSkpO1xufTtcblxuY29uc3QgZGVmYXVsdEVtb2ppUmVhY3Rpb25NYXAgPSB7XG4gICAgJzpsaWtlOic6ICfwn5GNJyxcbiAgICAnOnJhaXNlLWhhbmQ6JzogJ+KciycsXG4gICAgJzpmaXJld29ya3M6JzogJ/CfjoknLFxuICAgICc6ZGlzbGlrZTonOiAn8J+RjicsXG4gICAgJzpoZWFydDonOiAn4p2k77iPJyxcbiAgICAnOnNtaWxlOic6ICfwn5iAJyxcbn07XG5jb25zdCBSZWFjdGlvbiA9ICh7IHBhcnRpY2lwYW50OiB7IHJlYWN0aW9uLCBzZXNzaW9uSWQgfSwgaGlkZUFmdGVyVGltZW91dEluTXMgPSA1NTAwLCBlbW9qaVJlYWN0aW9uTWFwID0gZGVmYXVsdEVtb2ppUmVhY3Rpb25NYXAsIH0pID0+IHtcbiAgICBjb25zdCBjYWxsID0gdXNlQ2FsbCgpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghY2FsbCB8fCAhcmVhY3Rpb24pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY2FsbC5yZXNldFJlYWN0aW9uKHNlc3Npb25JZCk7XG4gICAgICAgIH0sIGhpZGVBZnRlclRpbWVvdXRJbk1zKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB9O1xuICAgIH0sIFtjYWxsLCBoaWRlQWZ0ZXJUaW1lb3V0SW5NcywgcmVhY3Rpb24sIHNlc3Npb25JZF0pO1xuICAgIGlmICghcmVhY3Rpb24pXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHsgZW1vamlfY29kZTogZW1vamlDb2RlIH0gPSByZWFjdGlvbjtcbiAgICByZXR1cm4gKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3JlYWN0aW9uXCIsIGNoaWxkcmVuOiBqc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcmVhY3Rpb25fX2Vtb2ppXCIsIGNoaWxkcmVuOiBlbW9qaUNvZGUgJiYgZW1vamlSZWFjdGlvbk1hcFtlbW9qaUNvZGVdIH0pIH0pKTtcbn07XG5cbmNvbnN0IGRlZmF1bHRSZWFjdGlvbnMgPSBbXG4gICAge1xuICAgICAgICB0eXBlOiAncmVhY3Rpb24nLFxuICAgICAgICBlbW9qaV9jb2RlOiAnOmxpa2U6JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgLy8gVE9ETyBPTDogdXNlIGBwcm9tcHRgIHR5cGU/XG4gICAgICAgIHR5cGU6ICdyYWlzZWQtaGFuZCcsXG4gICAgICAgIGVtb2ppX2NvZGU6ICc6cmFpc2UtaGFuZDonLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAncmVhY3Rpb24nLFxuICAgICAgICBlbW9qaV9jb2RlOiAnOmZpcmV3b3JrczonLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAncmVhY3Rpb24nLFxuICAgICAgICBlbW9qaV9jb2RlOiAnOmRpc2xpa2U6JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ3JlYWN0aW9uJyxcbiAgICAgICAgZW1vamlfY29kZTogJzpoZWFydDonLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAncmVhY3Rpb24nLFxuICAgICAgICBlbW9qaV9jb2RlOiAnOnNtaWxlOicsXG4gICAgfSxcbl07XG5jb25zdCBSZWFjdGlvbnNCdXR0b24gPSAoeyByZWFjdGlvbnMgPSBkZWZhdWx0UmVhY3Rpb25zLCB9KSA9PiB7XG4gICAgcmV0dXJuIChqc3goUmVzdHJpY3RlZCwgeyByZXF1aXJlZEdyYW50czogW093bkNhcGFiaWxpdHkuQ1JFQVRFX1JFQUNUSU9OXSwgY2hpbGRyZW46IGpzeChNZW51VG9nZ2xlLCB7IHBsYWNlbWVudDogXCJ0b3BcIiwgVG9nZ2xlQnV0dG9uOiBUb2dnbGVSZWFjdGlvbnNNZW51QnV0dG9uLCB2aXN1YWxUeXBlOiBNZW51VmlzdWFsVHlwZS5NRU5VLCBjaGlsZHJlbjoganN4KERlZmF1bHRSZWFjdGlvbnNNZW51LCB7IHJlYWN0aW9uczogcmVhY3Rpb25zIH0pIH0pIH0pKTtcbn07XG5jb25zdCBUb2dnbGVSZWFjdGlvbnNNZW51QnV0dG9uID0gZm9yd2FyZFJlZihmdW5jdGlvbiBUb2dnbGVSZWFjdGlvbnNNZW51QnV0dG9uKHsgbWVudVNob3duIH0sIHJlZikge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIHJldHVybiAoanN4KFdpdGhUb29sdGlwLCB7IHRpdGxlOiB0KCdSZWFjdGlvbnMnKSwgdG9vbHRpcERpc2FibGVkOiBtZW51U2hvd24sIGNoaWxkcmVuOiBqc3goQ29tcG9zaXRlQnV0dG9uLCB7IHJlZjogcmVmLCBhY3RpdmU6IG1lbnVTaG93biwgdmFyaWFudDogXCJwcmltYXJ5XCIsIGNoaWxkcmVuOiBqc3goSWNvbiwgeyBpY29uOiBcInJlYWN0aW9uc1wiIH0pIH0pIH0pKTtcbn0pO1xuY29uc3QgRGVmYXVsdFJlYWN0aW9uc01lbnUgPSAoeyByZWFjdGlvbnMsIGxheW91dCA9ICdob3Jpem9udGFsJywgfSkgPT4ge1xuICAgIGNvbnN0IGNhbGwgPSB1c2VDYWxsKCk7XG4gICAgY29uc3QgeyBjbG9zZSB9ID0gdXNlTWVudUNvbnRleHQoKTtcbiAgICByZXR1cm4gKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19yZWFjdGlvbnMtbWVudScsIHtcbiAgICAgICAgICAgICdzdHItdmlkZW9fX3JlYWN0aW9ucy1tZW51LS1ob3Jpem9udGFsJzogbGF5b3V0ID09PSAnaG9yaXpvbnRhbCcsXG4gICAgICAgICAgICAnc3RyLXZpZGVvX19yZWFjdGlvbnMtbWVudS0tdmVydGljYWwnOiBsYXlvdXQgPT09ICd2ZXJ0aWNhbCcsXG4gICAgICAgIH0pLCBjaGlsZHJlbjogcmVhY3Rpb25zLm1hcCgocmVhY3Rpb24pID0+IChqc3goXCJidXR0b25cIiwgeyB0eXBlOiBcImJ1dHRvblwiLCBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19yZWFjdGlvbnMtbWVudV9fYnV0dG9uXCIsIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsPy5zZW5kUmVhY3Rpb24ocmVhY3Rpb24pO1xuICAgICAgICAgICAgICAgIGNsb3NlPy4oKTtcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuOiByZWFjdGlvbi5lbW9qaV9jb2RlICYmIGRlZmF1bHRFbW9qaVJlYWN0aW9uTWFwW3JlYWN0aW9uLmVtb2ppX2NvZGVdIH0sIHJlYWN0aW9uLmVtb2ppX2NvZGUpKSkgfSkpO1xufTtcblxuLyoqXG4gKiBXcmFwcyBhbiBldmVudCBoYW5kbGVyLCBzaWxlbmNpbmcgYW5kIGxvZ2dpbmcgZXhjZXB0aW9ucyAoZXhjbHVkaW5nIHRoZSBOb3RBbGxvd2VkRXJyb3JcbiAqIERPTUV4Y2VwdGlvbiwgd2hpY2ggaXMgYSBub3JtYWwgc2l0dWF0aW9uIGhhbmRsZWQgYnkgdGhlIFNESylcbiAqXG4gKiBAcGFyYW0gcHJvcHMgY29tcG9uZW50IHByb3BzLCBpbmNsdWRpbmcgdGhlIG9uRXJyb3IgY2FsbGJhY2tcbiAqIEBwYXJhbSBoYW5kbGVyIGV2ZW50IGhhbmRsZXIgdG8gd3JhcFxuICovXG5jb25zdCBjcmVhdGVDYWxsQ29udHJvbEhhbmRsZXIgPSAocHJvcHMsIGhhbmRsZXIpID0+IHtcbiAgICBjb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoWydyZWFjdC1zZGsnXSk7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChwcm9wcy5vbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMub25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc05vdEFsbG93ZWRFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIoJ2Vycm9yJywgJ0NhbGwgY29udHJvbCBoYW5kbGVyIGZhaWxlZCcsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59O1xuZnVuY3Rpb24gaXNOb3RBbGxvd2VkRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBET01FeGNlcHRpb24gJiYgZXJyb3IubmFtZSA9PT0gJ05vdEFsbG93ZWRFcnJvcic7XG59XG5cbmNvbnN0IFNjcmVlblNoYXJlQnV0dG9uID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgeyBjYXB0aW9uIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IHVzZUhhc09uZ29pbmdTY3JlZW5TaGFyZSwgdXNlU2NyZWVuU2hhcmVTdGF0ZSwgdXNlQ2FsbFNldHRpbmdzIH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IGlzU29tZW9uZVNjcmVlblNoYXJpbmcgPSB1c2VIYXNPbmdvaW5nU2NyZWVuU2hhcmUoKTtcbiAgICBjb25zdCB7IGhhc1Blcm1pc3Npb24sIHJlcXVlc3RQZXJtaXNzaW9uLCBpc0F3YWl0aW5nUGVybWlzc2lvbiB9ID0gdXNlUmVxdWVzdFBlcm1pc3Npb24oT3duQ2FwYWJpbGl0eS5TQ1JFRU5TSEFSRSk7XG4gICAgY29uc3QgY2FsbFNldHRpbmdzID0gdXNlQ2FsbFNldHRpbmdzKCk7XG4gICAgY29uc3QgaXNTY3JlZW5TaGFyaW5nQWxsb3dlZCA9IGNhbGxTZXR0aW5ncz8uc2NyZWVuc2hhcmluZy5lbmFibGVkO1xuICAgIGNvbnN0IHsgc2NyZWVuU2hhcmUsIG9wdGltaXN0aWNJc011dGUgfSA9IHVzZVNjcmVlblNoYXJlU3RhdGUoKTtcbiAgICBjb25zdCBhbUlTY3JlZW5TaGFyaW5nID0gIW9wdGltaXN0aWNJc011dGU7XG4gICAgY29uc3QgZGlzYWJsZVNjcmVlblNoYXJlQnV0dG9uID0gIWFtSVNjcmVlblNoYXJpbmcgJiZcbiAgICAgICAgKGlzU29tZW9uZVNjcmVlblNoYXJpbmcgfHwgaXNTY3JlZW5TaGFyaW5nQWxsb3dlZCA9PT0gZmFsc2UpO1xuICAgIGNvbnN0IGhhbmRsZUNsaWNrID0gY3JlYXRlQ2FsbENvbnRyb2xIYW5kbGVyKHByb3BzLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICghaGFzUGVybWlzc2lvbikge1xuICAgICAgICAgICAgYXdhaXQgcmVxdWVzdFBlcm1pc3Npb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHNjcmVlblNoYXJlLnRvZ2dsZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIChqc3goUmVzdHJpY3RlZCwgeyByZXF1aXJlZEdyYW50czogW093bkNhcGFiaWxpdHkuU0NSRUVOU0hBUkVdLCBjaGlsZHJlbjoganN4KFBlcm1pc3Npb25Ob3RpZmljYXRpb24sIHsgcGVybWlzc2lvbjogT3duQ2FwYWJpbGl0eS5TQ1JFRU5TSEFSRSwgaXNBd2FpdGluZ0FwcHJvdmFsOiBpc0F3YWl0aW5nUGVybWlzc2lvbiwgbWVzc2FnZUFwcHJvdmVkOiB0KCdZb3UgY2FuIG5vdyBzaGFyZSB5b3VyIHNjcmVlbi4nKSwgbWVzc2FnZUF3YWl0aW5nQXBwcm92YWw6IHQoJ0F3YWl0aW5nIGZvciBhbiBhcHByb3ZhbCB0byBzaGFyZSBzY3JlZW4uJyksIG1lc3NhZ2VSZXZva2VkOiB0KCdZb3UgY2FuIG5vIGxvbmdlciBzaGFyZSB5b3VyIHNjcmVlbi4nKSwgY2hpbGRyZW46IGpzeChXaXRoVG9vbHRpcCwgeyB0aXRsZTogY2FwdGlvbiA/PyB0KCdTaGFyZSBzY3JlZW4nKSwgY2hpbGRyZW46IGpzeChDb21wb3NpdGVCdXR0b24sIHsgYWN0aXZlOiBpc1NvbWVvbmVTY3JlZW5TaGFyaW5nIHx8IGFtSVNjcmVlblNoYXJpbmcsIGNhcHRpb246IGNhcHRpb24sIHZhcmlhbnQ6IFwicHJpbWFyeVwiLCBcImRhdGEtdGVzdGlkXCI6IGlzU29tZW9uZVNjcmVlblNoYXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3NjcmVlbi1zaGFyZS1zdG9wLWJ1dHRvbidcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ3NjcmVlbi1zaGFyZS1zdGFydC1idXR0b24nLCBkaXNhYmxlZDogZGlzYWJsZVNjcmVlblNoYXJlQnV0dG9uLCBvbkNsaWNrOiBoYW5kbGVDbGljaywgY2hpbGRyZW46IGpzeChJY29uLCB7IGljb246IGlzU29tZW9uZVNjcmVlblNoYXJpbmcgPyAnc2NyZWVuLXNoYXJlLW9uJyA6ICdzY3JlZW4tc2hhcmUtb2ZmJyB9KSB9KSB9KSB9KSB9KSk7XG59O1xuXG5jb25zdCBTZWxlY3RDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG5jb25zdCBTZWxlY3QgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBpY29uLCBkZWZhdWx0U2VsZWN0ZWRMYWJlbCwgZGVmYXVsdFNlbGVjdGVkSW5kZXgsIGhhbmRsZVNlbGVjdDogaGFuZGxlU2VsZWN0UHJvcCwgfSA9IHByb3BzO1xuICAgIGNvbnN0IFtpc09wZW4sIHNldElzT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW2FjdGl2ZUluZGV4LCBzZXRBY3RpdmVJbmRleF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgICBjb25zdCBbc2VsZWN0ZWRJbmRleCwgc2V0U2VsZWN0ZWRJbmRleF0gPSB1c2VTdGF0ZShkZWZhdWx0U2VsZWN0ZWRJbmRleCk7XG4gICAgY29uc3QgW3NlbGVjdGVkTGFiZWwsIHNldFNlbGVjdGVkTGFiZWxdID0gdXNlU3RhdGUoZGVmYXVsdFNlbGVjdGVkTGFiZWwpO1xuICAgIGNvbnN0IHsgcmVmcywgY29udGV4dCB9ID0gdXNlRmxvYXRpbmcoe1xuICAgICAgICBwbGFjZW1lbnQ6ICdib3R0b20tc3RhcnQnLFxuICAgICAgICBvcGVuOiBpc09wZW4sXG4gICAgICAgIG9uT3BlbkNoYW5nZTogc2V0SXNPcGVuLFxuICAgICAgICB3aGlsZUVsZW1lbnRzTW91bnRlZDogYXV0b1VwZGF0ZSxcbiAgICAgICAgbWlkZGxld2FyZTogW2ZsaXAoKV0sXG4gICAgfSk7XG4gICAgY29uc3QgZWxlbWVudHNSZWYgPSB1c2VSZWYoW10pO1xuICAgIGNvbnN0IGxhYmVsc1JlZiA9IHVzZVJlZihbXSk7XG4gICAgY29uc3QgaGFuZGxlU2VsZWN0ID0gdXNlQ2FsbGJhY2soKGluZGV4KSA9PiB7XG4gICAgICAgIHNldFNlbGVjdGVkSW5kZXgoaW5kZXgpO1xuICAgICAgICBoYW5kbGVTZWxlY3RQcm9wKGluZGV4IHx8IDApO1xuICAgICAgICBzZXRJc09wZW4oZmFsc2UpO1xuICAgICAgICBpZiAoaW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNldFNlbGVjdGVkTGFiZWwobGFiZWxzUmVmLmN1cnJlbnRbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgIH0sIFtoYW5kbGVTZWxlY3RQcm9wXSk7XG4gICAgY29uc3QgaGFuZGxlVHlwZWFoZWFkTWF0Y2ggPSAoaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGlzT3Blbikge1xuICAgICAgICAgICAgc2V0QWN0aXZlSW5kZXgoaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlU2VsZWN0KGluZGV4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbGlzdE5hdiA9IHVzZUxpc3ROYXZpZ2F0aW9uKGNvbnRleHQsIHtcbiAgICAgICAgbGlzdFJlZjogZWxlbWVudHNSZWYsXG4gICAgICAgIGFjdGl2ZUluZGV4LFxuICAgICAgICBzZWxlY3RlZEluZGV4LFxuICAgICAgICBvbk5hdmlnYXRlOiBzZXRBY3RpdmVJbmRleCxcbiAgICB9KTtcbiAgICBjb25zdCB0eXBlYWhlYWQgPSB1c2VUeXBlYWhlYWQoY29udGV4dCwge1xuICAgICAgICBsaXN0UmVmOiBsYWJlbHNSZWYsXG4gICAgICAgIGFjdGl2ZUluZGV4LFxuICAgICAgICBzZWxlY3RlZEluZGV4LFxuICAgICAgICBvbk1hdGNoOiBoYW5kbGVUeXBlYWhlYWRNYXRjaCxcbiAgICB9KTtcbiAgICBjb25zdCBjbGljayA9IHVzZUNsaWNrKGNvbnRleHQpO1xuICAgIGNvbnN0IGRpc21pc3MgPSB1c2VEaXNtaXNzKGNvbnRleHQpO1xuICAgIGNvbnN0IHJvbGUgPSB1c2VSb2xlKGNvbnRleHQsIHsgcm9sZTogJ2xpc3Rib3gnIH0pO1xuICAgIGNvbnN0IHsgZ2V0UmVmZXJlbmNlUHJvcHMsIGdldEZsb2F0aW5nUHJvcHMsIGdldEl0ZW1Qcm9wcyB9ID0gdXNlSW50ZXJhY3Rpb25zKFtsaXN0TmF2LCB0eXBlYWhlYWQsIGNsaWNrLCBkaXNtaXNzLCByb2xlXSk7XG4gICAgY29uc3Qgc2VsZWN0Q29udGV4dCA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICAgICAgYWN0aXZlSW5kZXgsXG4gICAgICAgIHNlbGVjdGVkSW5kZXgsXG4gICAgICAgIGdldEl0ZW1Qcm9wcyxcbiAgICAgICAgaGFuZGxlU2VsZWN0LFxuICAgIH0pLCBbYWN0aXZlSW5kZXgsIHNlbGVjdGVkSW5kZXgsIGdldEl0ZW1Qcm9wcywgaGFuZGxlU2VsZWN0XSk7XG4gICAgcmV0dXJuIChqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZHJvcGRvd25cIiwgY2hpbGRyZW46IFtqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZHJvcGRvd24tc2VsZWN0ZWRcIiwgcmVmOiByZWZzLnNldFJlZmVyZW5jZSwgdGFiSW5kZXg6IDAsIC4uLmdldFJlZmVyZW5jZVByb3BzKCksIGNoaWxkcmVuOiBbanN4cyhcImxhYmVsXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZHJvcGRvd24tc2VsZWN0ZWRfX2xhYmVsXCIsIGNoaWxkcmVuOiBbaWNvbiAmJiAoanN4KEljb24sIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZHJvcGRvd24tc2VsZWN0ZWRfX2ljb25cIiwgaWNvbjogaWNvbiB9KSksIHNlbGVjdGVkTGFiZWxdIH0pLCBqc3goSWNvbiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19kcm9wZG93bi1zZWxlY3RlZF9fY2hldnJvblwiLCBpY29uOiBpc09wZW4gPyAnY2hldnJvbi11cCcgOiAnY2hldnJvbi1kb3duJyB9KV0gfSksIGpzeChTZWxlY3RDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBzZWxlY3RDb250ZXh0LCBjaGlsZHJlbjogaXNPcGVuICYmIChqc3goRmxvYXRpbmdGb2N1c01hbmFnZXIsIHsgY29udGV4dDogY29udGV4dCwgbW9kYWw6IGZhbHNlLCBjaGlsZHJlbjoganN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZHJvcGRvd24tbGlzdFwiLCByZWY6IHJlZnMuc2V0RmxvYXRpbmcsIC4uLmdldEZsb2F0aW5nUHJvcHMoKSwgY2hpbGRyZW46IGpzeChGbG9hdGluZ0xpc3QsIHsgZWxlbWVudHNSZWY6IGVsZW1lbnRzUmVmLCBsYWJlbHNSZWY6IGxhYmVsc1JlZiwgY2hpbGRyZW46IGNoaWxkcmVuIH0pIH0pIH0pKSB9KV0gfSkpO1xufTtcbmNvbnN0IERyb3BEb3duU2VsZWN0T3B0aW9uID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBzZWxlY3RlZCwgbGFiZWwsIGljb24gfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgZ2V0SXRlbVByb3BzLCBoYW5kbGVTZWxlY3QgfSA9IHVzZUNvbnRleHQoU2VsZWN0Q29udGV4dCk7XG4gICAgY29uc3QgeyByZWYsIGluZGV4IH0gPSB1c2VMaXN0SXRlbSgpO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19kcm9wZG93bi1vcHRpb24nLCB7XG4gICAgICAgICAgICAnc3RyLXZpZGVvX19kcm9wZG93bi1vcHRpb24tLXNlbGVjdGVkJzogc2VsZWN0ZWQsXG4gICAgICAgIH0pLCByZWY6IHJlZiwgLi4uZ2V0SXRlbVByb3BzKHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IGhhbmRsZVNlbGVjdChpbmRleCksXG4gICAgICAgIH0pLCBjaGlsZHJlbjogW2pzeChJY29uLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2Ryb3Bkb3duLWljb25cIiwgaWNvbjogaWNvbiB9KSwganN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2Ryb3Bkb3duLWxhYmVsXCIsIGNoaWxkcmVuOiBsYWJlbCB9KV0gfSkpO1xufTtcbmNvbnN0IERyb3BEb3duU2VsZWN0ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgaWNvbiwgaGFuZGxlU2VsZWN0LCBkZWZhdWx0U2VsZWN0ZWRMYWJlbCwgZGVmYXVsdFNlbGVjdGVkSW5kZXgsIH0gPSBwcm9wcztcbiAgICByZXR1cm4gKGpzeChTZWxlY3QsIHsgaWNvbjogaWNvbiwgaGFuZGxlU2VsZWN0OiBoYW5kbGVTZWxlY3QsIGRlZmF1bHRTZWxlY3RlZEluZGV4OiBkZWZhdWx0U2VsZWN0ZWRJbmRleCwgZGVmYXVsdFNlbGVjdGVkTGFiZWw6IGRlZmF1bHRTZWxlY3RlZExhYmVsLCBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xufTtcblxuY29uc3QgRGV2aWNlU2VsZWN0b3JPcHRpb24gPSAoeyBkaXNhYmxlZCwgaWQsIGxhYmVsLCBvbkNoYW5nZSwgbmFtZSwgc2VsZWN0ZWQsIGRlZmF1bHRDaGVja2VkLCB2YWx1ZSwgfSkgPT4ge1xuICAgIHJldHVybiAoanN4cyhcImxhYmVsXCIsIHsgY2xhc3NOYW1lOiBjbHN4KCdzdHItdmlkZW9fX2RldmljZS1zZXR0aW5nc19fb3B0aW9uJywge1xuICAgICAgICAgICAgJ3N0ci12aWRlb19fZGV2aWNlLXNldHRpbmdzX19vcHRpb24tLXNlbGVjdGVkJzogc2VsZWN0ZWQsXG4gICAgICAgICAgICAnc3RyLXZpZGVvX19kZXZpY2Utc2V0dGluZ3NfX29wdGlvbi0tZGlzYWJsZWQnOiBkaXNhYmxlZCxcbiAgICAgICAgfSksIGh0bWxGb3I6IGlkLCBjaGlsZHJlbjogW2pzeChcImlucHV0XCIsIHsgdHlwZTogXCJyYWRpb1wiLCBuYW1lOiBuYW1lLCBvbkNoYW5nZTogb25DaGFuZ2UsIHZhbHVlOiB2YWx1ZSwgaWQ6IGlkLCBjaGVja2VkOiBzZWxlY3RlZCwgZGVmYXVsdENoZWNrZWQ6IGRlZmF1bHRDaGVja2VkLCBkaXNhYmxlZDogZGlzYWJsZWQgfSksIGxhYmVsXSB9KSk7XG59O1xuY29uc3QgRGV2aWNlU2VsZWN0b3JMaXN0ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBkZXZpY2VzID0gW10sIHNlbGVjdGVkRGV2aWNlSWQ6IHNlbGVjdGVkRGV2aWNlRnJvbVByb3BzLCB0aXRsZSwgdHlwZSwgb25DaGFuZ2UsIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IGNsb3NlIH0gPSB1c2VNZW51Q29udGV4dCgpO1xuICAgIC8vIHNvbWV0aW1lcyB0aGUgYnJvd3NlciAoQ2hyb21lKSB3aWxsIHJlcG9ydCB0aGUgc3lzdGVtLWRlZmF1bHQgZGV2aWNlXG4gICAgLy8gd2l0aCBhbiBpZCBvZiAnZGVmYXVsdCcuIEluIGNhc2Ugd2hlbiBpdCBkb2Vzbid0LCB3ZSdsbCBzZWxlY3QgdGhlIGZpcnN0XG4gICAgLy8gYXZhaWxhYmxlIGRldmljZS5cbiAgICBsZXQgc2VsZWN0ZWREZXZpY2VJZCA9IHNlbGVjdGVkRGV2aWNlRnJvbVByb3BzO1xuICAgIGlmIChkZXZpY2VzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgIWRldmljZXMuZmluZCgoZCkgPT4gZC5kZXZpY2VJZCA9PT0gc2VsZWN0ZWREZXZpY2VJZCkpIHtcbiAgICAgICAgc2VsZWN0ZWREZXZpY2VJZCA9IGRldmljZXNbMF0uZGV2aWNlSWQ7XG4gICAgfVxuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2RldmljZS1zZXR0aW5nc19fZGV2aWNlLWtpbmRcIiwgY2hpbGRyZW46IFt0aXRsZSAmJiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZGV2aWNlLXNldHRpbmdzX19kZXZpY2Utc2VsZWN0b3ItdGl0bGVcIiwgY2hpbGRyZW46IHRpdGxlIH0pKSwgIWRldmljZXMubGVuZ3RoID8gKGpzeChEZXZpY2VTZWxlY3Rvck9wdGlvbiwgeyBpZDogYCR7dHlwZX0tLWRlZmF1bHRgLCBsYWJlbDogXCJEZWZhdWx0XCIsIG5hbWU6IHR5cGUsIGRlZmF1bHRDaGVja2VkOiB0cnVlLCB2YWx1ZTogXCJkZWZhdWx0XCIgfSkpIDogKGRldmljZXMubWFwKChkZXZpY2UpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGpzeChEZXZpY2VTZWxlY3Rvck9wdGlvbiwgeyBpZDogYCR7dHlwZX0tLSR7ZGV2aWNlLmRldmljZUlkfWAsIHZhbHVlOiBkZXZpY2UuZGV2aWNlSWQsIGxhYmVsOiBkZXZpY2UubGFiZWwsIG9uQ2hhbmdlOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U/LihlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZT8uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIG5hbWU6IHR5cGUsIHNlbGVjdGVkOiBkZXZpY2UuZGV2aWNlSWQgPT09IHNlbGVjdGVkRGV2aWNlSWQgfHwgZGV2aWNlcy5sZW5ndGggPT09IDEgfSwgZGV2aWNlLmRldmljZUlkKSk7XG4gICAgICAgICAgICB9KSldIH0pKTtcbn07XG5jb25zdCBEZXZpY2VTZWxlY3RvckRyb3Bkb3duID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBkZXZpY2VzID0gW10sIHNlbGVjdGVkRGV2aWNlSWQ6IHNlbGVjdGVkRGV2aWNlRnJvbVByb3BzLCB0aXRsZSwgb25DaGFuZ2UsIGljb24sIH0gPSBwcm9wcztcbiAgICAvLyBzb21ldGltZXMgdGhlIGJyb3dzZXIgKENocm9tZSkgd2lsbCByZXBvcnQgdGhlIHN5c3RlbS1kZWZhdWx0IGRldmljZVxuICAgIC8vIHdpdGggYW4gaWQgb2YgJ2RlZmF1bHQnLiBJbiBjYXNlIHdoZW4gaXQgZG9lc24ndCwgd2UnbGwgc2VsZWN0IHRoZSBmaXJzdFxuICAgIC8vIGF2YWlsYWJsZSBkZXZpY2UuXG4gICAgbGV0IHNlbGVjdGVkRGV2aWNlSWQgPSBzZWxlY3RlZERldmljZUZyb21Qcm9wcztcbiAgICBpZiAoZGV2aWNlcy5sZW5ndGggPiAwICYmXG4gICAgICAgICFkZXZpY2VzLmZpbmQoKGQpID0+IGQuZGV2aWNlSWQgPT09IHNlbGVjdGVkRGV2aWNlSWQpKSB7XG4gICAgICAgIHNlbGVjdGVkRGV2aWNlSWQgPSBkZXZpY2VzWzBdLmRldmljZUlkO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gZGV2aWNlcy5maW5kSW5kZXgoKGQpID0+IGQuZGV2aWNlSWQgPT09IHNlbGVjdGVkRGV2aWNlSWQpO1xuICAgIGNvbnN0IGhhbmRsZVNlbGVjdCA9IHVzZUNhbGxiYWNrKChpbmRleCkgPT4ge1xuICAgICAgICBvbkNoYW5nZT8uKGRldmljZXNbaW5kZXhdLmRldmljZUlkKTtcbiAgICB9LCBbZGV2aWNlcywgb25DaGFuZ2VdKTtcbiAgICByZXR1cm4gKGpzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19kZXZpY2Utc2V0dGluZ3NfX2RldmljZS1raW5kXCIsIGNoaWxkcmVuOiBbanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZGV2aWNlLXNldHRpbmdzX19kZXZpY2Utc2VsZWN0b3ItdGl0bGVcIiwgY2hpbGRyZW46IHRpdGxlIH0pLCBqc3goRHJvcERvd25TZWxlY3QsIHsgaWNvbjogaWNvbiwgZGVmYXVsdFNlbGVjdGVkSW5kZXg6IHNlbGVjdGVkSW5kZXgsIGRlZmF1bHRTZWxlY3RlZExhYmVsOiBkZXZpY2VzW3NlbGVjdGVkSW5kZXhdPy5sYWJlbCwgaGFuZGxlU2VsZWN0OiBoYW5kbGVTZWxlY3QsIGNoaWxkcmVuOiBkZXZpY2VzLm1hcCgoZGV2aWNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoanN4KERyb3BEb3duU2VsZWN0T3B0aW9uLCB7IGljb246IGljb24sIGxhYmVsOiBkZXZpY2UubGFiZWwsIHNlbGVjdGVkOiBkZXZpY2UuZGV2aWNlSWQgPT09IHNlbGVjdGVkRGV2aWNlSWQgfHwgZGV2aWNlcy5sZW5ndGggPT09IDEgfSwgZGV2aWNlLmRldmljZUlkKSk7XG4gICAgICAgICAgICAgICAgfSkgfSldIH0pKTtcbn07XG5jb25zdCBEZXZpY2VTZWxlY3RvciA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgdmlzdWFsVHlwZSA9ICdsaXN0JywgaWNvbiwgcGxhY2Vob2xkZXIsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIGlmICh2aXN1YWxUeXBlID09PSAnbGlzdCcpIHtcbiAgICAgICAgcmV0dXJuIGpzeChEZXZpY2VTZWxlY3Rvckxpc3QsIHsgLi4ucmVzdCB9KTtcbiAgICB9XG4gICAgcmV0dXJuIChqc3goRGV2aWNlU2VsZWN0b3JEcm9wZG93biwgeyAuLi5yZXN0LCBpY29uOiBpY29uLCBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIgfSkpO1xufTtcblxuY29uc3QgRGV2aWNlU2VsZWN0b3JBdWRpb0lucHV0ID0gKHsgdGl0bGUsIHZpc3VhbFR5cGUsIH0pID0+IHtcbiAgICBjb25zdCB7IHVzZU1pY3JvcGhvbmVTdGF0ZSB9ID0gdXNlQ2FsbFN0YXRlSG9va3MoKTtcbiAgICBjb25zdCB7IG1pY3JvcGhvbmUsIHNlbGVjdGVkRGV2aWNlLCBkZXZpY2VzIH0gPSB1c2VNaWNyb3Bob25lU3RhdGUoKTtcbiAgICByZXR1cm4gKGpzeChEZXZpY2VTZWxlY3RvciwgeyBkZXZpY2VzOiBkZXZpY2VzIHx8IFtdLCBzZWxlY3RlZERldmljZUlkOiBzZWxlY3RlZERldmljZSwgdHlwZTogXCJhdWRpb2lucHV0XCIsIG9uQ2hhbmdlOiBhc3luYyAoZGV2aWNlSWQpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IG1pY3JvcGhvbmUuc2VsZWN0KGRldmljZUlkKTtcbiAgICAgICAgfSwgdGl0bGU6IHRpdGxlLCB2aXN1YWxUeXBlOiB2aXN1YWxUeXBlLCBpY29uOiBcIm1pY1wiIH0pKTtcbn07XG5jb25zdCBEZXZpY2VTZWxlY3RvckF1ZGlvT3V0cHV0ID0gKHsgdGl0bGUsIHZpc3VhbFR5cGUsIH0pID0+IHtcbiAgICBjb25zdCB7IHVzZVNwZWFrZXJTdGF0ZSB9ID0gdXNlQ2FsbFN0YXRlSG9va3MoKTtcbiAgICBjb25zdCB7IHNwZWFrZXIsIHNlbGVjdGVkRGV2aWNlLCBkZXZpY2VzLCBpc0RldmljZVNlbGVjdGlvblN1cHBvcnRlZCB9ID0gdXNlU3BlYWtlclN0YXRlKCk7XG4gICAgaWYgKCFpc0RldmljZVNlbGVjdGlvblN1cHBvcnRlZClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIChqc3goRGV2aWNlU2VsZWN0b3IsIHsgZGV2aWNlczogZGV2aWNlcywgdHlwZTogXCJhdWRpb291dHB1dFwiLCBzZWxlY3RlZERldmljZUlkOiBzZWxlY3RlZERldmljZSwgb25DaGFuZ2U6IChkZXZpY2VJZCkgPT4ge1xuICAgICAgICAgICAgc3BlYWtlci5zZWxlY3QoZGV2aWNlSWQpO1xuICAgICAgICB9LCB0aXRsZTogdGl0bGUsIHZpc3VhbFR5cGU6IHZpc3VhbFR5cGUsIGljb246IFwic3BlYWtlclwiIH0pKTtcbn07XG5cbmNvbnN0IERldmljZVNlbGVjdG9yVmlkZW8gPSAoeyB0aXRsZSwgdmlzdWFsVHlwZSwgfSkgPT4ge1xuICAgIGNvbnN0IHsgdXNlQ2FtZXJhU3RhdGUgfSA9IHVzZUNhbGxTdGF0ZUhvb2tzKCk7XG4gICAgY29uc3QgeyBjYW1lcmEsIGRldmljZXMsIHNlbGVjdGVkRGV2aWNlIH0gPSB1c2VDYW1lcmFTdGF0ZSgpO1xuICAgIHJldHVybiAoanN4KERldmljZVNlbGVjdG9yLCB7IGRldmljZXM6IGRldmljZXMgfHwgW10sIHR5cGU6IFwidmlkZW9pbnB1dFwiLCBzZWxlY3RlZERldmljZUlkOiBzZWxlY3RlZERldmljZSwgb25DaGFuZ2U6IGFzeW5jIChkZXZpY2VJZCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgY2FtZXJhLnNlbGVjdChkZXZpY2VJZCk7XG4gICAgICAgIH0sIHRpdGxlOiB0aXRsZSwgdmlzdWFsVHlwZTogdmlzdWFsVHlwZSwgaWNvbjogXCJjYW1lcmFcIiB9KSk7XG59O1xuXG5jb25zdCBEZXZpY2VTZXR0aW5ncyA9ICh7IHZpc3VhbFR5cGUgPSBNZW51VmlzdWFsVHlwZS5NRU5VLCB9KSA9PiB7XG4gICAgcmV0dXJuIChqc3goTWVudVRvZ2dsZSwgeyBwbGFjZW1lbnQ6IFwiYm90dG9tLWVuZFwiLCBUb2dnbGVCdXR0b246IFRvZ2dsZURldmljZVNldHRpbmdzTWVudUJ1dHRvbiwgdmlzdWFsVHlwZTogdmlzdWFsVHlwZSwgY2hpbGRyZW46IGpzeChNZW51LCB7fSkgfSkpO1xufTtcbmNvbnN0IE1lbnUgPSAoKSA9PiB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgcmV0dXJuIChqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZGV2aWNlLXNldHRpbmdzXCIsIGNoaWxkcmVuOiBbanN4KERldmljZVNlbGVjdG9yVmlkZW8sIHsgdGl0bGU6IHQoJ1NlbGVjdCBhIENhbWVyYScpIH0pLCBqc3goRGV2aWNlU2VsZWN0b3JBdWRpb0lucHV0LCB7IHRpdGxlOiB0KCdTZWxlY3QgYSBNaWMnKSB9KSwganN4KERldmljZVNlbGVjdG9yQXVkaW9PdXRwdXQsIHsgdGl0bGU6IHQoJ1NlbGVjdCBTcGVha2VycycpIH0pXSB9KSk7XG59O1xuY29uc3QgVG9nZ2xlRGV2aWNlU2V0dGluZ3NNZW51QnV0dG9uID0gZm9yd2FyZFJlZihmdW5jdGlvbiBUb2dnbGVEZXZpY2VTZXR0aW5nc01lbnVCdXR0b24oeyBtZW51U2hvd24gfSwgcmVmKSB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgcmV0dXJuIChqc3goSWNvbkJ1dHRvbiwgeyBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fZGV2aWNlLXNldHRpbmdzX19idXR0b24nLCB7XG4gICAgICAgICAgICAnc3RyLXZpZGVvX19kZXZpY2Utc2V0dGluZ3NfX2J1dHRvbi0tYWN0aXZlJzogbWVudVNob3duLFxuICAgICAgICB9KSwgdGl0bGU6IHQoJ1RvZ2dsZSBkZXZpY2UgbWVudScpLCBpY29uOiBcImRldmljZS1zZXR0aW5nc1wiLCByZWY6IHJlZiB9KSk7XG59KTtcblxuY29uc3QgVG9nZ2xlQXVkaW9QcmV2aWV3QnV0dG9uID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBjYXB0aW9uLCBvbk1lbnVUb2dnbGUsIC4uLnJlc3RDb21wb3NpdGVCdXR0b25Qcm9wcyB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgeyB1c2VNaWNyb3Bob25lU3RhdGUgfSA9IHVzZUNhbGxTdGF0ZUhvb2tzKCk7XG4gICAgY29uc3QgeyBtaWNyb3Bob25lLCBvcHRpbWlzdGljSXNNdXRlLCBoYXNCcm93c2VyUGVybWlzc2lvbiB9ID0gdXNlTWljcm9waG9uZVN0YXRlKCk7XG4gICAgY29uc3QgW3Rvb2x0aXBEaXNhYmxlZCwgc2V0VG9vbHRpcERpc2FibGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9IGNyZWF0ZUNhbGxDb250cm9sSGFuZGxlcihwcm9wcywgKCkgPT4gbWljcm9waG9uZS50b2dnbGUoKSk7XG4gICAgcmV0dXJuIChqc3goV2l0aFRvb2x0aXAsIHsgdGl0bGU6ICFoYXNCcm93c2VyUGVybWlzc2lvblxuICAgICAgICAgICAgPyB0KCdDaGVjayB5b3VyIGJyb3dzZXIgYXVkaW8gcGVybWlzc2lvbnMnKVxuICAgICAgICAgICAgOiBjYXB0aW9uID8/IHQoJ01pYycpLCB0b29sdGlwRGlzYWJsZWQ6IHRvb2x0aXBEaXNhYmxlZCwgY2hpbGRyZW46IGpzeHMoQ29tcG9zaXRlQnV0dG9uLCB7IGFjdGl2ZTogb3B0aW1pc3RpY0lzTXV0ZSwgY2FwdGlvbjogY2FwdGlvbiwgY2xhc3NOYW1lOiBjbHN4KCFoYXNCcm93c2VyUGVybWlzc2lvbiAmJiAnc3RyLXZpZGVvX19kZXZpY2UtdW5hdmFpbGFibGUnKSwgdmFyaWFudDogXCJzZWNvbmRhcnlcIiwgZGlzYWJsZWQ6ICFoYXNCcm93c2VyUGVybWlzc2lvbiwgXCJkYXRhLXRlc3RpZFwiOiBvcHRpbWlzdGljSXNNdXRlXG4gICAgICAgICAgICAgICAgPyAncHJldmlldy1hdWRpby11bm11dGUtYnV0dG9uJ1xuICAgICAgICAgICAgICAgIDogJ3ByZXZpZXctYXVkaW8tbXV0ZS1idXR0b24nLCBvbkNsaWNrOiBoYW5kbGVDbGljaywgLi4ucmVzdENvbXBvc2l0ZUJ1dHRvblByb3BzLCBvbk1lbnVUb2dnbGU6IChzaG93bikgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRvb2x0aXBEaXNhYmxlZChzaG93bik7XG4gICAgICAgICAgICAgICAgb25NZW51VG9nZ2xlPy4oc2hvd24pO1xuICAgICAgICAgICAgfSwgY2hpbGRyZW46IFtqc3goSWNvbiwgeyBpY29uOiAhb3B0aW1pc3RpY0lzTXV0ZSA/ICdtaWMnIDogJ21pYy1vZmYnIH0pLCAhaGFzQnJvd3NlclBlcm1pc3Npb24gJiYgKGpzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19uby1tZWRpYS1wZXJtaXNzaW9uXCIsIHRpdGxlOiB0KCdDaGVjayB5b3VyIGJyb3dzZXIgYXVkaW8gcGVybWlzc2lvbnMnKSwgY2hpbGRyZW46IFwiIVwiIH0pKV0gfSkgfSkpO1xufTtcbmNvbnN0IFRvZ2dsZUF1ZGlvUHVibGlzaGluZ0J1dHRvbiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIGNvbnN0IHsgY2FwdGlvbiwgTWVudSA9IGpzeChEZXZpY2VTZWxlY3RvckF1ZGlvSW5wdXQsIHsgdmlzdWFsVHlwZTogXCJsaXN0XCIgfSksIG1lbnVQbGFjZW1lbnQgPSAndG9wJywgb25NZW51VG9nZ2xlLCAuLi5yZXN0Q29tcG9zaXRlQnV0dG9uUHJvcHMgfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgaGFzUGVybWlzc2lvbiwgcmVxdWVzdFBlcm1pc3Npb24sIGlzQXdhaXRpbmdQZXJtaXNzaW9uIH0gPSB1c2VSZXF1ZXN0UGVybWlzc2lvbihPd25DYXBhYmlsaXR5LlNFTkRfQVVESU8pO1xuICAgIGNvbnN0IHsgdXNlTWljcm9waG9uZVN0YXRlIH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IHsgbWljcm9waG9uZSwgb3B0aW1pc3RpY0lzTXV0ZSwgaGFzQnJvd3NlclBlcm1pc3Npb24gfSA9IHVzZU1pY3JvcGhvbmVTdGF0ZSgpO1xuICAgIGNvbnN0IFt0b29sdGlwRGlzYWJsZWQsIHNldFRvb2x0aXBEaXNhYmxlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSBjcmVhdGVDYWxsQ29udHJvbEhhbmRsZXIocHJvcHMsIGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKCFoYXNQZXJtaXNzaW9uKSB7XG4gICAgICAgICAgICBhd2FpdCByZXF1ZXN0UGVybWlzc2lvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgbWljcm9waG9uZS50b2dnbGUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiAoanN4KFJlc3RyaWN0ZWQsIHsgcmVxdWlyZWRHcmFudHM6IFtPd25DYXBhYmlsaXR5LlNFTkRfQVVESU9dLCBjaGlsZHJlbjoganN4KFBlcm1pc3Npb25Ob3RpZmljYXRpb24sIHsgcGVybWlzc2lvbjogT3duQ2FwYWJpbGl0eS5TRU5EX0FVRElPLCBpc0F3YWl0aW5nQXBwcm92YWw6IGlzQXdhaXRpbmdQZXJtaXNzaW9uLCBtZXNzYWdlQXBwcm92ZWQ6IHQoJ1lvdSBjYW4gbm93IHNwZWFrLicpLCBtZXNzYWdlQXdhaXRpbmdBcHByb3ZhbDogdCgnQXdhaXRpbmcgZm9yIGFuIGFwcHJvdmFsIHRvIHNwZWFrLicpLCBtZXNzYWdlUmV2b2tlZDogdCgnWW91IGNhbiBubyBsb25nZXIgc3BlYWsuJyksIGNoaWxkcmVuOiBqc3goV2l0aFRvb2x0aXAsIHsgdGl0bGU6ICFoYXNQZXJtaXNzaW9uXG4gICAgICAgICAgICAgICAgICAgID8gdCgnWW91IGhhdmUgbm8gcGVybWlzc2lvbiB0byBzaGFyZSB5b3VyIGF1ZGlvJylcbiAgICAgICAgICAgICAgICAgICAgOiAhaGFzQnJvd3NlclBlcm1pc3Npb25cbiAgICAgICAgICAgICAgICAgICAgICAgID8gdCgnQ2hlY2sgeW91ciBicm93c2VyIG1pYyBwZXJtaXNzaW9ucycpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGNhcHRpb24gPz8gdCgnTWljJyksIHRvb2x0aXBEaXNhYmxlZDogdG9vbHRpcERpc2FibGVkLCBjaGlsZHJlbjoganN4cyhDb21wb3NpdGVCdXR0b24sIHsgYWN0aXZlOiBvcHRpbWlzdGljSXNNdXRlLCBjYXB0aW9uOiBjYXB0aW9uLCB2YXJpYW50OiBcInNlY29uZGFyeVwiLCBkaXNhYmxlZDogIWhhc0Jyb3dzZXJQZXJtaXNzaW9uIHx8ICFoYXNQZXJtaXNzaW9uLCBcImRhdGEtdGVzdGlkXCI6IG9wdGltaXN0aWNJc011dGUgPyAnYXVkaW8tdW5tdXRlLWJ1dHRvbicgOiAnYXVkaW8tbXV0ZS1idXR0b24nLCBvbkNsaWNrOiBoYW5kbGVDbGljaywgTWVudTogTWVudSwgbWVudVBsYWNlbWVudDogbWVudVBsYWNlbWVudCwgbWVudU9mZnNldDogMTYsIC4uLnJlc3RDb21wb3NpdGVCdXR0b25Qcm9wcywgb25NZW51VG9nZ2xlOiAoc2hvd24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRvb2x0aXBEaXNhYmxlZChzaG93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbk1lbnVUb2dnbGU/LihzaG93bik7XG4gICAgICAgICAgICAgICAgICAgIH0sIGNoaWxkcmVuOiBbanN4KEljb24sIHsgaWNvbjogb3B0aW1pc3RpY0lzTXV0ZSA/ICdtaWMtb2ZmJyA6ICdtaWMnIH0pLCAoIWhhc0Jyb3dzZXJQZXJtaXNzaW9uIHx8ICFoYXNQZXJtaXNzaW9uKSAmJiAoanN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX25vLW1lZGlhLXBlcm1pc3Npb25cIiwgY2hpbGRyZW46IFwiIVwiIH0pKV0gfSkgfSkgfSkgfSkpO1xufTtcblxuY29uc3QgVG9nZ2xlVmlkZW9QcmV2aWV3QnV0dG9uID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBjYXB0aW9uLCBNZW51ID0gRGV2aWNlU2VsZWN0b3JWaWRlbywgbWVudVBsYWNlbWVudCA9ICd0b3AnLCBvbk1lbnVUb2dnbGUsIC4uLnJlc3RDb21wb3NpdGVCdXR0b25Qcm9wcyB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgeyB1c2VDYW1lcmFTdGF0ZSB9ID0gdXNlQ2FsbFN0YXRlSG9va3MoKTtcbiAgICBjb25zdCB7IGNhbWVyYSwgb3B0aW1pc3RpY0lzTXV0ZSwgaGFzQnJvd3NlclBlcm1pc3Npb24gfSA9IHVzZUNhbWVyYVN0YXRlKCk7XG4gICAgY29uc3QgW3Rvb2x0aXBEaXNhYmxlZCwgc2V0VG9vbHRpcERpc2FibGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9IGNyZWF0ZUNhbGxDb250cm9sSGFuZGxlcihwcm9wcywgKCkgPT4gY2FtZXJhLnRvZ2dsZSgpKTtcbiAgICByZXR1cm4gKGpzeChXaXRoVG9vbHRpcCwgeyB0aXRsZTogIWhhc0Jyb3dzZXJQZXJtaXNzaW9uXG4gICAgICAgICAgICA/IHQoJ0NoZWNrIHlvdXIgYnJvd3NlciB2aWRlbyBwZXJtaXNzaW9ucycpXG4gICAgICAgICAgICA6IGNhcHRpb24gPz8gdCgnVmlkZW8nKSwgdG9vbHRpcERpc2FibGVkOiB0b29sdGlwRGlzYWJsZWQsIGNoaWxkcmVuOiBqc3hzKENvbXBvc2l0ZUJ1dHRvbiwgeyBhY3RpdmU6IG9wdGltaXN0aWNJc011dGUsIGNhcHRpb246IGNhcHRpb24sIGNsYXNzTmFtZTogY2xzeCghaGFzQnJvd3NlclBlcm1pc3Npb24gJiYgJ3N0ci12aWRlb19fZGV2aWNlLXVuYXZhaWxhYmxlJyksIHZhcmlhbnQ6IFwic2Vjb25kYXJ5XCIsIFwiZGF0YS10ZXN0aWRcIjogb3B0aW1pc3RpY0lzTXV0ZVxuICAgICAgICAgICAgICAgID8gJ3ByZXZpZXctdmlkZW8tdW5tdXRlLWJ1dHRvbidcbiAgICAgICAgICAgICAgICA6ICdwcmV2aWV3LXZpZGVvLW11dGUtYnV0dG9uJywgb25DbGljazogaGFuZGxlQ2xpY2ssIGRpc2FibGVkOiAhaGFzQnJvd3NlclBlcm1pc3Npb24sIE1lbnU6IE1lbnUsIG1lbnVQbGFjZW1lbnQ6IG1lbnVQbGFjZW1lbnQsIC4uLnJlc3RDb21wb3NpdGVCdXR0b25Qcm9wcywgb25NZW51VG9nZ2xlOiAoc2hvd24pID0+IHtcbiAgICAgICAgICAgICAgICBzZXRUb29sdGlwRGlzYWJsZWQoc2hvd24pO1xuICAgICAgICAgICAgICAgIG9uTWVudVRvZ2dsZT8uKHNob3duKTtcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuOiBbanN4KEljb24sIHsgaWNvbjogIW9wdGltaXN0aWNJc011dGUgPyAnY2FtZXJhJyA6ICdjYW1lcmEtb2ZmJyB9KSwgIWhhc0Jyb3dzZXJQZXJtaXNzaW9uICYmIChqc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fbm8tbWVkaWEtcGVybWlzc2lvblwiLCB0aXRsZTogdCgnQ2hlY2sgeW91ciBicm93c2VyIHZpZGVvIHBlcm1pc3Npb25zJyksIGNoaWxkcmVuOiBcIiFcIiB9KSldIH0pIH0pKTtcbn07XG5jb25zdCBUb2dnbGVWaWRlb1B1Ymxpc2hpbmdCdXR0b24gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCB7IGNhcHRpb24sIE1lbnUgPSBqc3goRGV2aWNlU2VsZWN0b3JWaWRlbywgeyB2aXN1YWxUeXBlOiBcImxpc3RcIiB9KSwgbWVudVBsYWNlbWVudCA9ICd0b3AnLCBvbk1lbnVUb2dnbGUsIC4uLnJlc3RDb21wb3NpdGVCdXR0b25Qcm9wcyB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBoYXNQZXJtaXNzaW9uLCByZXF1ZXN0UGVybWlzc2lvbiwgaXNBd2FpdGluZ1Blcm1pc3Npb24gfSA9IHVzZVJlcXVlc3RQZXJtaXNzaW9uKE93bkNhcGFiaWxpdHkuU0VORF9WSURFTyk7XG4gICAgY29uc3QgeyB1c2VDYW1lcmFTdGF0ZSwgdXNlQ2FsbFNldHRpbmdzIH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IHsgY2FtZXJhLCBvcHRpbWlzdGljSXNNdXRlLCBoYXNCcm93c2VyUGVybWlzc2lvbiB9ID0gdXNlQ2FtZXJhU3RhdGUoKTtcbiAgICBjb25zdCBjYWxsU2V0dGluZ3MgPSB1c2VDYWxsU2V0dGluZ3MoKTtcbiAgICBjb25zdCBpc1B1Ymxpc2hpbmdWaWRlb0FsbG93ZWQgPSBjYWxsU2V0dGluZ3M/LnZpZGVvLmVuYWJsZWQ7XG4gICAgY29uc3QgW3Rvb2x0aXBEaXNhYmxlZCwgc2V0VG9vbHRpcERpc2FibGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9IGNyZWF0ZUNhbGxDb250cm9sSGFuZGxlcihwcm9wcywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoIWhhc1Blcm1pc3Npb24pIHtcbiAgICAgICAgICAgIGF3YWl0IHJlcXVlc3RQZXJtaXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCBjYW1lcmEudG9nZ2xlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKGpzeChSZXN0cmljdGVkLCB7IHJlcXVpcmVkR3JhbnRzOiBbT3duQ2FwYWJpbGl0eS5TRU5EX1ZJREVPXSwgY2hpbGRyZW46IGpzeChQZXJtaXNzaW9uTm90aWZpY2F0aW9uLCB7IHBlcm1pc3Npb246IE93bkNhcGFiaWxpdHkuU0VORF9WSURFTywgaXNBd2FpdGluZ0FwcHJvdmFsOiBpc0F3YWl0aW5nUGVybWlzc2lvbiwgbWVzc2FnZUFwcHJvdmVkOiB0KCdZb3UgY2FuIG5vdyBzaGFyZSB5b3VyIHZpZGVvLicpLCBtZXNzYWdlQXdhaXRpbmdBcHByb3ZhbDogdCgnQXdhaXRpbmcgZm9yIGFuIGFwcHJvdmFsIHRvIHNoYXJlIHlvdXIgdmlkZW8uJyksIG1lc3NhZ2VSZXZva2VkOiB0KCdZb3UgY2FuIG5vIGxvbmdlciBzaGFyZSB5b3VyIHZpZGVvLicpLCBjaGlsZHJlbjoganN4KFdpdGhUb29sdGlwLCB7IHRpdGxlOiAhaGFzUGVybWlzc2lvblxuICAgICAgICAgICAgICAgICAgICA/IHQoJ1lvdSBoYXZlIG5vIHBlcm1pc3Npb24gdG8gc2hhcmUgeW91ciB2aWRlbycpXG4gICAgICAgICAgICAgICAgICAgIDogIWhhc0Jyb3dzZXJQZXJtaXNzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHQoJ0NoZWNrIHlvdXIgYnJvd3NlciB2aWRlbyBwZXJtaXNzaW9ucycpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICFpc1B1Ymxpc2hpbmdWaWRlb0FsbG93ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHQoJ1ZpZGVvIHB1Ymxpc2hpbmcgaXMgZGlzYWJsZWQgYnkgdGhlIHN5c3RlbScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjYXB0aW9uIHx8IHQoJ1ZpZGVvJyksIHRvb2x0aXBEaXNhYmxlZDogdG9vbHRpcERpc2FibGVkLCBjaGlsZHJlbjoganN4cyhDb21wb3NpdGVCdXR0b24sIHsgYWN0aXZlOiBvcHRpbWlzdGljSXNNdXRlLCBjYXB0aW9uOiBjYXB0aW9uLCB2YXJpYW50OiBcInNlY29uZGFyeVwiLCBkaXNhYmxlZDogIWhhc0Jyb3dzZXJQZXJtaXNzaW9uIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhaGFzUGVybWlzc2lvbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIWlzUHVibGlzaGluZ1ZpZGVvQWxsb3dlZCwgXCJkYXRhLXRlc3RpZFwiOiBvcHRpbWlzdGljSXNNdXRlID8gJ3ZpZGVvLXVubXV0ZS1idXR0b24nIDogJ3ZpZGVvLW11dGUtYnV0dG9uJywgb25DbGljazogaGFuZGxlQ2xpY2ssIE1lbnU6IE1lbnUsIG1lbnVQbGFjZW1lbnQ6IG1lbnVQbGFjZW1lbnQsIG1lbnVPZmZzZXQ6IDE2LCAuLi5yZXN0Q29tcG9zaXRlQnV0dG9uUHJvcHMsIG9uTWVudVRvZ2dsZTogKHNob3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUb29sdGlwRGlzYWJsZWQoc2hvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25NZW51VG9nZ2xlPy4oc2hvd24pO1xuICAgICAgICAgICAgICAgICAgICB9LCBjaGlsZHJlbjogW2pzeChJY29uLCB7IGljb246IG9wdGltaXN0aWNJc011dGUgPyAnY2FtZXJhLW9mZicgOiAnY2FtZXJhJyB9KSwgKCFoYXNCcm93c2VyUGVybWlzc2lvbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFoYXNQZXJtaXNzaW9uIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWlzUHVibGlzaGluZ1ZpZGVvQWxsb3dlZCkgJiYgKGpzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19uby1tZWRpYS1wZXJtaXNzaW9uXCIsIGNoaWxkcmVuOiBcIiFcIiB9KSldIH0pIH0pIH0pIH0pKTtcbn07XG5cbmNvbnN0IEVuZENhbGxNZW51ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBvbkxlYXZlLCBvbkVuZCB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgcmV0dXJuIChqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fZW5kLWNhbGxfX2NvbmZpcm1hdGlvblwiLCBjaGlsZHJlbjogW2pzeHMoXCJidXR0b25cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19idXR0b24gc3RyLXZpZGVvX19lbmQtY2FsbF9fbGVhdmVcIiwgdHlwZTogXCJidXR0b25cIiwgXCJkYXRhLXRlc3RpZFwiOiBcImxlYXZlLWNhbGwtYnV0dG9uXCIsIG9uQ2xpY2s6IG9uTGVhdmUsIGNoaWxkcmVuOiBbanN4KEljb24sIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fYnV0dG9uX19pY29uIHN0ci12aWRlb19fZW5kLWNhbGxfX2xlYXZlLWljb25cIiwgaWNvbjogXCJsb2dvdXRcIiB9KSwgdCgnTGVhdmUgY2FsbCcpXSB9KSwganN4KFJlc3RyaWN0ZWQsIHsgcmVxdWlyZWRHcmFudHM6IFtPd25DYXBhYmlsaXR5LkVORF9DQUxMXSwgY2hpbGRyZW46IGpzeHMoXCJidXR0b25cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19idXR0b24gc3RyLXZpZGVvX19lbmQtY2FsbF9fZW5kXCIsIHR5cGU6IFwiYnV0dG9uXCIsIFwiZGF0YS10ZXN0aWRcIjogXCJlbmQtY2FsbC1mb3ItYWxsLWJ1dHRvblwiLCBvbkNsaWNrOiBvbkVuZCwgY2hpbGRyZW46IFtqc3goSWNvbiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19idXR0b25fX2ljb24gc3RyLXZpZGVvX19lbmQtY2FsbF9fZW5kLWljb25cIiwgaWNvbjogXCJjYWxsLWVuZFwiIH0pLCB0KCdFbmQgY2FsbCBmb3IgYWxsJyldIH0pIH0pXSB9KSk7XG59O1xuY29uc3QgQ2FuY2VsQ2FsbFRvZ2dsZU1lbnVCdXR0b24gPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIENhbmNlbENhbGxUb2dnbGVNZW51QnV0dG9uKHsgbWVudVNob3duIH0sIHJlZikge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIHJldHVybiAoanN4KFdpdGhUb29sdGlwLCB7IHRpdGxlOiB0KCdMZWF2ZSBjYWxsJyksIHRvb2x0aXBEaXNhYmxlZDogbWVudVNob3duLCBjaGlsZHJlbjoganN4KEljb25CdXR0b24sIHsgaWNvbjogbWVudVNob3duID8gJ2Nsb3NlJyA6ICdjYWxsLWVuZCcsIHZhcmlhbnQ6IG1lbnVTaG93biA/ICdhY3RpdmUnIDogJ2RhbmdlcicsIFwiZGF0YS10ZXN0aWRcIjogXCJsZWF2ZS1jYWxsLWJ1dHRvblwiLCByZWY6IHJlZiB9KSB9KSk7XG59KTtcbmNvbnN0IENhbmNlbENhbGxDb25maXJtQnV0dG9uID0gKHsgb25DbGljaywgb25MZWF2ZSwgfSkgPT4ge1xuICAgIGNvbnN0IGNhbGwgPSB1c2VDYWxsKCk7XG4gICAgY29uc3QgaGFuZGxlTGVhdmUgPSB1c2VDYWxsYmFjayhhc3luYyAoZSkgPT4ge1xuICAgICAgICBpZiAob25DbGljaykge1xuICAgICAgICAgICAgb25DbGljayhlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjYWxsKSB7XG4gICAgICAgICAgICBhd2FpdCBjYWxsLmxlYXZlKCk7XG4gICAgICAgICAgICBvbkxlYXZlPy4oKTtcbiAgICAgICAgfVxuICAgIH0sIFtvbkNsaWNrLCBvbkxlYXZlLCBjYWxsXSk7XG4gICAgY29uc3QgaGFuZGxlRW5kQ2FsbCA9IHVzZUNhbGxiYWNrKGFzeW5jIChlKSA9PiB7XG4gICAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgICAgICBvbkNsaWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNhbGwpIHtcbiAgICAgICAgICAgIGF3YWl0IGNhbGwuZW5kQ2FsbCgpO1xuICAgICAgICAgICAgb25MZWF2ZT8uKCk7XG4gICAgICAgIH1cbiAgICB9LCBbb25DbGljaywgb25MZWF2ZSwgY2FsbF0pO1xuICAgIHJldHVybiAoanN4KE1lbnVUb2dnbGUsIHsgcGxhY2VtZW50OiBcInRvcC1zdGFydFwiLCBUb2dnbGVCdXR0b246IENhbmNlbENhbGxUb2dnbGVNZW51QnV0dG9uLCBjaGlsZHJlbjoganN4KEVuZENhbGxNZW51LCB7IG9uRW5kOiBoYW5kbGVFbmRDYWxsLCBvbkxlYXZlOiBoYW5kbGVMZWF2ZSB9KSB9KSk7XG59O1xuY29uc3QgQ2FuY2VsQ2FsbEJ1dHRvbiA9ICh7IGRpc2FibGVkLCBjYXB0aW9uLCBvbkNsaWNrLCBvbkxlYXZlLCB9KSA9PiB7XG4gICAgY29uc3QgY2FsbCA9IHVzZUNhbGwoKTtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKGFzeW5jIChlKSA9PiB7XG4gICAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgICAgICBvbkNsaWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNhbGwpIHtcbiAgICAgICAgICAgIGF3YWl0IGNhbGwubGVhdmUoKTtcbiAgICAgICAgICAgIG9uTGVhdmU/LigpO1xuICAgICAgICB9XG4gICAgfSwgW29uQ2xpY2ssIG9uTGVhdmUsIGNhbGxdKTtcbiAgICByZXR1cm4gKGpzeChJY29uQnV0dG9uLCB7IGRpc2FibGVkOiBkaXNhYmxlZCwgaWNvbjogXCJjYWxsLWVuZFwiLCB2YXJpYW50OiBcImRhbmdlclwiLCB0aXRsZTogY2FwdGlvbiA/PyB0KCdMZWF2ZSBjYWxsJyksIFwiZGF0YS10ZXN0aWRcIjogXCJjYW5jZWwtY2FsbC1idXR0b25cIiwgb25DbGljazogaGFuZGxlQ2xpY2sgfSkpO1xufTtcblxuY29uc3QgQ2FsbENvbnRyb2xzID0gKHsgb25MZWF2ZSB9KSA9PiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtY29udHJvbHNcIiwgY2hpbGRyZW46IFtqc3goU3BlYWtpbmdXaGlsZU11dGVkTm90aWZpY2F0aW9uLCB7IGNoaWxkcmVuOiBqc3goVG9nZ2xlQXVkaW9QdWJsaXNoaW5nQnV0dG9uLCB7fSkgfSksIGpzeChUb2dnbGVWaWRlb1B1Ymxpc2hpbmdCdXR0b24sIHt9KSwganN4KFJlYWN0aW9uc0J1dHRvbiwge30pLCBqc3goU2NyZWVuU2hhcmVCdXR0b24sIHt9KSwganN4KFJlY29yZENhbGxCdXR0b24sIHt9KSwganN4KENhbmNlbENhbGxCdXR0b24sIHsgb25MZWF2ZTogb25MZWF2ZSB9KV0gfSkpO1xuXG5DaGFydC5yZWdpc3RlcihDYXRlZ29yeVNjYWxlLCBMaW5lYXJTY2FsZSwgTGluZUVsZW1lbnQsIFBvaW50RWxlbWVudCk7XG5jb25zdCBDYWxsU3RhdHNMYXRlbmN5Q2hhcnQgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHZhbHVlcyB9ID0gcHJvcHM7XG4gICAgbGV0IG1heCA9IDA7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgbGFiZWxzOiB2YWx1ZXMubWFwKChwb2ludCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHBvaW50LnggKiAxMDAwKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtkYXRlLmdldEhvdXJzKCl9OiR7ZGF0ZS5nZXRNaW51dGVzKCl9YDtcbiAgICAgICAgfSksXG4gICAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YTogdmFsdWVzLm1hcCgocG9pbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB5IH0gPSBwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzAwZTJhMScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzAwZTJhMScsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH07XG4gICAgY29uc3Qgb3B0aW9ucyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgICAgICAgIGxpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb2ludDoge1xuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmlnaHQnLFxuICAgICAgICAgICAgICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgICAgIG1heDogTWF0aC5tYXgoMTgwLCBNYXRoLmNlaWwoKG1heCArIDEwKSAvIDEwKSAqIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzk3OWNhMCcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogMzAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSwgW21heF0pO1xuICAgIHJldHVybiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0cy1saW5lLWNoYXJ0LWNvbnRhaW5lclwiLCBjaGlsZHJlbjoganN4KExpbmUsIHsgb3B0aW9uczogb3B0aW9ucywgZGF0YTogZGF0YSwgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0c19fbGF0ZW5jeWNoYXJ0XCIgfSkgfSkpO1xufTtcblxudmFyIFN0YXR1c2VzO1xuKGZ1bmN0aW9uIChTdGF0dXNlcykge1xuICAgIFN0YXR1c2VzW1wiR09PRFwiXSA9IFwiR29vZFwiO1xuICAgIFN0YXR1c2VzW1wiT0tcIl0gPSBcIk9rXCI7XG4gICAgU3RhdHVzZXNbXCJCQURcIl0gPSBcIkJhZFwiO1xufSkoU3RhdHVzZXMgfHwgKFN0YXR1c2VzID0ge30pKTtcbmNvbnN0IHN0YXRzU3RhdHVzID0gKHsgdmFsdWUsIGxvd0JvdW5kLCBoaWdoQm91bmQsIH0pID0+IHtcbiAgICBpZiAodmFsdWUgPD0gbG93Qm91bmQpIHtcbiAgICAgICAgcmV0dXJuIFN0YXR1c2VzLkdPT0Q7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA+PSBsb3dCb3VuZCAmJiB2YWx1ZSA8PSBoaWdoQm91bmQpIHtcbiAgICAgICAgcmV0dXJuIFN0YXR1c2VzLk9LO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPj0gaGlnaEJvdW5kKSB7XG4gICAgICAgIHJldHVybiBTdGF0dXNlcy5CQUQ7XG4gICAgfVxuICAgIHJldHVybiBTdGF0dXNlcy5HT09EO1xufTtcbmNvbnN0IENhbGxTdGF0cyA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgbGF0ZW5jeUxvd0JvdW5kID0gNzUsIGxhdGVuY3lIaWdoQm91bmQgPSA0MDAgfSA9IHByb3BzO1xuICAgIGNvbnN0IFtsYXRlbmN5QnVmZmVyLCBzZXRMYXRlbmN5QnVmZmVyXSA9IHVzZVN0YXRlKCgpID0+IHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IDIwIH0sIChfLCBpKSA9PiAoeyB4OiBub3cgKyBpLCB5OiAwIH0pKTtcbiAgICB9KTtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCBbcHVibGlzaEJpdHJhdGUsIHNldFB1Ymxpc2hCaXRyYXRlXSA9IHVzZVN0YXRlKCctJyk7XG4gICAgY29uc3QgW3N1YnNjcmliZUJpdHJhdGUsIHNldFN1YnNjcmliZUJpdHJhdGVdID0gdXNlU3RhdGUoJy0nKTtcbiAgICBjb25zdCBwcmV2aW91c1N0YXRzID0gdXNlUmVmKCk7XG4gICAgY29uc3QgeyB1c2VDYWxsU3RhdHNSZXBvcnQgfSA9IHVzZUNhbGxTdGF0ZUhvb2tzKCk7XG4gICAgY29uc3QgY2FsbFN0YXRzUmVwb3J0ID0gdXNlQ2FsbFN0YXRzUmVwb3J0KCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFjYWxsU3RhdHNSZXBvcnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghcHJldmlvdXNTdGF0cy5jdXJyZW50KSB7XG4gICAgICAgICAgICBwcmV2aW91c1N0YXRzLmN1cnJlbnQgPSBjYWxsU3RhdHNSZXBvcnQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldmlvdXNDYWxsU3RhdHNSZXBvcnQgPSBwcmV2aW91c1N0YXRzLmN1cnJlbnQ7XG4gICAgICAgIHNldFB1Ymxpc2hCaXRyYXRlKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjYWxjdWxhdGVQdWJsaXNoQml0cmF0ZShwcmV2aW91c0NhbGxTdGF0c1JlcG9ydCwgY2FsbFN0YXRzUmVwb3J0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldFN1YnNjcmliZUJpdHJhdGUoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGN1bGF0ZVN1YnNjcmliZUJpdHJhdGUocHJldmlvdXNDYWxsU3RhdHNSZXBvcnQsIGNhbGxTdGF0c1JlcG9ydCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRMYXRlbmN5QnVmZmVyKChsYXRlbmN5QnVmKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdMYXRlbmN5QnVmZmVyID0gbGF0ZW5jeUJ1Zi5zbGljZSgtMTkpO1xuICAgICAgICAgICAgbmV3TGF0ZW5jeUJ1ZmZlci5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBjYWxsU3RhdHNSZXBvcnQudGltZXN0YW1wLFxuICAgICAgICAgICAgICAgIHk6IGNhbGxTdGF0c1JlcG9ydC5wdWJsaXNoZXJTdGF0cy5hdmVyYWdlUm91bmRUcmlwVGltZUluTXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZXdMYXRlbmN5QnVmZmVyO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJldmlvdXNTdGF0cy5jdXJyZW50ID0gY2FsbFN0YXRzUmVwb3J0O1xuICAgIH0sIFtjYWxsU3RhdHNSZXBvcnRdKTtcbiAgICBjb25zdCBsYXRlbmN5Q29tcGFyaXNvbiA9IHtcbiAgICAgICAgbG93Qm91bmQ6IGxhdGVuY3lMb3dCb3VuZCxcbiAgICAgICAgaGlnaEJvdW5kOiBsYXRlbmN5SGlnaEJvdW5kLFxuICAgICAgICB2YWx1ZTogY2FsbFN0YXRzUmVwb3J0Py5wdWJsaXNoZXJTdGF0cy5hdmVyYWdlUm91bmRUcmlwVGltZUluTXMgfHwgMCxcbiAgICB9O1xuICAgIHJldHVybiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0c1wiLCBjaGlsZHJlbjogY2FsbFN0YXRzUmVwb3J0ICYmIChqc3hzKEZyYWdtZW50LCB7IGNoaWxkcmVuOiBbanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtc3RhdHNfX2hlYWRlclwiLCBjaGlsZHJlbjogW2pzeHMoXCJoM1wiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtc3RhdHNfX2hlYWRpbmdcIiwgY2hpbGRyZW46IFtqc3goSWNvbiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXN0YXRzX19pY29uXCIsIGljb246IFwiY2FsbC1sYXRlbmN5XCIgfSksIHQoJ0NhbGwgTGF0ZW5jeScpXSB9KSwganN4KFwicFwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtc3RhdHNfX2Rlc2NyaXB0aW9uXCIsIGNoaWxkcmVuOiB0KCdWZXJ5IGhpZ2ggbGF0ZW5jeSB2YWx1ZXMgbWF5IHJlZHVjZSBjYWxsIHF1YWxpdHksIGNhdXNlIGxhZywgYW5kIG1ha2UgdGhlIGNhbGwgbGVzcyBlbmpveWFibGUuJykgfSldIH0pLCBqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXN0YXRzX19sYXRlbmN5Y2hhcnRcIiwgY2hpbGRyZW46IGpzeChDYWxsU3RhdHNMYXRlbmN5Q2hhcnQsIHsgdmFsdWVzOiBsYXRlbmN5QnVmZmVyIH0pIH0pLCBqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0c19faGVhZGVyXCIsIGNoaWxkcmVuOiBbanN4cyhcImgzXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0c19faGVhZGluZ1wiLCBjaGlsZHJlbjogW2pzeChJY29uLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtc3RhdHNfX2ljb25cIiwgaWNvbjogXCJuZXR3b3JrLXF1YWxpdHlcIiB9KSwgdCgnQ2FsbCBwZXJmb3JtYW5jZScpXSB9KSwganN4KFwicFwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtc3RhdHNfX2Rlc2NyaXB0aW9uXCIsIGNoaWxkcmVuOiB0KCdSZXZpZXcgdGhlIGtleSBkYXRhIHBvaW50cyBiZWxvdyB0byBhc3Nlc3MgY2FsbCBwZXJmb3JtYW5jZScpIH0pXSB9KSwganN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtc3RhdHNfX2NhcmQtY29udGFpbmVyXCIsIGNoaWxkcmVuOiBbanN4KFN0YXRDYXJkLCB7IGxhYmVsOiB0KCdSZWdpb24nKSwgdmFsdWU6IGNhbGxTdGF0c1JlcG9ydC5kYXRhY2VudGVyIH0pLCBqc3goU3RhdENhcmQsIHsgbGFiZWw6IHQoJ0xhdGVuY3knKSwgdmFsdWU6IGAke2NhbGxTdGF0c1JlcG9ydC5wdWJsaXNoZXJTdGF0cy5hdmVyYWdlUm91bmRUcmlwVGltZUluTXN9IG1zLmAsIGNvbXBhcmlzb246IGxhdGVuY3lDb21wYXJpc29uIH0pLCBqc3goU3RhdENhcmQsIHsgbGFiZWw6IHQoJ1JlY2VpdmUgaml0dGVyJyksIHZhbHVlOiBgJHtjYWxsU3RhdHNSZXBvcnQuc3Vic2NyaWJlclN0YXRzLmF2ZXJhZ2VKaXR0ZXJJbk1zfSBtcy5gLCBjb21wYXJpc29uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmxhdGVuY3lDb21wYXJpc29uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2FsbFN0YXRzUmVwb3J0LnN1YnNjcmliZXJTdGF0cy5hdmVyYWdlSml0dGVySW5NcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IH0pLCBqc3goU3RhdENhcmQsIHsgbGFiZWw6IHQoJ1B1Ymxpc2ggaml0dGVyJyksIHZhbHVlOiBgJHtjYWxsU3RhdHNSZXBvcnQucHVibGlzaGVyU3RhdHMuYXZlcmFnZUppdHRlckluTXN9IG1zLmAsIGNvbXBhcmlzb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ubGF0ZW5jeUNvbXBhcmlzb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjYWxsU3RhdHNSZXBvcnQucHVibGlzaGVyU3RhdHMuYXZlcmFnZUppdHRlckluTXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB9KSwganN4KFN0YXRDYXJkLCB7IGxhYmVsOiB0KCdQdWJsaXNoIHJlc29sdXRpb24nKSwgdmFsdWU6IHRvRnJhbWVTaXplKGNhbGxTdGF0c1JlcG9ydC5wdWJsaXNoZXJTdGF0cykgfSksIGpzeChTdGF0Q2FyZCwgeyBsYWJlbDogdCgnUHVibGlzaCBxdWFsaXR5IGRyb3AgcmVhc29uJyksIHZhbHVlOiBjYWxsU3RhdHNSZXBvcnQucHVibGlzaGVyU3RhdHMucXVhbGl0eUxpbWl0YXRpb25SZWFzb25zIH0pLCBqc3goU3RhdENhcmQsIHsgbGFiZWw6IHQoJ1JlY2VpdmluZyByZXNvbHV0aW9uJyksIHZhbHVlOiB0b0ZyYW1lU2l6ZShjYWxsU3RhdHNSZXBvcnQuc3Vic2NyaWJlclN0YXRzKSB9KSwganN4KFN0YXRDYXJkLCB7IGxhYmVsOiB0KCdSZWNlaXZlIHF1YWxpdHkgZHJvcCByZWFzb24nKSwgdmFsdWU6IGNhbGxTdGF0c1JlcG9ydC5zdWJzY3JpYmVyU3RhdHMucXVhbGl0eUxpbWl0YXRpb25SZWFzb25zIH0pLCBqc3goU3RhdENhcmQsIHsgbGFiZWw6IHQoJ1B1Ymxpc2ggYml0cmF0ZScpLCB2YWx1ZTogcHVibGlzaEJpdHJhdGUgfSksIGpzeChTdGF0Q2FyZCwgeyBsYWJlbDogdCgnUmVjZWl2aW5nIGJpdHJhdGUnKSwgdmFsdWU6IHN1YnNjcmliZUJpdHJhdGUgfSldIH0pXSB9KSkgfSkpO1xufTtcbmNvbnN0IFN0YXRDYXJkRXhwbGFuYXRpb24gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGRlc2NyaXB0aW9uIH0gPSBwcm9wcztcbiAgICBjb25zdCBbaXNPcGVuLCBzZXRJc09wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IHsgcmVmcywgZmxvYXRpbmdTdHlsZXMsIGNvbnRleHQgfSA9IHVzZUZsb2F0aW5nKHtcbiAgICAgICAgb3BlbjogaXNPcGVuLFxuICAgICAgICBvbk9wZW5DaGFuZ2U6IHNldElzT3BlbixcbiAgICB9KTtcbiAgICBjb25zdCBob3ZlciA9IHVzZUhvdmVyKGNvbnRleHQpO1xuICAgIGNvbnN0IHsgZ2V0UmVmZXJlbmNlUHJvcHMsIGdldEZsb2F0aW5nUHJvcHMgfSA9IHVzZUludGVyYWN0aW9ucyhbaG92ZXJdKTtcbiAgICByZXR1cm4gKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLWV4cGxhbmF0aW9uXCIsIHJlZjogcmVmcy5zZXRSZWZlcmVuY2UsIC4uLmdldFJlZmVyZW5jZVByb3BzKCksIGNoaWxkcmVuOiBqc3goSWNvbiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLWV4cGxhbmF0aW9uX19pY29uXCIsIGljb246IFwiaW5mb1wiIH0pIH0pLCBpc09wZW4gJiYgKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtZXhwbGFuYXRpb25fX2Rlc2NyaXB0aW9uXCIsIHJlZjogcmVmcy5zZXRGbG9hdGluZywgc3R5bGU6IGZsb2F0aW5nU3R5bGVzLCAuLi5nZXRGbG9hdGluZ1Byb3BzKCksIGNoaWxkcmVuOiBkZXNjcmlwdGlvbiB9KSldIH0pKTtcbn07XG5jb25zdCBTdGF0c1RhZyA9ICh7IGNoaWxkcmVuLCBzdGF0dXMgPSBTdGF0dXNlcy5HT09ELCB9KSA9PiB7XG4gICAgcmV0dXJuIChqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fY2FsbC1zdGF0c19fdGFnJywge1xuICAgICAgICAgICAgJ3N0ci12aWRlb19fY2FsbC1zdGF0c19fdGFnLS1nb29kJzogc3RhdHVzID09PSBTdGF0dXNlcy5HT09ELFxuICAgICAgICAgICAgJ3N0ci12aWRlb19fY2FsbC1zdGF0c19fdGFnLS1vayc6IHN0YXR1cyA9PT0gU3RhdHVzZXMuT0ssXG4gICAgICAgICAgICAnc3RyLXZpZGVvX19jYWxsLXN0YXRzX190YWctLWJhZCc6IHN0YXR1cyA9PT0gU3RhdHVzZXMuQkFELFxuICAgICAgICB9KSwgY2hpbGRyZW46IGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtc3RhdHNfX3RhZ19fdGV4dFwiLCBjaGlsZHJlbjogY2hpbGRyZW4gfSkgfSkpO1xufTtcbmNvbnN0IFN0YXRDYXJkID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBsYWJlbCwgdmFsdWUsIGRlc2NyaXB0aW9uLCBjb21wYXJpc29uIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCBzdGF0dXMgPSBjb21wYXJpc29uID8gc3RhdHNTdGF0dXMoY29tcGFyaXNvbikgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIChqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0c19fY2FyZFwiLCBjaGlsZHJlbjogW2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXN0YXRzX19jYXJkLWNvbnRlbnRcIiwgY2hpbGRyZW46IFtqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0c19fY2FyZC1sYWJlbFwiLCBjaGlsZHJlbjogW2xhYmVsLCBkZXNjcmlwdGlvbiAmJiBqc3goU3RhdENhcmRFeHBsYW5hdGlvbiwgeyBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24gfSldIH0pLCBqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXN0YXRzX19jYXJkLXZhbHVlXCIsIGNoaWxkcmVuOiB2YWx1ZSB9KV0gfSksIGNvbXBhcmlzb24gJiYgc3RhdHVzICYmIGpzeChTdGF0c1RhZywgeyBzdGF0dXM6IHN0YXR1cywgY2hpbGRyZW46IHQoc3RhdHVzKSB9KV0gfSkpO1xufTtcbmNvbnN0IHRvRnJhbWVTaXplID0gKHN0YXRzKSA9PiB7XG4gICAgY29uc3QgeyBoaWdoZXN0RnJhbWVXaWR0aDogdywgaGlnaGVzdEZyYW1lSGVpZ2h0OiBoLCBoaWdoZXN0RnJhbWVzUGVyU2Vjb25kOiBmcHMsIH0gPSBzdGF0cztcbiAgICBsZXQgc2l6ZSA9IGAtYDtcbiAgICBpZiAodyAmJiBoKSB7XG4gICAgICAgIHNpemUgPSBgJHt3fXgke2h9YDtcbiAgICAgICAgaWYgKGZwcykge1xuICAgICAgICAgICAgc2l6ZSArPSBgQCR7ZnBzfWZwcy5gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaXplO1xufTtcbmNvbnN0IGNhbGN1bGF0ZVB1Ymxpc2hCaXRyYXRlID0gKHByZXZpb3VzQ2FsbFN0YXRzUmVwb3J0LCBjYWxsU3RhdHNSZXBvcnQpID0+IHtcbiAgICBjb25zdCB7IHB1Ymxpc2hlclN0YXRzOiB7IHRvdGFsQnl0ZXNTZW50OiBwcmV2aW91c1RvdGFsQnl0ZXNTZW50LCB0aW1lc3RhbXA6IHByZXZpb3VzVGltZXN0YW1wLCB9LCB9ID0gcHJldmlvdXNDYWxsU3RhdHNSZXBvcnQ7XG4gICAgY29uc3QgeyBwdWJsaXNoZXJTdGF0czogeyB0b3RhbEJ5dGVzU2VudCwgdGltZXN0YW1wIH0sIH0gPSBjYWxsU3RhdHNSZXBvcnQ7XG4gICAgY29uc3QgYnl0ZXNTZW50ID0gdG90YWxCeXRlc1NlbnQgLSBwcmV2aW91c1RvdGFsQnl0ZXNTZW50O1xuICAgIGNvbnN0IHRpbWVFbGFwc2VkID0gdGltZXN0YW1wIC0gcHJldmlvdXNUaW1lc3RhbXA7XG4gICAgcmV0dXJuIGAkeygoYnl0ZXNTZW50ICogOCkgLyB0aW1lRWxhcHNlZCkudG9GaXhlZCgyKX0ga2Jwc2A7XG59O1xuY29uc3QgY2FsY3VsYXRlU3Vic2NyaWJlQml0cmF0ZSA9IChwcmV2aW91c0NhbGxTdGF0c1JlcG9ydCwgY2FsbFN0YXRzUmVwb3J0KSA9PiB7XG4gICAgY29uc3QgeyBzdWJzY3JpYmVyU3RhdHM6IHsgdG90YWxCeXRlc1JlY2VpdmVkOiBwcmV2aW91c1RvdGFsQnl0ZXNSZWNlaXZlZCwgdGltZXN0YW1wOiBwcmV2aW91c1RpbWVzdGFtcCwgfSwgfSA9IHByZXZpb3VzQ2FsbFN0YXRzUmVwb3J0O1xuICAgIGNvbnN0IHsgc3Vic2NyaWJlclN0YXRzOiB7IHRvdGFsQnl0ZXNSZWNlaXZlZCwgdGltZXN0YW1wIH0sIH0gPSBjYWxsU3RhdHNSZXBvcnQ7XG4gICAgY29uc3QgYnl0ZXNSZWNlaXZlZCA9IHRvdGFsQnl0ZXNSZWNlaXZlZCAtIHByZXZpb3VzVG90YWxCeXRlc1JlY2VpdmVkO1xuICAgIGNvbnN0IHRpbWVFbGFwc2VkID0gdGltZXN0YW1wIC0gcHJldmlvdXNUaW1lc3RhbXA7XG4gICAgcmV0dXJuIGAkeygoYnl0ZXNSZWNlaXZlZCAqIDgpIC8gdGltZUVsYXBzZWQpLnRvRml4ZWQoMil9IGticHNgO1xufTtcblxuY29uc3QgQ2FsbFN0YXRzQnV0dG9uID0gKCkgPT4gKGpzeChNZW51VG9nZ2xlLCB7IHBsYWNlbWVudDogXCJ0b3AtZW5kXCIsIFRvZ2dsZUJ1dHRvbjogVG9nZ2xlTWVudUJ1dHRvbiwgY2hpbGRyZW46IGpzeChDYWxsU3RhdHMsIHt9KSB9KSk7XG5jb25zdCBUb2dnbGVNZW51QnV0dG9uID0gZm9yd2FyZFJlZihmdW5jdGlvbiBUb2dnbGVNZW51QnV0dG9uKHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCB7IGNhcHRpb24sIG1lbnVTaG93biB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIChqc3goQ29tcG9zaXRlQnV0dG9uLCB7IHJlZjogcmVmLCBhY3RpdmU6IG1lbnVTaG93biwgY2FwdGlvbjogY2FwdGlvbiwgdGl0bGU6IGNhcHRpb24gfHwgdCgnU3RhdGlzdGljcycpLCBcImRhdGEtdGVzdGlkXCI6IFwic3RhdHMtYnV0dG9uXCIsIGNoaWxkcmVuOiBqc3goSWNvbiwgeyBpY29uOiBcInN0YXRzXCIgfSkgfSkpO1xufSk7XG5cbmNvbnN0IFRvZ2dsZUF1ZGlvT3V0cHV0QnV0dG9uID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgeyBjYXB0aW9uLCBNZW51ID0gRGV2aWNlU2VsZWN0b3JBdWRpb091dHB1dCwgbWVudVBsYWNlbWVudCA9ICd0b3AnLCBvbk1lbnVUb2dnbGUsIH0gPSBwcm9wcztcbiAgICBjb25zdCBbdG9vbHRpcERpc2FibGVkLCBzZXRUb29sdGlwRGlzYWJsZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIHJldHVybiAoanN4KFdpdGhUb29sdGlwLCB7IHRpdGxlOiBjYXB0aW9uIHx8IHQoJ1NwZWFrZXJzJyksIHRvb2x0aXBEaXNhYmxlZDogdG9vbHRpcERpc2FibGVkLCBjaGlsZHJlbjoganN4KENvbXBvc2l0ZUJ1dHRvbiwgeyBNZW51OiBNZW51LCBtZW51UGxhY2VtZW50OiBtZW51UGxhY2VtZW50LCBjYXB0aW9uOiBjYXB0aW9uLCBcImRhdGEtdGVzdGlkXCI6IFwiYXVkaW8tb3V0cHV0LWJ1dHRvblwiLCBvbk1lbnVUb2dnbGU6IChzaG93bikgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRvb2x0aXBEaXNhYmxlZChzaG93bik7XG4gICAgICAgICAgICAgICAgb25NZW51VG9nZ2xlPy4oc2hvd24pO1xuICAgICAgICAgICAgfSwgY2hpbGRyZW46IGpzeChJY29uLCB7IGljb246IFwic3BlYWtlclwiIH0pIH0pIH0pKTtcbn07XG5cbmNvbnN0IEJsb2NrZWRVc2VyTGlzdGluZyA9ICh7IGRhdGEgfSkgPT4ge1xuICAgIGlmICghZGF0YS5sZW5ndGgpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiAoanN4KEZyYWdtZW50LCB7IGNoaWxkcmVuOiBqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wYXJ0aWNpcGFudC1saXN0aW5nXCIsIGNoaWxkcmVuOiBkYXRhLm1hcCgodXNlcklkKSA9PiAoanN4KEJsb2NrZWRVc2VyTGlzdGluZ0l0ZW0sIHsgdXNlcklkOiB1c2VySWQgfSwgdXNlcklkKSkpIH0pIH0pKTtcbn07XG5jb25zdCBCbG9ja2VkVXNlckxpc3RpbmdJdGVtID0gKHsgdXNlcklkIH0pID0+IHtcbiAgICBjb25zdCBjYWxsID0gdXNlQ2FsbCgpO1xuICAgIGNvbnN0IHVuYmxvY2tVc2VyQ2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAodXNlcklkKVxuICAgICAgICAgICAgY2FsbD8udW5ibG9ja1VzZXIodXNlcklkKTtcbiAgICB9O1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3RpbmctaXRlbVwiLCBjaGlsZHJlbjogW2pzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3RpbmctaXRlbV9fZGlzcGxheS1uYW1lXCIsIGNoaWxkcmVuOiB1c2VySWQgfSksIGpzeChSZXN0cmljdGVkLCB7IHJlcXVpcmVkR3JhbnRzOiBbT3duQ2FwYWJpbGl0eS5CTE9DS19VU0VSU10sIGNoaWxkcmVuOiBqc3goVGV4dEJ1dHRvbiwgeyBvbkNsaWNrOiB1bmJsb2NrVXNlckNsaWNrSGFuZGxlciwgY2hpbGRyZW46IFwiVW5ibG9ja1wiIH0pIH0pXSB9KSk7XG59O1xuXG5jb25zdCBDYWxsUGFydGljaXBhbnRMaXN0SGVhZGVyID0gKHsgb25DbG9zZSwgfSkgPT4ge1xuICAgIGNvbnN0IHsgdXNlUGFydGljaXBhbnRzLCB1c2VBbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50IH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHVzZVBhcnRpY2lwYW50cygpO1xuICAgIGNvbnN0IGFub255bW91c1BhcnRpY2lwYW50Q291bnQgPSB1c2VBbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50KCk7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgcmV0dXJuIChqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcGFydGljaXBhbnQtbGlzdC1oZWFkZXJcIiwgY2hpbGRyZW46IFtqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcGFydGljaXBhbnQtbGlzdC1oZWFkZXJfX3RpdGxlXCIsIGNoaWxkcmVuOiBbdCgnUGFydGljaXBhbnRzJyksICcgJywganN4cyhcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wYXJ0aWNpcGFudC1saXN0LWhlYWRlcl9fdGl0bGUtY291bnRcIiwgY2hpbGRyZW46IFtcIltcIiwgcGFydGljaXBhbnRzLmxlbmd0aCwgXCJdXCJdIH0pLCBhbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50ID4gMCAmJiAoanN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3QtaGVhZGVyX190aXRsZS1hbm9ueW1vdXNcIiwgY2hpbGRyZW46IHQoJ0Fub255bW91cycsIHsgY291bnQ6IGFub255bW91c1BhcnRpY2lwYW50Q291bnQgfSkgfSkpXSB9KSwganN4KEljb25CdXR0b24sIHsgb25DbGljazogb25DbG9zZSwgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcGFydGljaXBhbnQtbGlzdC1oZWFkZXJfX2Nsb3NlLWJ1dHRvblwiLCBpY29uOiBcImNsb3NlXCIgfSldIH0pKTtcbn07XG5cbmNvbnN0IENhbGxQYXJ0aWNpcGFudExpc3RpbmdJdGVtID0gKHsgcGFydGljaXBhbnQsIERpc3BsYXlOYW1lID0gRGVmYXVsdERpc3BsYXlOYW1lLCB9KSA9PiB7XG4gICAgY29uc3QgaXNBdWRpb09uID0gaGFzQXVkaW8ocGFydGljaXBhbnQpO1xuICAgIGNvbnN0IGlzVmlkZW9PbiA9IGhhc1ZpZGVvKHBhcnRpY2lwYW50KTtcbiAgICBjb25zdCBpc1Bpbm5lZE9uID0gaXNQaW5uZWQocGFydGljaXBhbnQpO1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3RpbmctaXRlbVwiLCBjaGlsZHJlbjogW2pzeChBdmF0YXIsIHsgbmFtZTogcGFydGljaXBhbnQubmFtZSwgaW1hZ2VTcmM6IHBhcnRpY2lwYW50LmltYWdlIH0pLCBqc3goRGlzcGxheU5hbWUsIHsgcGFydGljaXBhbnQ6IHBhcnRpY2lwYW50IH0pLCBqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcGFydGljaXBhbnQtbGlzdGluZy1pdGVtX19tZWRpYS1pbmRpY2F0b3ItZ3JvdXBcIiwgY2hpbGRyZW46IFtqc3goTWVkaWFJbmRpY2F0b3IsIHsgdGl0bGU6IGlzQXVkaW9PbiA/IHQoJ01pY3JvcGhvbmUgb24nKSA6IHQoJ01pY3JvcGhvbmUgb2ZmJyksIGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19wYXJ0aWNpcGFudC1saXN0aW5nLWl0ZW1fX2ljb24nLCBgc3RyLXZpZGVvX19wYXJ0aWNpcGFudC1saXN0aW5nLWl0ZW1fX2ljb24tJHtpc0F1ZGlvT24gPyAnbWljJyA6ICdtaWMtb2ZmJ31gKSB9KSwganN4KE1lZGlhSW5kaWNhdG9yLCB7IHRpdGxlOiBpc1ZpZGVvT24gPyB0KCdDYW1lcmEgb24nKSA6IHQoJ0NhbWVyYSBvZmYnKSwgY2xhc3NOYW1lOiBjbHN4KCdzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3RpbmctaXRlbV9faWNvbicsIGBzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3RpbmctaXRlbV9faWNvbi0ke2lzVmlkZW9PbiA/ICdjYW1lcmEnIDogJ2NhbWVyYS1vZmYnfWApIH0pLCBpc1Bpbm5lZE9uICYmIChqc3goTWVkaWFJbmRpY2F0b3IsIHsgdGl0bGU6IHQoJ1Bpbm5lZCcpLCBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fcGFydGljaXBhbnQtbGlzdGluZy1pdGVtX19pY29uJywgJ3N0ci12aWRlb19fcGFydGljaXBhbnQtbGlzdGluZy1pdGVtX19pY29uLXBpbm5lZCcpIH0pKSwganN4KE1lbnVUb2dnbGUsIHsgcGxhY2VtZW50OiBcImJvdHRvbS1lbmRcIiwgVG9nZ2xlQnV0dG9uOiBUb2dnbGVCdXR0b24kMiwgY2hpbGRyZW46IGpzeChQYXJ0aWNpcGFudFZpZXdDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB7IHBhcnRpY2lwYW50LCB0cmFja1R5cGU6ICdub25lJyB9LCBjaGlsZHJlbjoganN4KFBhcnRpY2lwYW50QWN0aW9uc0NvbnRleHRNZW51LCB7fSkgfSkgfSldIH0pXSB9KSk7XG59O1xuY29uc3QgTWVkaWFJbmRpY2F0b3IgPSAocHJvcHMpID0+IChqc3goV2l0aFRvb2x0aXAsIHsgLi4ucHJvcHMgfSkpO1xuY29uc3QgRGVmYXVsdERpc3BsYXlOYW1lID0gKHsgcGFydGljaXBhbnQgfSkgPT4ge1xuICAgIGNvbnN0IGNvbm5lY3RlZFVzZXIgPSB1c2VDb25uZWN0ZWRVc2VyKCk7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgbWVGbGFnID0gcGFydGljaXBhbnQudXNlcklkID09PSBjb25uZWN0ZWRVc2VyPy5pZCA/IHQoJ01lJykgOiAnJztcbiAgICBjb25zdCBuYW1lT3JJZCA9IHBhcnRpY2lwYW50Lm5hbWUgfHwgcGFydGljaXBhbnQudXNlcklkIHx8IHQoJ1Vua25vd24nKTtcbiAgICBsZXQgZGlzcGxheU5hbWU7XG4gICAgaWYgKCFwYXJ0aWNpcGFudC5uYW1lKSB7XG4gICAgICAgIGRpc3BsYXlOYW1lID0gbWVGbGFnIHx8IG5hbWVPcklkIHx8IHQoJ1Vua25vd24nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobWVGbGFnKSB7XG4gICAgICAgIGRpc3BsYXlOYW1lID0gYCR7bmFtZU9ySWR9ICgke21lRmxhZ30pYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRpc3BsYXlOYW1lID0gbmFtZU9ySWQ7XG4gICAgfVxuICAgIHJldHVybiAoanN4KFdpdGhUb29sdGlwLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3RpbmctaXRlbV9fZGlzcGxheS1uYW1lXCIsIHRpdGxlOiBkaXNwbGF5TmFtZSwgY2hpbGRyZW46IGRpc3BsYXlOYW1lIH0pKTtcbn07XG5jb25zdCBUb2dnbGVCdXR0b24kMiA9IGZvcndhcmRSZWYoZnVuY3Rpb24gVG9nZ2xlQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4ganN4KEljb25CdXR0b24sIHsgZW5hYmxlZDogcHJvcHMubWVudVNob3duLCBpY29uOiBcImVsbGlwc2lzXCIsIHJlZjogcmVmIH0pO1xufSk7XG5cbmNvbnN0IENhbGxQYXJ0aWNpcGFudExpc3RpbmcgPSAoeyBkYXRhLCB9KSA9PiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcGFydGljaXBhbnQtbGlzdGluZ1wiLCBjaGlsZHJlbjogZGF0YS5tYXAoKHBhcnRpY2lwYW50KSA9PiAoanN4KENhbGxQYXJ0aWNpcGFudExpc3RpbmdJdGVtLCB7IHBhcnRpY2lwYW50OiBwYXJ0aWNpcGFudCB9LCBwYXJ0aWNpcGFudC5zZXNzaW9uSWQpKSkgfSkpO1xuXG5jb25zdCBFbXB0eVBhcnRpY2lwYW50U2VhcmNoTGlzdCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICByZXR1cm4gKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3QtLWVtcHR5XCIsIGNoaWxkcmVuOiB0KCdObyBwYXJ0aWNpcGFudHMgZm91bmQnKSB9KSk7XG59O1xuXG5jb25zdCBTZWFyY2hJbnB1dCA9ICh7IGV4aXRTZWFyY2gsIGlzQWN0aXZlLCAuLi5yZXN0IH0pID0+IHtcbiAgICBjb25zdCBbaW5wdXRFbGVtZW50LCBzZXRJbnB1dEVsZW1lbnRdID0gdXNlU3RhdGUobnVsbCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFpbnB1dEVsZW1lbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUua2V5LnRvTG93ZXJDYXNlKCkgPT09ICdlc2NhcGUnKVxuICAgICAgICAgICAgICAgIGV4aXRTZWFyY2goKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgICAgIH07XG4gICAgfSwgW2V4aXRTZWFyY2gsIGlucHV0RWxlbWVudF0pO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19zZWFyY2gtaW5wdXRfX2NvbnRhaW5lcicsIHtcbiAgICAgICAgICAgICdzdHItdmlkZW9fX3NlYXJjaC1pbnB1dF9fY29udGFpbmVyLS1hY3RpdmUnOiBpc0FjdGl2ZSxcbiAgICAgICAgfSksIGNoaWxkcmVuOiBbanN4KFwiaW5wdXRcIiwgeyBwbGFjZWhvbGRlcjogXCJTZWFyY2hcIiwgLi4ucmVzdCwgcmVmOiBzZXRJbnB1dEVsZW1lbnQgfSksIGlzQWN0aXZlID8gKGpzeChcImJ1dHRvblwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NlYXJjaC1pbnB1dF9fY2xlYXItYnRuXCIsIG9uQ2xpY2s6IGV4aXRTZWFyY2gsIGNoaWxkcmVuOiBqc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fc2VhcmNoLWlucHV0X19pY29uLS1hY3RpdmVcIiB9KSB9KSkgOiAoanN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NlYXJjaC1pbnB1dF9faWNvblwiIH0pKV0gfSkpO1xufTtcblxuY29uc3QgU2VhcmNoUmVzdWx0cyA9ICh7IEVtcHR5U2VhcmNoUmVzdWx0Q29tcG9uZW50LCBMb2FkaW5nSW5kaWNhdG9yOiBMb2FkaW5nSW5kaWNhdG9yJDEgPSBMb2FkaW5nSW5kaWNhdG9yLCBzZWFyY2hRdWVyeUluUHJvZ3Jlc3MsIHNlYXJjaFJlc3VsdHMsIFNlYXJjaFJlc3VsdExpc3QsIH0pID0+IHtcbiAgICBpZiAoc2VhcmNoUXVlcnlJblByb2dyZXNzKSB7XG4gICAgICAgIHJldHVybiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fc2VhcmNoLXJlc3VsdHMtLWxvYWRpbmdcIiwgY2hpbGRyZW46IGpzeChMb2FkaW5nSW5kaWNhdG9yJDEsIHt9KSB9KSk7XG4gICAgfVxuICAgIGlmICghc2VhcmNoUmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGpzeChFbXB0eVNlYXJjaFJlc3VsdENvbXBvbmVudCwge30pO1xuICAgIH1cbiAgICByZXR1cm4ganN4KFNlYXJjaFJlc3VsdExpc3QsIHsgZGF0YTogc2VhcmNoUmVzdWx0cyB9KTtcbn07XG5cbmNvbnN0IHVzZVNlYXJjaCA9ICh7IGRlYm91bmNlSW50ZXJ2YWwsIHNlYXJjaEZuLCBzZWFyY2hRdWVyeSA9ICcnLCB9KSA9PiB7XG4gICAgY29uc3QgW3NlYXJjaFJlc3VsdHMsIHNldFNlYXJjaFJlc3VsdHNdID0gdXNlU3RhdGUoW10pO1xuICAgIGNvbnN0IFtzZWFyY2hRdWVyeUluUHJvZ3Jlc3MsIHNldFNlYXJjaFF1ZXJ5SW5Qcm9ncmVzc10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFzZWFyY2hRdWVyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNldFNlYXJjaFF1ZXJ5SW5Qcm9ncmVzcyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRTZWFyY2hSZXN1bHRzKFtdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRTZWFyY2hRdWVyeUluUHJvZ3Jlc3ModHJ1ZSk7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHNlYXJjaEZuKHNlYXJjaFF1ZXJ5KTtcbiAgICAgICAgICAgICAgICBzZXRTZWFyY2hSZXN1bHRzKHJlc3VsdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBzZXRTZWFyY2hRdWVyeUluUHJvZ3Jlc3MoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkZWJvdW5jZUludGVydmFsKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgfTtcbiAgICB9LCBbZGVib3VuY2VJbnRlcnZhbCwgc2VhcmNoRm4sIHNlYXJjaFF1ZXJ5XSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VhcmNoUXVlcnlJblByb2dyZXNzLFxuICAgICAgICBzZWFyY2hSZXN1bHRzLFxuICAgIH07XG59O1xuXG5jb25zdCBVc2VyTGlzdFR5cGVzID0ge1xuICAgIGFjdGl2ZTogJ0FjdGl2ZSB1c2VycycsXG4gICAgYmxvY2tlZDogJ0Jsb2NrZWQgdXNlcnMnLFxufTtcbmNvbnN0IERFRkFVTFRfREVCT1VOQ0VfU0VBUkNIX0lOVEVSVkFMID0gMjAwO1xuY29uc3QgQ2FsbFBhcnRpY2lwYW50c0xpc3QgPSAoeyBvbkNsb3NlLCBhY3RpdmVVc2Vyc1NlYXJjaEZuLCBibG9ja2VkVXNlcnNTZWFyY2hGbiwgZGVib3VuY2VTZWFyY2hJbnRlcnZhbCwgfSkgPT4ge1xuICAgIGNvbnN0IFtzZWFyY2hRdWVyeSwgc2V0U2VhcmNoUXVlcnldID0gdXNlU3RhdGUoJycpO1xuICAgIGNvbnN0IFt1c2VyTGlzdFR5cGUsIHNldFVzZXJMaXN0VHlwZV0gPSB1c2VTdGF0ZSgnYWN0aXZlJyk7XG4gICAgY29uc3QgZXhpdFNlYXJjaCA9IHVzZUNhbGxiYWNrKCgpID0+IHNldFNlYXJjaFF1ZXJ5KCcnKSwgW10pO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3RcIiwgY2hpbGRyZW46IFtqc3goQ2FsbFBhcnRpY2lwYW50TGlzdEhlYWRlciwgeyBvbkNsb3NlOiBvbkNsb3NlIH0pLCBqc3goU2VhcmNoSW5wdXQsIHsgdmFsdWU6IHNlYXJjaFF1ZXJ5LCBvbkNoYW5nZTogKHsgY3VycmVudFRhcmdldCB9KSA9PiBzZXRTZWFyY2hRdWVyeShjdXJyZW50VGFyZ2V0LnZhbHVlKSwgZXhpdFNlYXJjaDogZXhpdFNlYXJjaCwgaXNBY3RpdmU6ICEhc2VhcmNoUXVlcnkgfSksIGpzeChDYWxsUGFydGljaXBhbnRMaXN0Q29udGVudEhlYWRlciwgeyB1c2VyTGlzdFR5cGU6IHVzZXJMaXN0VHlwZSwgc2V0VXNlckxpc3RUeXBlOiBzZXRVc2VyTGlzdFR5cGUgfSksIGpzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wYXJ0aWNpcGFudC1saXN0X19jb250ZW50XCIsIGNoaWxkcmVuOiBbdXNlckxpc3RUeXBlID09PSAnYWN0aXZlJyAmJiAoanN4KEFjdGl2ZVVzZXJzU2VhcmNoUmVzdWx0cywgeyBzZWFyY2hRdWVyeTogc2VhcmNoUXVlcnksIGFjdGl2ZVVzZXJzU2VhcmNoRm46IGFjdGl2ZVVzZXJzU2VhcmNoRm4sIGRlYm91bmNlU2VhcmNoSW50ZXJ2YWw6IGRlYm91bmNlU2VhcmNoSW50ZXJ2YWwgfSkpLCB1c2VyTGlzdFR5cGUgPT09ICdibG9ja2VkJyAmJiAoanN4KEJsb2NrZWRVc2Vyc1NlYXJjaFJlc3VsdHMsIHsgc2VhcmNoUXVlcnk6IHNlYXJjaFF1ZXJ5LCBibG9ja2VkVXNlcnNTZWFyY2hGbjogYmxvY2tlZFVzZXJzU2VhcmNoRm4sIGRlYm91bmNlU2VhcmNoSW50ZXJ2YWw6IGRlYm91bmNlU2VhcmNoSW50ZXJ2YWwgfSkpXSB9KV0gfSkpO1xufTtcbmNvbnN0IENhbGxQYXJ0aWNpcGFudExpc3RDb250ZW50SGVhZGVyID0gKHsgdXNlckxpc3RUeXBlLCBzZXRVc2VyTGlzdFR5cGUsIH0pID0+IHtcbiAgICBjb25zdCBjYWxsID0gdXNlQ2FsbCgpO1xuICAgIGNvbnN0IG11dGVBbGwgPSAoKSA9PiB7XG4gICAgICAgIGNhbGw/Lm11dGVBbGxVc2VycygnYXVkaW8nKTtcbiAgICB9O1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BhcnRpY2lwYW50LWxpc3RfX2NvbnRlbnQtaGVhZGVyXCIsIGNoaWxkcmVuOiBbanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcGFydGljaXBhbnQtbGlzdF9fY29udGVudC1oZWFkZXItdGl0bGVcIiwgY2hpbGRyZW46IHVzZXJMaXN0VHlwZSA9PT0gJ2FjdGl2ZScgJiYgKGpzeChSZXN0cmljdGVkLCB7IHJlcXVpcmVkR3JhbnRzOiBbT3duQ2FwYWJpbGl0eS5NVVRFX1VTRVJTXSwgaGFzUGVybWlzc2lvbnNPbmx5OiB0cnVlLCBjaGlsZHJlbjoganN4KFRleHRCdXR0b24sIHsgb25DbGljazogbXV0ZUFsbCwgY2hpbGRyZW46IFwiTXV0ZSBhbGxcIiB9KSB9KSkgfSksIGpzeChNZW51VG9nZ2xlLCB7IHBsYWNlbWVudDogXCJib3R0b20tZW5kXCIsIFRvZ2dsZUJ1dHRvbjogVG9nZ2xlQnV0dG9uJDEsIGNoaWxkcmVuOiBqc3goR2VuZXJpY01lbnUsIHsgY2hpbGRyZW46IE9iamVjdC5rZXlzKFVzZXJMaXN0VHlwZXMpLm1hcCgobHQpID0+IChqc3goR2VuZXJpY01lbnVCdXR0b25JdGVtLCB7IFwiYXJpYS1zZWxlY3RlZFwiOiBsdCA9PT0gdXNlckxpc3RUeXBlLCBvbkNsaWNrOiAoKSA9PiBzZXRVc2VyTGlzdFR5cGUobHQpLCBjaGlsZHJlbjogVXNlckxpc3RUeXBlc1tsdF0gfSwgbHQpKSkgfSkgfSldIH0pKTtcbn07XG5jb25zdCBBY3RpdmVVc2Vyc1NlYXJjaFJlc3VsdHMgPSAoeyBzZWFyY2hRdWVyeSwgYWN0aXZlVXNlcnNTZWFyY2hGbjogYWN0aXZlVXNlcnNTZWFyY2hGbkZyb21Qcm9wcywgZGVib3VuY2VTZWFyY2hJbnRlcnZhbCA9IERFRkFVTFRfREVCT1VOQ0VfU0VBUkNIX0lOVEVSVkFMLCB9KSA9PiB7XG4gICAgY29uc3QgeyB1c2VQYXJ0aWNpcGFudHMgfSA9IHVzZUNhbGxTdGF0ZUhvb2tzKCk7XG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdXNlUGFydGljaXBhbnRzKHsgc29ydEJ5OiBuYW1lIH0pO1xuICAgIGNvbnN0IGFjdGl2ZVVzZXJzU2VhcmNoRm4gPSB1c2VDYWxsYmFjaygocXVlcnlTdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgcXVlcnlSZWdFeHAgPSBuZXcgUmVnRXhwKHF1ZXJ5U3RyaW5nLCAnaScpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBhcnRpY2lwYW50cy5maWx0ZXIoKHBhcnRpY2lwYW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcGFydGljaXBhbnQubmFtZS5tYXRjaChxdWVyeVJlZ0V4cCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBbcGFydGljaXBhbnRzXSk7XG4gICAgY29uc3QgeyBzZWFyY2hRdWVyeUluUHJvZ3Jlc3MsIHNlYXJjaFJlc3VsdHMgfSA9IHVzZVNlYXJjaCh7XG4gICAgICAgIHNlYXJjaEZuOiBhY3RpdmVVc2Vyc1NlYXJjaEZuRnJvbVByb3BzID8/IGFjdGl2ZVVzZXJzU2VhcmNoRm4sXG4gICAgICAgIGRlYm91bmNlSW50ZXJ2YWw6IGRlYm91bmNlU2VhcmNoSW50ZXJ2YWwsXG4gICAgICAgIHNlYXJjaFF1ZXJ5LFxuICAgIH0pO1xuICAgIHJldHVybiAoanN4KFNlYXJjaFJlc3VsdHMsIHsgRW1wdHlTZWFyY2hSZXN1bHRDb21wb25lbnQ6IEVtcHR5UGFydGljaXBhbnRTZWFyY2hMaXN0LCBMb2FkaW5nSW5kaWNhdG9yOiBMb2FkaW5nSW5kaWNhdG9yLCBzZWFyY2hRdWVyeUluUHJvZ3Jlc3M6IHNlYXJjaFF1ZXJ5SW5Qcm9ncmVzcywgc2VhcmNoUmVzdWx0czogc2VhcmNoUXVlcnkgPyBzZWFyY2hSZXN1bHRzIDogcGFydGljaXBhbnRzLCBTZWFyY2hSZXN1bHRMaXN0OiBDYWxsUGFydGljaXBhbnRMaXN0aW5nIH0pKTtcbn07XG5jb25zdCBCbG9ja2VkVXNlcnNTZWFyY2hSZXN1bHRzID0gKHsgYmxvY2tlZFVzZXJzU2VhcmNoRm46IGJsb2NrZWRVc2Vyc1NlYXJjaEZuRnJvbVByb3BzLCBkZWJvdW5jZVNlYXJjaEludGVydmFsID0gREVGQVVMVF9ERUJPVU5DRV9TRUFSQ0hfSU5URVJWQUwsIHNlYXJjaFF1ZXJ5LCB9KSA9PiB7XG4gICAgY29uc3QgeyB1c2VDYWxsQmxvY2tlZFVzZXJJZHMgfSA9IHVzZUNhbGxTdGF0ZUhvb2tzKCk7XG4gICAgY29uc3QgYmxvY2tlZFVzZXJzID0gdXNlQ2FsbEJsb2NrZWRVc2VySWRzKCk7XG4gICAgY29uc3QgYmxvY2tlZFVzZXJzU2VhcmNoRm4gPSB1c2VDYWxsYmFjaygocXVlcnlTdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgcXVlcnlSZWdFeHAgPSBuZXcgUmVnRXhwKHF1ZXJ5U3RyaW5nLCAnaScpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGJsb2NrZWRVc2Vycy5maWx0ZXIoKGJsb2NrZWRVc2VyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tlZFVzZXIubWF0Y2gocXVlcnlSZWdFeHApO1xuICAgICAgICB9KSk7XG4gICAgfSwgW2Jsb2NrZWRVc2Vyc10pO1xuICAgIGNvbnN0IHsgc2VhcmNoUXVlcnlJblByb2dyZXNzLCBzZWFyY2hSZXN1bHRzIH0gPSB1c2VTZWFyY2goe1xuICAgICAgICBzZWFyY2hGbjogYmxvY2tlZFVzZXJzU2VhcmNoRm5Gcm9tUHJvcHMgPz8gYmxvY2tlZFVzZXJzU2VhcmNoRm4sXG4gICAgICAgIGRlYm91bmNlSW50ZXJ2YWw6IGRlYm91bmNlU2VhcmNoSW50ZXJ2YWwsXG4gICAgICAgIHNlYXJjaFF1ZXJ5LFxuICAgIH0pO1xuICAgIHJldHVybiAoanN4KFNlYXJjaFJlc3VsdHMsIHsgRW1wdHlTZWFyY2hSZXN1bHRDb21wb25lbnQ6IEVtcHR5UGFydGljaXBhbnRTZWFyY2hMaXN0LCBMb2FkaW5nSW5kaWNhdG9yOiBMb2FkaW5nSW5kaWNhdG9yLCBzZWFyY2hRdWVyeUluUHJvZ3Jlc3M6IHNlYXJjaFF1ZXJ5SW5Qcm9ncmVzcywgc2VhcmNoUmVzdWx0czogc2VhcmNoUXVlcnkgPyBzZWFyY2hSZXN1bHRzIDogYmxvY2tlZFVzZXJzLCBTZWFyY2hSZXN1bHRMaXN0OiBCbG9ja2VkVXNlckxpc3RpbmcgfSkpO1xufTtcbmNvbnN0IFRvZ2dsZUJ1dHRvbiQxID0gZm9yd2FyZFJlZihmdW5jdGlvbiBUb2dnbGVCdXR0b24ocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBqc3goSWNvbkJ1dHRvbiwgeyBlbmFibGVkOiBwcm9wcy5tZW51U2hvd24sIGljb246IFwiZmlsdGVyXCIsIHJlZjogcmVmIH0pO1xufSk7XG5cbmNvbnN0IENhbGxQcmV2aWV3ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUsIHN0eWxlIH0gPSBwcm9wcztcbiAgICBjb25zdCBjYWxsID0gdXNlQ2FsbCgpO1xuICAgIGNvbnN0IHsgdXNlQ2FsbFRodW1ibmFpbCB9ID0gdXNlQ2FsbFN0YXRlSG9va3MoKTtcbiAgICBjb25zdCB0aHVtYm5haWwgPSB1c2VDYWxsVGh1bWJuYWlsKCk7XG4gICAgY29uc3QgW2ltYWdlUmVmLCBzZXRJbWFnZVJlZl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWltYWdlUmVmIHx8ICFjYWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBjbGVhbnVwID0gY2FsbC5iaW5kQ2FsbFRodW1ibmFpbEVsZW1lbnQoaW1hZ2VSZWYpO1xuICAgICAgICByZXR1cm4gKCkgPT4gY2xlYW51cCgpO1xuICAgIH0sIFtpbWFnZVJlZiwgY2FsbF0pO1xuICAgIGlmICghdGh1bWJuYWlsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gKGpzeChcImltZ1wiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX19jYWxsLXByZXZpZXcnLCBjbGFzc05hbWUpLCBzdHlsZTogc3R5bGUsIGFsdDogXCJDYWxsIFByZXZpZXcgVGh1bWJuYWlsXCIsIHJlZjogc2V0SW1hZ2VSZWYgfSkpO1xufTtcblxuY29uc3QgQ2FsbFJlY29yZGluZ0xpc3RIZWFkZXIgPSAoeyBjYWxsUmVjb3JkaW5ncywgb25SZWZyZXNoLCB9KSA9PiB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgcmV0dXJuIChqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1yZWNvcmRpbmctbGlzdF9faGVhZGVyXCIsIGNoaWxkcmVuOiBbanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3RfX3RpdGxlXCIsIGNoaWxkcmVuOiBbanN4KFwic3BhblwiLCB7IGNoaWxkcmVuOiB0KCdDYWxsIFJlY29yZGluZ3MnKSB9KSwgY2FsbFJlY29yZGluZ3MubGVuZ3RoID8ganN4cyhcInNwYW5cIiwgeyBjaGlsZHJlbjogW1wiKFwiLCBjYWxsUmVjb3JkaW5ncy5sZW5ndGgsIFwiKVwiXSB9KSA6IG51bGxdIH0pLCBvblJlZnJlc2ggJiYgKGpzeChJY29uQnV0dG9uLCB7IGljb246IFwicmVmcmVzaFwiLCB0aXRsZTogdCgnUmVmcmVzaCcpLCBvbkNsaWNrOiBvblJlZnJlc2ggfSkpXSB9KSk7XG59O1xuXG5jb25zdCBkYXRlRm9ybWF0ID0gKGRhdGUpID0+IHtcbiAgICBjb25zdCBmb3JtYXQgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICByZXR1cm4gZm9ybWF0LnRvVGltZVN0cmluZygpLnNwbGl0KCcgJylbMF07XG59O1xuY29uc3QgQ2FsbFJlY29yZGluZ0xpc3RJdGVtID0gKHsgcmVjb3JkaW5nLCB9KSA9PiB7XG4gICAgcmV0dXJuIChqc3hzKFwibGlcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXJlY29yZGluZy1saXN0X19pdGVtXCIsIGNoaWxkcmVuOiBbanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1yZWNvcmRpbmctbGlzdF9fdGFibGUtY2VsbCBzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3RfX2ZpbGVuYW1lXCIsIGNoaWxkcmVuOiByZWNvcmRpbmcuZmlsZW5hbWUgfSksIGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3RfX3RhYmxlLWNlbGwgc3RyLXZpZGVvX19jYWxsLXJlY29yZGluZy1saXN0X190aW1lXCIsIGNoaWxkcmVuOiBkYXRlRm9ybWF0KHJlY29yZGluZy5zdGFydF90aW1lKSB9KSwganN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1yZWNvcmRpbmctbGlzdF9fdGFibGUtY2VsbCBzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3RfX3RpbWVcIiwgY2hpbGRyZW46IGRhdGVGb3JtYXQocmVjb3JkaW5nLmVuZF90aW1lKSB9KSwganN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1yZWNvcmRpbmctbGlzdF9fdGFibGUtY2VsbCBzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3RfX2Rvd25sb2FkXCIsIGNoaWxkcmVuOiBqc3goXCJhXCIsIHsgY2xhc3NOYW1lOiBjbHN4KCdzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3QtaXRlbV9fYWN0aW9uLWJ1dHRvbicsICdzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3QtaXRlbV9fYWN0aW9uLWJ1dHRvbi0tZG93bmxvYWQnKSwgcm9sZTogXCJidXR0b25cIiwgaHJlZjogcmVjb3JkaW5nLnVybCwgZG93bmxvYWQ6IHJlY29yZGluZy5maWxlbmFtZSwgdGl0bGU6IFwiRG93bmxvYWQgdGhlIHJlY29yZGluZ1wiLCBjaGlsZHJlbjoganN4KEljb24sIHsgaWNvbjogXCJkb3dubG9hZFwiIH0pIH0pIH0pXSB9KSk7XG59O1xuXG5jb25zdCBFbXB0eUNhbGxSZWNvcmRpbmdMaXN0aW5nID0gKCkgPT4ge1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3RfX2xpc3Rpbmcgc3RyLXZpZGVvX19jYWxsLXJlY29yZGluZy1saXN0X19saXN0aW5nLS1lbXB0eVwiLCBjaGlsZHJlbjogW2pzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3RfX2xpc3RpbmctLWljb24tZW1wdHlcIiB9KSwganN4KFwicFwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3RfX2xpc3RpbmctLXRleHQtZW1wdHlcIiwgY2hpbGRyZW46IFwiTm8gcmVjb3JkaW5ncyBhdmFpbGFibGVcIiB9KV0gfSkpO1xufTtcblxuY29uc3QgTG9hZGluZ0NhbGxSZWNvcmRpbmdMaXN0aW5nID0gKHsgY2FsbFJlY29yZGluZ3MsIH0pID0+IHtcbiAgICByZXR1cm4gKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtjYWxsUmVjb3JkaW5ncy5tYXAoKHJlY29yZGluZykgPT4gKGpzeChDYWxsUmVjb3JkaW5nTGlzdEl0ZW0sIHsgcmVjb3JkaW5nOiByZWNvcmRpbmcgfSwgcmVjb3JkaW5nLmZpbGVuYW1lKSkpLCBqc3goTG9hZGluZ0luZGljYXRvciwgeyB0ZXh0OiBcIlJlY29yZGluZyBnZXR0aW5nIHJlYWR5XCIgfSldIH0pKTtcbn07XG5cbmNvbnN0IENhbGxSZWNvcmRpbmdMaXN0ID0gKHsgY2FsbFJlY29yZGluZ3MsIENhbGxSZWNvcmRpbmdMaXN0SGVhZGVyOiBDYWxsUmVjb3JkaW5nTGlzdEhlYWRlciQxID0gQ2FsbFJlY29yZGluZ0xpc3RIZWFkZXIsIENhbGxSZWNvcmRpbmdMaXN0SXRlbTogQ2FsbFJlY29yZGluZ0xpc3RJdGVtJDEgPSBDYWxsUmVjb3JkaW5nTGlzdEl0ZW0sIEVtcHR5Q2FsbFJlY29yZGluZ0xpc3QgPSBFbXB0eUNhbGxSZWNvcmRpbmdMaXN0aW5nLCBsb2FkaW5nLCBMb2FkaW5nQ2FsbFJlY29yZGluZ0xpc3QgPSBMb2FkaW5nQ2FsbFJlY29yZGluZ0xpc3RpbmcsIG9uUmVmcmVzaCwgfSkgPT4ge1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtcmVjb3JkaW5nLWxpc3RcIiwgY2hpbGRyZW46IFtqc3goQ2FsbFJlY29yZGluZ0xpc3RIZWFkZXIkMSwgeyBjYWxsUmVjb3JkaW5nczogY2FsbFJlY29yZGluZ3MsIG9uUmVmcmVzaDogb25SZWZyZXNoIH0pLCBqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXJlY29yZGluZy1saXN0X19saXN0aW5nXCIsIGNoaWxkcmVuOiBsb2FkaW5nID8gKGpzeChMb2FkaW5nQ2FsbFJlY29yZGluZ0xpc3QsIHsgY2FsbFJlY29yZGluZ3M6IGNhbGxSZWNvcmRpbmdzIH0pKSA6IGNhbGxSZWNvcmRpbmdzLmxlbmd0aCA/IChqc3hzKEZyYWdtZW50LCB7IGNoaWxkcmVuOiBbanN4KFwidWxcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXJlY29yZGluZy1saXN0X19saXN0XCIsIGNoaWxkcmVuOiBqc3hzKFwibGlcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXJlY29yZGluZy1saXN0X19pdGVtXCIsIGNoaWxkcmVuOiBbanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1yZWNvcmRpbmctbGlzdF9fZmlsZW5hbWVcIiwgY2hpbGRyZW46IFwiTmFtZVwiIH0pLCBqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXJlY29yZGluZy1saXN0X190aW1lXCIsIGNoaWxkcmVuOiBcIlN0YXJ0IHRpbWVcIiB9KSwganN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1yZWNvcmRpbmctbGlzdF9fdGltZVwiLCBjaGlsZHJlbjogXCJFbmQgdGltZVwiIH0pLCBqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXJlY29yZGluZy1saXN0X19kb3dubG9hZFwiIH0pXSB9KSB9KSwganN4KFwidWxcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXJlY29yZGluZy1saXN0X19saXN0XCIsIGNoaWxkcmVuOiBjYWxsUmVjb3JkaW5ncy5tYXAoKHJlY29yZGluZykgPT4gKGpzeChDYWxsUmVjb3JkaW5nTGlzdEl0ZW0kMSwgeyByZWNvcmRpbmc6IHJlY29yZGluZyB9LCByZWNvcmRpbmcuZmlsZW5hbWUpKSkgfSldIH0pKSA6IChqc3goRW1wdHlDYWxsUmVjb3JkaW5nTGlzdCwge30pKSB9KV0gfSkpO1xufTtcblxuY29uc3QgTm9pc2VDYW5jZWxsYXRpb25Db250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogRXhwb3NlcyB0aGUgTm9pc2VDYW5jZWxsYXRpb24gQVBJLlxuICogVGhyb3dzIGFuIGVycm9yIGlmIHVzZWQgb3V0c2lkZSA8Tm9pc2VDYW5jZWxsYXRpb25Qcm92aWRlciAvPi5cbiAqL1xuY29uc3QgdXNlTm9pc2VDYW5jZWxsYXRpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoTm9pc2VDYW5jZWxsYXRpb25Db250ZXh0KTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1c2VOb2lzZUNhbmNlbGxhdGlvbiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgTm9pc2VDYW5jZWxsYXRpb25Qcm92aWRlcicpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbn07XG5jb25zdCBOb2lzZUNhbmNlbGxhdGlvblByb3ZpZGVyID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgbm9pc2VDYW5jZWxsYXRpb24gfSA9IHByb3BzO1xuICAgIGNvbnN0IGNhbGwgPSB1c2VDYWxsKCk7XG4gICAgY29uc3QgeyB1c2VDYWxsU2V0dGluZ3MsIHVzZUhhc1Blcm1pc3Npb25zIH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IHNldHRpbmdzID0gdXNlQ2FsbFNldHRpbmdzKCk7XG4gICAgY29uc3Qgbm9pc2VDYW5jZWxsYXRpb25BbGxvd2VkID0gISEoc2V0dGluZ3MgJiZcbiAgICAgICAgc2V0dGluZ3MuYXVkaW8ubm9pc2VfY2FuY2VsbGF0aW9uICYmXG4gICAgICAgIHNldHRpbmdzLmF1ZGlvLm5vaXNlX2NhbmNlbGxhdGlvbi5tb2RlICE9PVxuICAgICAgICAgICAgTm9pc2VDYW5jZWxsYXRpb25TZXR0aW5nc01vZGVFbnVtLkRJU0FCTEVEKTtcbiAgICBjb25zdCBoYXNDYXBhYmlsaXR5ID0gdXNlSGFzUGVybWlzc2lvbnMoT3duQ2FwYWJpbGl0eS5FTkFCTEVfTk9JU0VfQ0FOQ0VMTEFUSU9OKTtcbiAgICBjb25zdCBbaXNTdXBwb3J0ZWRCeUJyb3dzZXIsIHNldElzU3VwcG9ydGVkQnlCcm93c2VyXSA9IHVzZVN0YXRlKHVuZGVmaW5lZCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbm9pc2VDYW5jZWxsYXRpb24uaXNTdXBwb3J0ZWQoKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgc2V0SXNTdXBwb3J0ZWRCeUJyb3dzZXIocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICAgICAgIC50aGVuKChfaXNTdXBwb3J0ZWRCeUJyb3dzZXIpID0+IHNldElzU3VwcG9ydGVkQnlCcm93c2VyKF9pc1N1cHBvcnRlZEJ5QnJvd3NlcikpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoYENhbid0IGRldGVybWluZSBpZiBub2lzZSBjYW5jZWxsYXRpb24gaXMgc3VwcG9ydGVkYCwgZXJyKSk7XG4gICAgICAgIH1cbiAgICB9LCBbbm9pc2VDYW5jZWxsYXRpb25dKTtcbiAgICBjb25zdCBpc1N1cHBvcnRlZCA9IGlzU3VwcG9ydGVkQnlCcm93c2VyICYmIGhhc0NhcGFiaWxpdHkgJiYgbm9pc2VDYW5jZWxsYXRpb25BbGxvd2VkO1xuICAgIGNvbnN0IFtpc0VuYWJsZWQsIHNldElzRW5hYmxlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgZGVpbml0ID0gdXNlUmVmKCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFjYWxsIHx8ICFpc1N1cHBvcnRlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSBub2lzZUNhbmNlbGxhdGlvbi5vbignY2hhbmdlJywgKHYpID0+IHNldElzRW5hYmxlZCh2KSk7XG4gICAgICAgIGNvbnN0IGluaXQgPSAoZGVpbml0LmN1cnJlbnQgfHwgUHJvbWlzZS5yZXNvbHZlKCkpXG4gICAgICAgICAgICAudGhlbigoKSA9PiBub2lzZUNhbmNlbGxhdGlvbi5pbml0KCkpXG4gICAgICAgICAgICAudGhlbigoKSA9PiBjYWxsLm1pY3JvcGhvbmUuZW5hYmxlTm9pc2VDYW5jZWxsYXRpb24obm9pc2VDYW5jZWxsYXRpb24pKVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoYENhbid0IGluaXRpYWxpemUgbm9pc2Ugc3VwcHJlc3Npb25gLCBlcnIpKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGRlaW5pdC5jdXJyZW50ID0gaW5pdFxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IGNhbGwubWljcm9waG9uZS5kaXNhYmxlTm9pc2VDYW5jZWxsYXRpb24oKSlcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiBub2lzZUNhbmNlbGxhdGlvbi5kaXNwb3NlKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdW5zdWJzY3JpYmUoKSk7XG4gICAgICAgIH07XG4gICAgfSwgW2NhbGwsIGlzU3VwcG9ydGVkLCBub2lzZUNhbmNlbGxhdGlvbl0pO1xuICAgIHJldHVybiAoanN4KE5vaXNlQ2FuY2VsbGF0aW9uQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZToge1xuICAgICAgICAgICAgaXNTdXBwb3J0ZWQsXG4gICAgICAgICAgICBpc0VuYWJsZWQsXG4gICAgICAgICAgICBzZXRFbmFibGVkOiAoZW5hYmxlZE9yU2V0dGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFub2lzZUNhbmNlbGxhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuYWJsZSA9IHR5cGVvZiBlbmFibGVkT3JTZXR0ZXIgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBlbmFibGVkT3JTZXR0ZXIoaXNFbmFibGVkKVxuICAgICAgICAgICAgICAgICAgICA6IGVuYWJsZWRPclNldHRlcjtcbiAgICAgICAgICAgICAgICBpZiAoZW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vaXNlQ2FuY2VsbGF0aW9uLmVuYWJsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9pc2VDYW5jZWxsYXRpb24uZGlzYWJsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIGNoaWxkcmVuOiBjaGlsZHJlbiB9KSk7XG59O1xuXG5jb25zdCBSaW5naW5nQ2FsbENvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IGNhbGwgPSB1c2VDYWxsKCk7XG4gICAgY29uc3QgeyB1c2VDYWxsQ2FsbGluZ1N0YXRlIH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IGNhbGxDYWxsaW5nU3RhdGUgPSB1c2VDYWxsQ2FsbGluZ1N0YXRlKCk7XG4gICAgaWYgKCFjYWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBidXR0b25zRGlzYWJsZWQgPSBjYWxsQ2FsbGluZ1N0YXRlICE9PSBDYWxsaW5nU3RhdGUuUklOR0lORztcbiAgICByZXR1cm4gKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BlbmRpbmctY2FsbC1jb250cm9sc1wiLCBjaGlsZHJlbjogY2FsbC5pc0NyZWF0ZWRCeU1lID8gKGpzeChDYW5jZWxDYWxsQnV0dG9uLCB7IGRpc2FibGVkOiBidXR0b25zRGlzYWJsZWQgfSkpIDogKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtqc3goQWNjZXB0Q2FsbEJ1dHRvbiwgeyBkaXNhYmxlZDogYnV0dG9uc0Rpc2FibGVkIH0pLCBqc3goQ2FuY2VsQ2FsbEJ1dHRvbiwgeyBvbkNsaWNrOiAoKSA9PiBjYWxsLmxlYXZlKHsgcmVqZWN0OiB0cnVlIH0pLCBkaXNhYmxlZDogYnV0dG9uc0Rpc2FibGVkIH0pXSB9KSkgfSkpO1xufTtcblxuY29uc3QgQ0FMTElOR19TVEFURV9UT19MQUJFTCA9IHtcbiAgICBbQ2FsbGluZ1N0YXRlLkpPSU5JTkddOiAnSm9pbmluZycsXG4gICAgW0NhbGxpbmdTdGF0ZS5SSU5HSU5HXTogJ1JpbmdpbmcnLFxuICAgIFtDYWxsaW5nU3RhdGUuTUlHUkFUSU5HXTogJ01pZ3JhdGluZycsXG4gICAgW0NhbGxpbmdTdGF0ZS5SRUNPTk5FQ1RJTkddOiAnUmUtY29ubmVjdGluZycsXG4gICAgW0NhbGxpbmdTdGF0ZS5SRUNPTk5FQ1RJTkdfRkFJTEVEXTogJ0ZhaWxlZCcsXG4gICAgW0NhbGxpbmdTdGF0ZS5PRkZMSU5FXTogJ05vIGludGVybmV0IGNvbm5lY3Rpb24nLFxuICAgIFtDYWxsaW5nU3RhdGUuSURMRV06ICcnLFxuICAgIFtDYWxsaW5nU3RhdGUuVU5LTk9XTl06ICcnLFxuICAgIFtDYWxsaW5nU3RhdGUuSk9JTkVEXTogJ0pvaW5lZCcsXG4gICAgW0NhbGxpbmdTdGF0ZS5MRUZUXTogJ0xlZnQgY2FsbCcsXG59O1xuY29uc3QgUmluZ2luZ0NhbGwgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGluY2x1ZGVTZWxmID0gZmFsc2UsIHRvdGFsTWVtYmVyc1RvU2hvdyA9IDMgfSA9IHByb3BzO1xuICAgIGNvbnN0IGNhbGwgPSB1c2VDYWxsKCk7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgeyB1c2VDYWxsQ2FsbGluZ1N0YXRlLCB1c2VDYWxsTWVtYmVycyB9ID0gdXNlQ2FsbFN0YXRlSG9va3MoKTtcbiAgICBjb25zdCBjYWxsaW5nU3RhdGUgPSB1c2VDYWxsQ2FsbGluZ1N0YXRlKCk7XG4gICAgY29uc3QgbWVtYmVycyA9IHVzZUNhbGxNZW1iZXJzKCk7XG4gICAgY29uc3QgY29ubmVjdGVkVXNlciA9IHVzZUNvbm5lY3RlZFVzZXIoKTtcbiAgICBpZiAoIWNhbGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIHRha2UgdGhlIGZpcnN0IE4gbWVtYmVycyB0byBzaG93IHRoZWlyIGF2YXRhcnNcbiAgICBjb25zdCBtZW1iZXJzVG9TaG93ID0gKG1lbWJlcnMgfHwgW10pXG4gICAgICAgIC5zbGljZSgwLCB0b3RhbE1lbWJlcnNUb1Nob3cpXG4gICAgICAgIC5tYXAoKHsgdXNlciB9KSA9PiB1c2VyKVxuICAgICAgICAuZmlsdGVyKCh1c2VyKSA9PiB1c2VyLmlkICE9PSBjb25uZWN0ZWRVc2VyPy5pZCB8fCBpbmNsdWRlU2VsZik7XG4gICAgaWYgKGluY2x1ZGVTZWxmICYmXG4gICAgICAgICFtZW1iZXJzVG9TaG93LmZpbmQoKHVzZXIpID0+IHVzZXIuaWQgPT09IGNvbm5lY3RlZFVzZXI/LmlkKSkge1xuICAgICAgICAvLyBpZiB0aGUgY3VycmVudCB1c2VyIGlzIG5vdCBpbiB0aGUgaW5pdGlhbCBiYXRjaCBvZiBtZW1iZXJzLFxuICAgICAgICAvLyByZXBsYWNlIHRoZSBmaXJzdCBpdGVtIGluIG1lbWJlcnNUb1Nob3cgYXJyYXkgd2l0aCB0aGUgY3VycmVudCB1c2VyXG4gICAgICAgIGNvbnN0IHNlbGYgPSBtZW1iZXJzLmZpbmQoKHsgdXNlciB9KSA9PiB1c2VyLmlkID09PSBjb25uZWN0ZWRVc2VyPy5pZCk7XG4gICAgICAgIGlmIChzZWxmKSB7XG4gICAgICAgICAgICBtZW1iZXJzVG9TaG93LnNwbGljZSgwLCAxLCBzZWxmLnVzZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNhbGxpbmdTdGF0ZUxhYmVsID0gQ0FMTElOR19TVEFURV9UT19MQUJFTFtjYWxsaW5nU3RhdGVdO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2NhbGwtcGFuZWwgc3RyLXZpZGVvX19jYWxsLXBhbmVsLS1yaW5naW5nXCIsIGNoaWxkcmVuOiBbanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1wYW5lbF9fbWVtYmVycy1saXN0XCIsIGNoaWxkcmVuOiBtZW1iZXJzVG9TaG93Lm1hcCgodXNlcikgPT4gKGpzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXBhbmVsX19tZW1iZXItYm94XCIsIGNoaWxkcmVuOiBbanN4KEF2YXRhciwgeyBuYW1lOiB1c2VyLm5hbWUsIGltYWdlU3JjOiB1c2VyLmltYWdlIH0pLCB1c2VyLm5hbWUgJiYgKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX21lbWJlcl9kZXRhaWxzXCIsIGNoaWxkcmVuOiBqc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fbWVtYmVyX25hbWVcIiwgY2hpbGRyZW46IHVzZXIubmFtZSB9KSB9KSldIH0sIHVzZXIuaWQpKSkgfSksIGNhbGxpbmdTdGF0ZUxhYmVsICYmIChqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19jYWxsLXBhbmVsX19jYWxsaW5nLXN0YXRlLWxhYmVsXCIsIGNoaWxkcmVuOiB0KGNhbGxpbmdTdGF0ZUxhYmVsKSB9KSksIFtDYWxsaW5nU3RhdGUuUklOR0lORywgQ2FsbGluZ1N0YXRlLkpPSU5JTkddLmluY2x1ZGVzKGNhbGxpbmdTdGF0ZSkgJiYgKGpzeChSaW5naW5nQ2FsbENvbnRyb2xzLCB7fSkpXSB9KSk7XG59O1xuXG5jb25zdCBieU5hbWVPcklkID0gKGEsIGIpID0+IHtcbiAgICBpZiAoYS5uYW1lICYmIGIubmFtZSAmJiBhLm5hbWUgPCBiLm5hbWUpXG4gICAgICAgIHJldHVybiAtMTtcbiAgICBpZiAoYS5uYW1lICYmIGIubmFtZSAmJiBhLm5hbWUgPiBiLm5hbWUpXG4gICAgICAgIHJldHVybiAxO1xuICAgIGlmIChhLmlkIDwgYi5pZClcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIGlmIChhLmlkID4gYi5pZClcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgcmV0dXJuIDA7XG59O1xuY29uc3QgUGVybWlzc2lvblJlcXVlc3RzID0gKCkgPT4ge1xuICAgIGNvbnN0IGNhbGwgPSB1c2VDYWxsKCk7XG4gICAgY29uc3QgeyB1c2VMb2NhbFBhcnRpY2lwYW50LCB1c2VIYXNQZXJtaXNzaW9ucyB9ID0gdXNlQ2FsbFN0YXRlSG9va3MoKTtcbiAgICBjb25zdCBsb2NhbFBhcnRpY2lwYW50ID0gdXNlTG9jYWxQYXJ0aWNpcGFudCgpO1xuICAgIGNvbnN0IFtleHBhbmRlZCwgc2V0RXhwYW5kZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtwZXJtaXNzaW9uUmVxdWVzdHMsIHNldFBlcm1pc3Npb25SZXF1ZXN0c10gPSB1c2VTdGF0ZShbXSk7XG4gICAgY29uc3QgY2FuVXBkYXRlQ2FsbFBlcm1pc3Npb25zID0gdXNlSGFzUGVybWlzc2lvbnMoT3duQ2FwYWJpbGl0eS5VUERBVEVfQ0FMTF9QRVJNSVNTSU9OUyk7XG4gICAgY29uc3QgbG9jYWxVc2VySWQgPSBsb2NhbFBhcnRpY2lwYW50Py51c2VySWQ7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFjYWxsIHx8ICFjYW5VcGRhdGVDYWxsUGVybWlzc2lvbnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJldHVybiBjYWxsLm9uKCdjYWxsLnBlcm1pc3Npb25fcmVxdWVzdCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnVzZXIuaWQgIT09IGxvY2FsVXNlcklkKSB7XG4gICAgICAgICAgICAgICAgc2V0UGVybWlzc2lvblJlcXVlc3RzKChyZXF1ZXN0cykgPT4gWy4uLnJlcXVlc3RzLCBldmVudF0uc29ydCgoYSwgYikgPT4gYnlOYW1lT3JJZChhLnVzZXIsIGIudXNlcikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSwgW2NhbGwsIGNhblVwZGF0ZUNhbGxQZXJtaXNzaW9ucywgbG9jYWxVc2VySWRdKTtcbiAgICBjb25zdCBoYW5kbGVVcGRhdGVQZXJtaXNzaW9uID0gKHJlcXVlc3QsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgdXNlciwgcGVybWlzc2lvbnMgfSA9IHJlcXVlc3Q7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdncmFudCc6XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNhbGw/LmdyYW50UGVybWlzc2lvbnModXNlci5pZCwgcGVybWlzc2lvbnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZXZva2UnOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjYWxsPy5yZXZva2VQZXJtaXNzaW9ucyh1c2VyLmlkLCBwZXJtaXNzaW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0UGVybWlzc2lvblJlcXVlc3RzKChyZXF1ZXN0cykgPT4gcmVxdWVzdHMuZmlsdGVyKChyKSA9PiByICE9PSByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB7IHJlZnMsIHgsIHksIHN0cmF0ZWd5IH0gPSB1c2VGbG9hdGluZ1VJUHJlc2V0KHtcbiAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgfSk7XG4gICAgLy8gZG9uJ3QgcmVuZGVyIGFueXRoaW5nIGlmIHRoZXJlIGFyZSBubyBwZXJtaXNzaW9uIHJlcXVlc3RzXG4gICAgaWYgKHBlcm1pc3Npb25SZXF1ZXN0cy5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3Blcm1pc3Npb24tcmVxdWVzdHNcIiwgcmVmOiByZWZzLnNldFJlZmVyZW5jZSwgY2hpbGRyZW46IFtqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcGVybWlzc2lvbi1yZXF1ZXN0c19fbm90aWZpY2F0aW9uXCIsIGNoaWxkcmVuOiBbanN4cyhcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wZXJtaXNzaW9uLXJlcXVlc3RzX19ub3RpZmljYXRpb25fX21lc3NhZ2VcIiwgY2hpbGRyZW46IFtwZXJtaXNzaW9uUmVxdWVzdHMubGVuZ3RoLCBcIiBwZW5kaW5nIHBlcm1pc3Npb24gcmVxdWVzdHNcIl0gfSksIGpzeChCdXR0b24sIHsgdHlwZTogXCJidXR0b25cIiwgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEV4cGFuZGVkKChlKSA9PiAhZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBjaGlsZHJlbjogZXhwYW5kZWQgPyAnSGlkZSByZXF1ZXN0cycgOiAnU2hvdyByZXF1ZXN0cycgfSldIH0pLCBleHBhbmRlZCAmJiAoanN4KFBlcm1pc3Npb25SZXF1ZXN0TGlzdCwgeyByZWY6IHJlZnMuc2V0RmxvYXRpbmcsIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBzdHJhdGVneSxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB5ID8/IDAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHggPz8gMCxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgfSwgcGVybWlzc2lvblJlcXVlc3RzOiBwZXJtaXNzaW9uUmVxdWVzdHMsIGhhbmRsZVVwZGF0ZVBlcm1pc3Npb246IGhhbmRsZVVwZGF0ZVBlcm1pc3Npb24gfSkpXSB9KSk7XG59O1xuY29uc3QgUGVybWlzc2lvblJlcXVlc3RMaXN0ID0gZm9yd2FyZFJlZihmdW5jdGlvbiBQZXJtaXNzaW9uUmVxdWVzdExpc3QocHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHsgcGVybWlzc2lvblJlcXVlc3RzLCBoYW5kbGVVcGRhdGVQZXJtaXNzaW9uLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICByZXR1cm4gKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3Blcm1pc3Npb24tcmVxdWVzdHMtbGlzdFwiLCByZWY6IHJlZiwgLi4ucmVzdCwgY2hpbGRyZW46IHBlcm1pc3Npb25SZXF1ZXN0cy5tYXAoKHJlcXVlc3QsIHJlcUluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHVzZXIsIHBlcm1pc3Npb25zIH0gPSByZXF1ZXN0O1xuICAgICAgICAgICAgcmV0dXJuIChqc3goRnJhZ21lbnQkMSwgeyBjaGlsZHJlbjogcGVybWlzc2lvbnMubWFwKChwZXJtaXNzaW9uKSA9PiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3Blcm1pc3Npb24tcmVxdWVzdFwiLCBjaGlsZHJlbjogW2pzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3Blcm1pc3Npb24tcmVxdWVzdF9fbWVzc2FnZVwiLCBjaGlsZHJlbjogbWVzc2FnZUZvclBlcm1pc3Npb24odXNlci5uYW1lIHx8IHVzZXIuaWQsIHBlcm1pc3Npb24sIHQpIH0pLCBqc3goQnV0dG9uLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3Blcm1pc3Npb24tcmVxdWVzdF9fYnV0dG9uLS1hbGxvd1wiLCB0eXBlOiBcImJ1dHRvblwiLCBvbkNsaWNrOiBoYW5kbGVVcGRhdGVQZXJtaXNzaW9uKHJlcXVlc3QsICdncmFudCcpLCBjaGlsZHJlbjogdCgnQWxsb3cnKSB9KSwganN4KEJ1dHRvbiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wZXJtaXNzaW9uLXJlcXVlc3RfX2J1dHRvbi0tcmVqZWN0XCIsIHR5cGU6IFwiYnV0dG9uXCIsIG9uQ2xpY2s6IGhhbmRsZVVwZGF0ZVBlcm1pc3Npb24ocmVxdWVzdCwgJ3Jldm9rZScpLCBjaGlsZHJlbjogdCgnUmV2b2tlJykgfSksIGpzeChCdXR0b24sIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcGVybWlzc2lvbi1yZXF1ZXN0X19idXR0b24tLXJlamVjdFwiLCB0eXBlOiBcImJ1dHRvblwiLCBvbkNsaWNrOiBoYW5kbGVVcGRhdGVQZXJtaXNzaW9uKHJlcXVlc3QsICdkaXNtaXNzJyksIGNoaWxkcmVuOiB0KCdEaXNtaXNzJykgfSldIH0sIHBlcm1pc3Npb24pKSkgfSwgYCR7dXNlci5pZH0vJHtyZXFJbmRleH1gKSk7XG4gICAgICAgIH0pIH0pKTtcbn0pO1xuY29uc3QgQnV0dG9uID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIHJldHVybiAoanN4KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBjbHN4KCdzdHItdmlkZW9fX3Blcm1pc3Npb24tcmVxdWVzdF9fYnV0dG9uJywgY2xhc3NOYW1lKSwgLi4ucmVzdCB9KSk7XG59O1xuY29uc3QgbWVzc2FnZUZvclBlcm1pc3Npb24gPSAodXNlck5hbWUsIHBlcm1pc3Npb24sIHQpID0+IHtcbiAgICBzd2l0Y2ggKHBlcm1pc3Npb24pIHtcbiAgICAgICAgY2FzZSBPd25DYXBhYmlsaXR5LlNFTkRfQVVESU86XG4gICAgICAgICAgICByZXR1cm4gdCgne3sgdXNlck5hbWUgfX0gaXMgcmVxdWVzdGluZyB0byBzcGVhaycsIHsgdXNlck5hbWUgfSk7XG4gICAgICAgIGNhc2UgT3duQ2FwYWJpbGl0eS5TRU5EX1ZJREVPOlxuICAgICAgICAgICAgcmV0dXJuIHQoJ3t7IHVzZXJOYW1lIH19IGlzIHJlcXVlc3RpbmcgdG8gc2hhcmUgdGhlaXIgY2FtZXJhJywge1xuICAgICAgICAgICAgICAgIHVzZXJOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNhc2UgT3duQ2FwYWJpbGl0eS5TQ1JFRU5TSEFSRTpcbiAgICAgICAgICAgIHJldHVybiB0KCd7eyB1c2VyTmFtZSB9fSBpcyByZXF1ZXN0aW5nIHRvIHByZXNlbnQgdGhlaXIgc2NyZWVuJywge1xuICAgICAgICAgICAgICAgIHVzZXJOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdCgne3sgdXNlck5hbWUgfX0gaXMgcmVxdWVzdGluZyBwZXJtaXNzaW9uOiB7eyBwZXJtaXNzaW9uIH19Jywge1xuICAgICAgICAgICAgICAgIHVzZXJOYW1lLFxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb24sXG4gICAgICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5jb25zdCBTdHJlYW1UaGVtZSA9ICh7IGFzOiBDb21wb25lbnQgPSAnZGl2JywgY2xhc3NOYW1lLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIHJldHVybiAoanN4KENvbXBvbmVudCwgeyAuLi5wcm9wcywgY2xhc3NOYW1lOiBjbHN4KCdzdHItdmlkZW8nLCBjbGFzc05hbWUpLCBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xufTtcblxuY29uc3QgRGVmYXVsdFZpZGVvUGxhY2Vob2xkZXIgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIERlZmF1bHRWaWRlb1BsYWNlaG9sZGVyKHsgcGFydGljaXBhbnQsIHN0eWxlIH0sIHJlZikge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IG5hbWUgPSBwYXJ0aWNpcGFudC5uYW1lIHx8IHBhcnRpY2lwYW50LnVzZXJJZDtcbiAgICByZXR1cm4gKGpzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX192aWRlby1wbGFjZWhvbGRlclwiLCBzdHlsZTogc3R5bGUsIHJlZjogcmVmLCBjaGlsZHJlbjogWyghcGFydGljaXBhbnQuaW1hZ2UgfHwgZXJyb3IpICYmXG4gICAgICAgICAgICAgICAgKG5hbWUgPyAoanN4KEluaXRpYWxzRmFsbGJhY2ssIHsgbmFtZTogbmFtZSB9KSkgOiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fdmlkZW8tcGxhY2Vob2xkZXJfX25vLXZpZGVvLWxhYmVsXCIsIGNoaWxkcmVuOiB0KCdWaWRlbyBpcyBkaXNhYmxlZCcpIH0pKSksIHBhcnRpY2lwYW50LmltYWdlICYmICFlcnJvciAmJiAoanN4KFwiaW1nXCIsIHsgb25FcnJvcjogKCkgPT4gc2V0RXJyb3IodHJ1ZSksIGFsdDogXCJ2aWRlby1wbGFjZWhvbGRlclwiLCBjbGFzc05hbWU6IFwic3RyLXZpZGVvX192aWRlby1wbGFjZWhvbGRlcl9fYXZhdGFyXCIsIHNyYzogcGFydGljaXBhbnQuaW1hZ2UgfSkpXSB9KSk7XG59KTtcbmNvbnN0IEluaXRpYWxzRmFsbGJhY2sgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IHByb3BzO1xuICAgIGNvbnN0IGluaXRpYWxzID0gbmFtZVxuICAgICAgICAuc3BsaXQoJyAnKVxuICAgICAgICAuc2xpY2UoMCwgMilcbiAgICAgICAgLm1hcCgobikgPT4gblswXSlcbiAgICAgICAgLmpvaW4oJycpO1xuICAgIHJldHVybiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fdmlkZW8tcGxhY2Vob2xkZXJfX2luaXRpYWxzLWZhbGxiYWNrXCIsIGNoaWxkcmVuOiBpbml0aWFscyB9KSk7XG59O1xuXG5jb25zdCBWaWRlbyQxID0gKHsgdHJhY2tUeXBlLCBwYXJ0aWNpcGFudCwgY2xhc3NOYW1lLCBWaWRlb1BsYWNlaG9sZGVyID0gRGVmYXVsdFZpZGVvUGxhY2Vob2xkZXIsIHJlZnMsIC4uLnJlc3QgfSkgPT4ge1xuICAgIGNvbnN0IHsgc2Vzc2lvbklkLCB2aWRlb1N0cmVhbSwgc2NyZWVuU2hhcmVTdHJlYW0sIHZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlLCBpc0xvY2FsUGFydGljaXBhbnQsIHVzZXJJZCwgfSA9IHBhcnRpY2lwYW50O1xuICAgIGNvbnN0IGNhbGwgPSB1c2VDYWxsKCk7XG4gICAgY29uc3QgW3ZpZGVvRWxlbWVudCwgc2V0VmlkZW9FbGVtZW50XSA9IHVzZVN0YXRlKG51bGwpO1xuICAgIC8vIHN0YXJ0IHdpdGggdHJ1ZSwgd2lsbCBmbGlwIG9uY2UgdGhlIHZpZGVvIHN0YXJ0cyBwbGF5aW5nXG4gICAgY29uc3QgW2lzVmlkZW9QYXVzZWQsIHNldElzVmlkZW9QYXVzZWRdID0gdXNlU3RhdGUodHJ1ZSk7XG4gICAgY29uc3QgW2lzV2lkZU1vZGUsIHNldElzV2lkZU1vZGVdID0gdXNlU3RhdGUodHJ1ZSk7XG4gICAgY29uc3Qgc3RyZWFtID0gdHJhY2tUeXBlID09PSAndmlkZW9UcmFjaydcbiAgICAgICAgPyB2aWRlb1N0cmVhbVxuICAgICAgICA6IHRyYWNrVHlwZSA9PT0gJ3NjcmVlblNoYXJlVHJhY2snXG4gICAgICAgICAgICA/IHNjcmVlblNoYXJlU3RyZWFtXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNhbGwgfHwgIXZpZGVvRWxlbWVudCB8fCB0cmFja1R5cGUgPT09ICdub25lJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgY2xlYW51cCA9IGNhbGwuYmluZFZpZGVvRWxlbWVudCh2aWRlb0VsZW1lbnQsIHNlc3Npb25JZCwgdHJhY2tUeXBlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFudXA/LigpO1xuICAgICAgICB9O1xuICAgIH0sIFtjYWxsLCB0cmFja1R5cGUsIHNlc3Npb25JZCwgdmlkZW9FbGVtZW50XSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFzdHJlYW0gfHwgIXZpZGVvRWxlbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgW3RyYWNrXSA9IHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpO1xuICAgICAgICBpZiAoIXRyYWNrKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBoYW5kbGVQbGF5UGF1c2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBzZXRJc1ZpZGVvUGF1c2VkKHZpZGVvRWxlbWVudC5wYXVzZWQpO1xuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCA9IDAsIGhlaWdodCA9IDAgfSA9IHRyYWNrLmdldFNldHRpbmdzKCk7XG4gICAgICAgICAgICBzZXRJc1dpZGVNb2RlKHdpZHRoID49IGhlaWdodCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIHBsYXliYWNrIG1heSBoYXZlIHN0YXJ0ZWQgYmVmb3JlIHdlIGhhZCBhIGNoYW5jZSB0b1xuICAgICAgICAvLyBhdHRhY2ggdGhlICdwbGF5L3BhdXNlJyBldmVudCBsaXN0ZW5lciwgc28gd2Ugc2V0IHRoZSBzdGF0ZVxuICAgICAgICAvLyBoZXJlIHRvIG1ha2Ugc3VyZSBpdCdzIGluIHN5bmNcbiAgICAgICAgc2V0SXNWaWRlb1BhdXNlZCh2aWRlb0VsZW1lbnQucGF1c2VkKTtcbiAgICAgICAgdmlkZW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBoYW5kbGVQbGF5UGF1c2UpO1xuICAgICAgICB2aWRlb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncGF1c2UnLCBoYW5kbGVQbGF5UGF1c2UpO1xuICAgICAgICB0cmFjay5hZGRFdmVudExpc3RlbmVyKCd1bm11dGUnLCBoYW5kbGVQbGF5UGF1c2UpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXknLCBoYW5kbGVQbGF5UGF1c2UpO1xuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgaGFuZGxlUGxheVBhdXNlKTtcbiAgICAgICAgICAgIHRyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VubXV0ZScsIGhhbmRsZVBsYXlQYXVzZSk7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgJ3BhdXNlJyBzdGF0ZSBvbmNlIHdlIHVubW91bnQgdGhlIHZpZGVvIGVsZW1lbnRcbiAgICAgICAgICAgIHNldElzVmlkZW9QYXVzZWQodHJ1ZSk7XG4gICAgICAgIH07XG4gICAgfSwgW3N0cmVhbSwgdmlkZW9FbGVtZW50XSk7XG4gICAgaWYgKCFjYWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBpc1B1Ymxpc2hpbmdUcmFjayA9IHRyYWNrVHlwZSA9PT0gJ3ZpZGVvVHJhY2snXG4gICAgICAgID8gaGFzVmlkZW8ocGFydGljaXBhbnQpXG4gICAgICAgIDogdHJhY2tUeXBlID09PSAnc2NyZWVuU2hhcmVUcmFjaydcbiAgICAgICAgICAgID8gaGFzU2NyZWVuU2hhcmUocGFydGljaXBhbnQpXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgIGNvbnN0IGlzSW52aXNpYmxlID0gdHJhY2tUeXBlID09PSAnbm9uZScgfHxcbiAgICAgICAgdmlld3BvcnRWaXNpYmlsaXR5U3RhdGU/Llt0cmFja1R5cGVdID09PSBWaXNpYmlsaXR5U3RhdGUuSU5WSVNJQkxFO1xuICAgIGNvbnN0IGhhc05vVmlkZW9PckludmlzaWJsZSA9ICFpc1B1Ymxpc2hpbmdUcmFjayB8fCBpc0ludmlzaWJsZTtcbiAgICBjb25zdCBtaXJyb3JWaWRlbyA9IGlzTG9jYWxQYXJ0aWNpcGFudCAmJiB0cmFja1R5cGUgPT09ICd2aWRlb1RyYWNrJztcbiAgICBjb25zdCBpc1NjcmVlblNoYXJlVHJhY2sgPSB0cmFja1R5cGUgPT09ICdzY3JlZW5TaGFyZVRyYWNrJztcbiAgICByZXR1cm4gKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFshaGFzTm9WaWRlb09ySW52aXNpYmxlICYmIChqc3goXCJ2aWRlb1wiLCB7IC4uLnJlc3QsIGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX192aWRlbycsIGNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAnc3RyLXZpZGVvX192aWRlby0tbm90LXBsYXlpbmcnOiBpc1ZpZGVvUGF1c2VkLFxuICAgICAgICAgICAgICAgICAgICAnc3RyLXZpZGVvX192aWRlby0tdGFsbCc6ICFpc1dpZGVNb2RlLFxuICAgICAgICAgICAgICAgICAgICAnc3RyLXZpZGVvX192aWRlby0tbWlycm9yJzogbWlycm9yVmlkZW8sXG4gICAgICAgICAgICAgICAgICAgICdzdHItdmlkZW9fX3ZpZGVvLS1zY3JlZW4tc2hhcmUnOiBpc1NjcmVlblNoYXJlVHJhY2ssXG4gICAgICAgICAgICAgICAgfSksIFwiZGF0YS11c2VyLWlkXCI6IHVzZXJJZCwgXCJkYXRhLXNlc3Npb24taWRcIjogc2Vzc2lvbklkLCByZWY6IChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldFZpZGVvRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmVmcz8uc2V0VmlkZW9FbGVtZW50Py4oZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfSB9KSksIChoYXNOb1ZpZGVvT3JJbnZpc2libGUgfHwgaXNWaWRlb1BhdXNlZCkgJiYgVmlkZW9QbGFjZWhvbGRlciAmJiAoanN4KFZpZGVvUGxhY2Vob2xkZXIsIHsgc3R5bGU6IHsgcG9zaXRpb246ICdhYnNvbHV0ZScgfSwgcGFydGljaXBhbnQ6IHBhcnRpY2lwYW50LCByZWY6IHJlZnM/LnNldFZpZGVvUGxhY2Vob2xkZXJFbGVtZW50IH0pKV0gfSkpO1xufTtcblZpZGVvJDEuZGlzcGxheU5hbWUgPSAnVmlkZW8nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBFeHRlbmRzIHZpZGVvIGVsZW1lbnQgd2l0aCBgc3RyZWFtYCBwcm9wZXJ0eVxuICogKGBzcmNPYmplY3RgKSB0byByZWFjdGl2ZWx5IGhhbmRsZSBzdHJlYW0gY2hhbmdlc1xuICovXG5jb25zdCBCYXNlVmlkZW8gPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIEJhc2VWaWRlbyh7IHN0cmVhbSwgLi4ucmVzdCB9LCByZWYpIHtcbiAgICBjb25zdCBbdmlkZW9FbGVtZW50LCBzZXRWaWRlb0VsZW1lbnRdID0gdXNlU3RhdGUobnVsbCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCF2aWRlb0VsZW1lbnQgfHwgIXN0cmVhbSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHN0cmVhbSA9PT0gdmlkZW9FbGVtZW50LnNyY09iamVjdClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCA9IHN0cmVhbTtcbiAgICAgICAgaWYgKEJyb3dzZXJzLmlzU2FmYXJpKCkgfHwgQnJvd3NlcnMuaXNGaXJlZm94KCkpIHtcbiAgICAgICAgICAgIC8vIEZpcmVmb3ggYW5kIFNhZmFyaSBoYXZlIHNvbWUgdGltaW5nIGlzc3VlXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudC5wbGF5KCkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHBsYXkgc3RyZWFtYCwgZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnBhdXNlKCk7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICB9LCBbc3RyZWFtLCB2aWRlb0VsZW1lbnRdKTtcbiAgICByZXR1cm4gKGpzeChcInZpZGVvXCIsIHsgYXV0b1BsYXk6IHRydWUsIHBsYXlzSW5saW5lOiB0cnVlLCAuLi5yZXN0LCByZWY6IChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBhcHBseUVsZW1lbnRUb1JlZihyZWYsIGVsZW1lbnQpO1xuICAgICAgICAgICAgc2V0VmlkZW9FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9IH0pKTtcbn0pO1xuXG5jb25zdCBEZWZhdWx0RGlzYWJsZWRWaWRlb1ByZXZpZXcgPSAoKSA9PiB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgcmV0dXJuIChqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyX3ZpZGVvX192aWRlby1wcmV2aWV3X19kaXNhYmxlZC12aWRlby1wcmV2aWV3XCIsIGNoaWxkcmVuOiB0KCdWaWRlbyBpcyBkaXNhYmxlZCcpIH0pKTtcbn07XG5jb25zdCBEZWZhdWx0Tm9DYW1lcmFQcmV2aWV3ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIHJldHVybiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0cl92aWRlb19fdmlkZW8tcHJldmlld19fbm8tY2FtZXJhLXByZXZpZXdcIiwgY2hpbGRyZW46IHQoJ05vIGNhbWVyYSBmb3VuZCcpIH0pKTtcbn07XG5jb25zdCBWaWRlb1ByZXZpZXcgPSAoeyBjbGFzc05hbWUsIG1pcnJvciA9IHRydWUsIERpc2FibGVkVmlkZW9QcmV2aWV3ID0gRGVmYXVsdERpc2FibGVkVmlkZW9QcmV2aWV3LCBOb0NhbWVyYVByZXZpZXcgPSBEZWZhdWx0Tm9DYW1lcmFQcmV2aWV3LCBTdGFydGluZ0NhbWVyYVByZXZpZXcgPSBMb2FkaW5nSW5kaWNhdG9yLCB9KSA9PiB7XG4gICAgY29uc3QgeyB1c2VDYW1lcmFTdGF0ZSB9ID0gdXNlQ2FsbFN0YXRlSG9va3MoKTtcbiAgICBjb25zdCB7IGRldmljZXMsIHN0YXR1cywgaXNNdXRlLCBtZWRpYVN0cmVhbSB9ID0gdXNlQ2FtZXJhU3RhdGUoKTtcbiAgICBsZXQgY29udGVudHM7XG4gICAgaWYgKGlzTXV0ZSAmJiBkZXZpY2VzPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29udGVudHMgPSBqc3goTm9DYW1lcmFQcmV2aWV3LCB7fSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0YXR1cyA9PT0gJ2VuYWJsZWQnKSB7XG4gICAgICAgIGNvbnN0IGxvYWRpbmcgPSAhbWVkaWFTdHJlYW07XG4gICAgICAgIGNvbnRlbnRzID0gKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFttZWRpYVN0cmVhbSAmJiAoanN4KEJhc2VWaWRlbywgeyBzdHJlYW06IG1lZGlhU3RyZWFtLCBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fdmlkZW8tcHJldmlldycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdHItdmlkZW9fX3ZpZGVvLXByZXZpZXctLW1pcnJvcic6IG1pcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdHItdmlkZW9fX3ZpZGVvLXByZXZpZXctLWxvYWRpbmcnOiBsb2FkaW5nLFxuICAgICAgICAgICAgICAgICAgICB9KSB9KSksIGxvYWRpbmcgJiYganN4KFN0YXJ0aW5nQ2FtZXJhUHJldmlldywge30pXSB9KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb250ZW50cyA9IGpzeChEaXNhYmxlZFZpZGVvUHJldmlldywge30pO1xuICAgIH1cbiAgICByZXR1cm4gKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeCgnc3RyLXZpZGVvX192aWRlby1wcmV2aWV3LWNvbnRhaW5lcicsIGNsYXNzTmFtZSksIGNoaWxkcmVuOiBjb250ZW50cyB9KSk7XG59O1xuXG5jb25zdCBQYXJ0aWNpcGFudEFjdGlvbnNDb250ZXh0TWVudSA9ICgpID0+IHtcbiAgICBjb25zdCB7IHBhcnRpY2lwYW50LCBwYXJ0aWNpcGFudFZpZXdFbGVtZW50LCB2aWRlb0VsZW1lbnQgfSA9IHVzZVBhcnRpY2lwYW50Vmlld0NvbnRleHQoKTtcbiAgICBjb25zdCBbZnVsbHNjcmVlbk1vZGVPbiwgc2V0RnVsbHNjcmVlbk1vZGVPbl0gPSB1c2VTdGF0ZSghIWRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50KTtcbiAgICBjb25zdCBbcGljdHVyZUluUGljdHVyZUVsZW1lbnQsIHNldFBpY3R1cmVJblBpY3R1cmVFbGVtZW50XSA9IHVzZVN0YXRlKGRvY3VtZW50LnBpY3R1cmVJblBpY3R1cmVFbGVtZW50KTtcbiAgICBjb25zdCBjYWxsID0gdXNlQ2FsbCgpO1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIGNvbnN0IHsgcGluLCBzZXNzaW9uSWQsIHVzZXJJZCB9ID0gcGFydGljaXBhbnQ7XG4gICAgY29uc3QgaGFzQXVkaW9UcmFjayA9IGhhc0F1ZGlvKHBhcnRpY2lwYW50KTtcbiAgICBjb25zdCBoYXNWaWRlb1RyYWNrID0gaGFzVmlkZW8ocGFydGljaXBhbnQpO1xuICAgIGNvbnN0IGhhc1NjcmVlblNoYXJlVHJhY2sgPSBoYXNTY3JlZW5TaGFyZShwYXJ0aWNpcGFudCk7XG4gICAgY29uc3QgaGFzU2NyZWVuU2hhcmVBdWRpb1RyYWNrID0gaGFzU2NyZWVuU2hhcmVBdWRpbyhwYXJ0aWNpcGFudCk7XG4gICAgY29uc3QgYmxvY2tVc2VyID0gKCkgPT4gY2FsbD8uYmxvY2tVc2VyKHVzZXJJZCk7XG4gICAgY29uc3QgbXV0ZUF1ZGlvID0gKCkgPT4gY2FsbD8ubXV0ZVVzZXIodXNlcklkLCAnYXVkaW8nKTtcbiAgICBjb25zdCBtdXRlVmlkZW8gPSAoKSA9PiBjYWxsPy5tdXRlVXNlcih1c2VySWQsICd2aWRlbycpO1xuICAgIGNvbnN0IG11dGVTY3JlZW5TaGFyZSA9ICgpID0+IGNhbGw/Lm11dGVVc2VyKHVzZXJJZCwgJ3NjcmVlbnNoYXJlJyk7XG4gICAgY29uc3QgbXV0ZVNjcmVlblNoYXJlQXVkaW8gPSAoKSA9PiBjYWxsPy5tdXRlVXNlcih1c2VySWQsICdzY3JlZW5zaGFyZV9hdWRpbycpO1xuICAgIGNvbnN0IGdyYW50UGVybWlzc2lvbiA9IChwZXJtaXNzaW9uKSA9PiAoKSA9PiB7XG4gICAgICAgIGNhbGw/LnVwZGF0ZVVzZXJQZXJtaXNzaW9ucyh7XG4gICAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgICBncmFudF9wZXJtaXNzaW9uczogW3Blcm1pc3Npb25dLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHJldm9rZVBlcm1pc3Npb24gPSAocGVybWlzc2lvbikgPT4gKCkgPT4ge1xuICAgICAgICBjYWxsPy51cGRhdGVVc2VyUGVybWlzc2lvbnMoe1xuICAgICAgICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgICAgICAgcmV2b2tlX3Blcm1pc3Npb25zOiBbcGVybWlzc2lvbl0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlUGFydGljaXBhbnRQaW4gPSAoKSA9PiB7XG4gICAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgICAgIGNhbGw/LnVucGluKHNlc3Npb25JZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWxsPy5waW4oc2Vzc2lvbklkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcGluRm9yRXZlcnlvbmUgPSAoKSA9PiB7XG4gICAgICAgIGNhbGxcbiAgICAgICAgICAgID8ucGluRm9yRXZlcnlvbmUoe1xuICAgICAgICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBwaW4gcGFydGljaXBhbnQgJHt1c2VySWR9YCwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1bnBpbkZvckV2ZXJ5b25lID0gKCkgPT4ge1xuICAgICAgICBjYWxsXG4gICAgICAgICAgICA/LnVucGluRm9yRXZlcnlvbmUoe1xuICAgICAgICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byB1bnBpbiBwYXJ0aWNpcGFudCAke3VzZXJJZH1gLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUZ1bGxzY3JlZW5Nb2RlID0gKCkgPT4ge1xuICAgICAgICBpZiAoIWZ1bGxzY3JlZW5Nb2RlT24pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0aWNpcGFudFZpZXdFbGVtZW50Py5yZXF1ZXN0RnVsbHNjcmVlbigpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgIH07XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgLy8gaGFuZGxlcyB0aGUgY2FzZSB3aGVuIGZ1bGxzY3JlZW4gbW9kZSBpcyB0b2dnbGVkIGV4dGVybmFsbHksXG4gICAgICAgIC8vIGUuZy4sIGJ5IHByZXNzaW5nIEVTQyBrZXkgb3Igc29tZSBvdGhlciBrZXlib2FyZCBzaG9ydGN1dFxuICAgICAgICBjb25zdCBoYW5kbGVGdWxsc2NyZWVuQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgc2V0RnVsbHNjcmVlbk1vZGVPbighIWRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UpO1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXZpZGVvRWxlbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgaGFuZGxlUGlQID0gKCkgPT4ge1xuICAgICAgICAgICAgc2V0UGljdHVyZUluUGljdHVyZUVsZW1lbnQoZG9jdW1lbnQucGljdHVyZUluUGljdHVyZUVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgICAgICB2aWRlb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZW50ZXJwaWN0dXJlaW5waWN0dXJlJywgaGFuZGxlUGlQKTtcbiAgICAgICAgdmlkZW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2xlYXZlcGljdHVyZWlucGljdHVyZScsIGhhbmRsZVBpUCk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW50ZXJwaWN0dXJlaW5waWN0dXJlJywgaGFuZGxlUGlQKTtcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdsZWF2ZXBpY3R1cmVpbnBpY3R1cmUnLCBoYW5kbGVQaVApO1xuICAgICAgICB9O1xuICAgIH0sIFt2aWRlb0VsZW1lbnRdKTtcbiAgICBjb25zdCB0b2dnbGVQaWN0dXJlSW5QaWN0dXJlID0gKCkgPT4ge1xuICAgICAgICBpZiAodmlkZW9FbGVtZW50ICYmIHBpY3R1cmVJblBpY3R1cmVFbGVtZW50ICE9PSB2aWRlb0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWRlb0VsZW1lbnRcbiAgICAgICAgICAgICAgICAucmVxdWVzdFBpY3R1cmVJblBpY3R1cmUoKVxuICAgICAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZXhpdFBpY3R1cmVJblBpY3R1cmUoKS5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICB9O1xuICAgIGNvbnN0IHsgY2xvc2UgfSA9IHVzZU1lbnVDb250ZXh0KCkgfHwge307XG4gICAgcmV0dXJuIChqc3hzKEdlbmVyaWNNZW51LCB7IG9uSXRlbUNsaWNrOiBjbG9zZSwgY2hpbGRyZW46IFtqc3hzKEdlbmVyaWNNZW51QnV0dG9uSXRlbSwgeyBvbkNsaWNrOiB0b2dnbGVQYXJ0aWNpcGFudFBpbiwgZGlzYWJsZWQ6IHBpbiAmJiAhcGluLmlzTG9jYWxQaW4sIGNoaWxkcmVuOiBbanN4KEljb24sIHsgaWNvbjogXCJwaW5cIiB9KSwgcGluID8gdCgnVW5waW4nKSA6IHQoJ1BpbicpXSB9KSwganN4cyhSZXN0cmljdGVkLCB7IHJlcXVpcmVkR3JhbnRzOiBbT3duQ2FwYWJpbGl0eS5QSU5fRk9SX0VWRVJZT05FXSwgY2hpbGRyZW46IFtqc3hzKEdlbmVyaWNNZW51QnV0dG9uSXRlbSwgeyBvbkNsaWNrOiBwaW5Gb3JFdmVyeW9uZSwgZGlzYWJsZWQ6IHBpbiAmJiAhcGluLmlzTG9jYWxQaW4sIGNoaWxkcmVuOiBbanN4KEljb24sIHsgaWNvbjogXCJwaW5cIiB9KSwgdCgnUGluIGZvciBldmVyeW9uZScpXSB9KSwganN4cyhHZW5lcmljTWVudUJ1dHRvbkl0ZW0sIHsgb25DbGljazogdW5waW5Gb3JFdmVyeW9uZSwgZGlzYWJsZWQ6ICFwaW4gfHwgcGluLmlzTG9jYWxQaW4sIGNoaWxkcmVuOiBbanN4KEljb24sIHsgaWNvbjogXCJwaW5cIiB9KSwgdCgnVW5waW4gZm9yIGV2ZXJ5b25lJyldIH0pXSB9KSwganN4KFJlc3RyaWN0ZWQsIHsgcmVxdWlyZWRHcmFudHM6IFtPd25DYXBhYmlsaXR5LkJMT0NLX1VTRVJTXSwgY2hpbGRyZW46IGpzeHMoR2VuZXJpY01lbnVCdXR0b25JdGVtLCB7IG9uQ2xpY2s6IGJsb2NrVXNlciwgY2hpbGRyZW46IFtqc3goSWNvbiwgeyBpY29uOiBcIm5vdC1hbGxvd2VkXCIgfSksIHQoJ0Jsb2NrJyldIH0pIH0pLCBqc3hzKFJlc3RyaWN0ZWQsIHsgcmVxdWlyZWRHcmFudHM6IFtPd25DYXBhYmlsaXR5Lk1VVEVfVVNFUlNdLCBjaGlsZHJlbjogW2hhc1ZpZGVvVHJhY2sgJiYgKGpzeHMoR2VuZXJpY01lbnVCdXR0b25JdGVtLCB7IG9uQ2xpY2s6IG11dGVWaWRlbywgY2hpbGRyZW46IFtqc3goSWNvbiwgeyBpY29uOiBcImNhbWVyYS1vZmYtb3V0bGluZVwiIH0pLCB0KCdUdXJuIG9mZiB2aWRlbycpXSB9KSksIGhhc1NjcmVlblNoYXJlVHJhY2sgJiYgKGpzeHMoR2VuZXJpY01lbnVCdXR0b25JdGVtLCB7IG9uQ2xpY2s6IG11dGVTY3JlZW5TaGFyZSwgY2hpbGRyZW46IFtqc3goSWNvbiwgeyBpY29uOiBcInNjcmVlbi1zaGFyZS1vZmZcIiB9KSwgdCgnVHVybiBvZmYgc2NyZWVuIHNoYXJlJyldIH0pKSwgaGFzQXVkaW9UcmFjayAmJiAoanN4cyhHZW5lcmljTWVudUJ1dHRvbkl0ZW0sIHsgb25DbGljazogbXV0ZUF1ZGlvLCBjaGlsZHJlbjogW2pzeChJY29uLCB7IGljb246IFwibm8tYXVkaW9cIiB9KSwgdCgnTXV0ZSBhdWRpbycpXSB9KSksIGhhc1NjcmVlblNoYXJlQXVkaW9UcmFjayAmJiAoanN4cyhHZW5lcmljTWVudUJ1dHRvbkl0ZW0sIHsgb25DbGljazogbXV0ZVNjcmVlblNoYXJlQXVkaW8sIGNoaWxkcmVuOiBbanN4KEljb24sIHsgaWNvbjogXCJuby1hdWRpb1wiIH0pLCB0KCdNdXRlIHNjcmVlbiBzaGFyZSBhdWRpbycpXSB9KSldIH0pLCBwYXJ0aWNpcGFudFZpZXdFbGVtZW50ICYmIChqc3goR2VuZXJpY01lbnVCdXR0b25JdGVtLCB7IG9uQ2xpY2s6IHRvZ2dsZUZ1bGxzY3JlZW5Nb2RlLCBjaGlsZHJlbjogdCgne3sgZGlyZWN0aW9uIH19IGZ1bGxzY3JlZW4nLCB7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogZnVsbHNjcmVlbk1vZGVPbiA/IHQoJ0xlYXZlJykgOiB0KCdFbnRlcicpLFxuICAgICAgICAgICAgICAgIH0pIH0pKSwgdmlkZW9FbGVtZW50ICYmIGRvY3VtZW50LnBpY3R1cmVJblBpY3R1cmVFbmFibGVkICYmIChqc3goR2VuZXJpY01lbnVCdXR0b25JdGVtLCB7IG9uQ2xpY2s6IHRvZ2dsZVBpY3R1cmVJblBpY3R1cmUsIGNoaWxkcmVuOiB0KCd7eyBkaXJlY3Rpb24gfX0gcGljdHVyZS1pbi1waWN0dXJlJywge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IHBpY3R1cmVJblBpY3R1cmVFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdCgnTGVhdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0KCdFbnRlcicpLFxuICAgICAgICAgICAgICAgIH0pIH0pKSwganN4cyhSZXN0cmljdGVkLCB7IHJlcXVpcmVkR3JhbnRzOiBbT3duQ2FwYWJpbGl0eS5VUERBVEVfQ0FMTF9QRVJNSVNTSU9OU10sIGNoaWxkcmVuOiBbanN4KEdlbmVyaWNNZW51QnV0dG9uSXRlbSwgeyBvbkNsaWNrOiBncmFudFBlcm1pc3Npb24oT3duQ2FwYWJpbGl0eS5TRU5EX0FVRElPKSwgY2hpbGRyZW46IHQoJ0FsbG93IGF1ZGlvJykgfSksIGpzeChHZW5lcmljTWVudUJ1dHRvbkl0ZW0sIHsgb25DbGljazogZ3JhbnRQZXJtaXNzaW9uKE93bkNhcGFiaWxpdHkuU0VORF9WSURFTyksIGNoaWxkcmVuOiB0KCdBbGxvdyB2aWRlbycpIH0pLCBqc3goR2VuZXJpY01lbnVCdXR0b25JdGVtLCB7IG9uQ2xpY2s6IGdyYW50UGVybWlzc2lvbihPd25DYXBhYmlsaXR5LlNDUkVFTlNIQVJFKSwgY2hpbGRyZW46IHQoJ0FsbG93IHNjcmVlbiBzaGFyaW5nJykgfSksIGpzeChHZW5lcmljTWVudUJ1dHRvbkl0ZW0sIHsgb25DbGljazogcmV2b2tlUGVybWlzc2lvbihPd25DYXBhYmlsaXR5LlNFTkRfQVVESU8pLCBjaGlsZHJlbjogdCgnRGlzYWJsZSBhdWRpbycpIH0pLCBqc3goR2VuZXJpY01lbnVCdXR0b25JdGVtLCB7IG9uQ2xpY2s6IHJldm9rZVBlcm1pc3Npb24oT3duQ2FwYWJpbGl0eS5TRU5EX1ZJREVPKSwgY2hpbGRyZW46IHQoJ0Rpc2FibGUgdmlkZW8nKSB9KSwganN4KEdlbmVyaWNNZW51QnV0dG9uSXRlbSwgeyBvbkNsaWNrOiByZXZva2VQZXJtaXNzaW9uKE93bkNhcGFiaWxpdHkuU0NSRUVOU0hBUkUpLCBjaGlsZHJlbjogdCgnRGlzYWJsZSBzY3JlZW4gc2hhcmluZycpIH0pXSB9KV0gfSkpO1xufTtcblxuY29uc3QgdXNlVHJhY2tFbGVtZW50VmlzaWJpbGl0eSA9ICh7IHRyYWNrZWRFbGVtZW50LCBkeW5hc2NhbGVNYW5hZ2VyOiBwcm9wc0R5bmFzY2FsZU1hbmFnZXIsIHNlc3Npb25JZCwgdHJhY2tUeXBlLCB9KSA9PiB7XG4gICAgY29uc3QgY2FsbCA9IHVzZUNhbGwoKTtcbiAgICBjb25zdCBtYW5hZ2VyID0gcHJvcHNEeW5hc2NhbGVNYW5hZ2VyID8/IGNhbGw/LmR5bmFzY2FsZU1hbmFnZXI7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCF0cmFja2VkRWxlbWVudCB8fCAhbWFuYWdlciB8fCAhY2FsbCB8fCB0cmFja1R5cGUgPT09ICdub25lJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdW5vYnNlcnZlID0gbWFuYWdlci50cmFja0VsZW1lbnRWaXNpYmlsaXR5KHRyYWNrZWRFbGVtZW50LCBzZXNzaW9uSWQsIHRyYWNrVHlwZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB1bm9ic2VydmUoKTtcbiAgICAgICAgfTtcbiAgICB9LCBbdHJhY2tlZEVsZW1lbnQsIG1hbmFnZXIsIGNhbGwsIHNlc3Npb25JZCwgdHJhY2tUeXBlXSk7XG59O1xuXG5jb25zdCBUb2dnbGVCdXR0b24gPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIFRvZ2dsZUJ1dHRvbihwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIGpzeChJY29uQnV0dG9uLCB7IGVuYWJsZWQ6IHByb3BzLm1lbnVTaG93biwgaWNvbjogXCJlbGxpcHNpc1wiLCByZWY6IHJlZiB9KTtcbn0pO1xuY29uc3QgRGVmYXVsdFNjcmVlblNoYXJlT3ZlcmxheSA9ICgpID0+IHtcbiAgICBjb25zdCBjYWxsID0gdXNlQ2FsbCgpO1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIGNvbnN0IHN0b3BTY3JlZW5TaGFyZSA9ICgpID0+IHtcbiAgICAgICAgY2FsbD8uc2NyZWVuU2hhcmUuZGlzYWJsZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIChqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fc2NyZWVuLXNoYXJlLW92ZXJsYXlcIiwgY2hpbGRyZW46IFtqc3goSWNvbiwgeyBpY29uOiBcInNjcmVlbi1zaGFyZS1vZmZcIiB9KSwganN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NjcmVlbi1zaGFyZS1vdmVybGF5X190aXRsZVwiLCBjaGlsZHJlbjogdCgnWW91IGFyZSBwcmVzZW50aW5nIHlvdXIgc2NyZWVuJykgfSksIGpzeHMoXCJidXR0b25cIiwgeyBvbkNsaWNrOiBzdG9wU2NyZWVuU2hhcmUsIGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NjcmVlbi1zaGFyZS1vdmVybGF5X19idXR0b25cIiwgY2hpbGRyZW46IFtqc3goSWNvbiwgeyBpY29uOiBcImNsb3NlXCIgfSksIFwiIFwiLCB0KCdTdG9wIFNjcmVlbiBTaGFyaW5nJyldIH0pXSB9KSk7XG59O1xuY29uc3QgRGVmYXVsdFBhcnRpY2lwYW50Vmlld1VJID0gKHsgaW5kaWNhdG9yc1Zpc2libGUgPSB0cnVlLCBtZW51UGxhY2VtZW50ID0gJ2JvdHRvbS1zdGFydCcsIHNob3dNZW51QnV0dG9uID0gdHJ1ZSwgUGFydGljaXBhbnRBY3Rpb25zQ29udGV4dE1lbnU6IFBhcnRpY2lwYW50QWN0aW9uc0NvbnRleHRNZW51JDEgPSBQYXJ0aWNpcGFudEFjdGlvbnNDb250ZXh0TWVudSwgfSkgPT4ge1xuICAgIGNvbnN0IHsgcGFydGljaXBhbnQsIHRyYWNrVHlwZSB9ID0gdXNlUGFydGljaXBhbnRWaWV3Q29udGV4dCgpO1xuICAgIGNvbnN0IGlzU2NyZWVuU2hhcmluZyA9IGhhc1NjcmVlblNoYXJlKHBhcnRpY2lwYW50KTtcbiAgICBpZiAocGFydGljaXBhbnQuaXNMb2NhbFBhcnRpY2lwYW50ICYmXG4gICAgICAgIGlzU2NyZWVuU2hhcmluZyAmJlxuICAgICAgICB0cmFja1R5cGUgPT09ICdzY3JlZW5TaGFyZVRyYWNrJykge1xuICAgICAgICByZXR1cm4gKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtqc3goRGVmYXVsdFNjcmVlblNoYXJlT3ZlcmxheSwge30pLCBqc3goUGFydGljaXBhbnREZXRhaWxzLCB7IGluZGljYXRvcnNWaXNpYmxlOiBpbmRpY2F0b3JzVmlzaWJsZSB9KV0gfSkpO1xuICAgIH1cbiAgICByZXR1cm4gKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtzaG93TWVudUJ1dHRvbiAmJiAoanN4KE1lbnVUb2dnbGUsIHsgc3RyYXRlZ3k6IFwiZml4ZWRcIiwgcGxhY2VtZW50OiBtZW51UGxhY2VtZW50LCBUb2dnbGVCdXR0b246IFRvZ2dsZUJ1dHRvbiwgY2hpbGRyZW46IGpzeChQYXJ0aWNpcGFudEFjdGlvbnNDb250ZXh0TWVudSQxLCB7fSkgfSkpLCBqc3goUmVhY3Rpb24sIHsgcGFydGljaXBhbnQ6IHBhcnRpY2lwYW50IH0pLCBqc3goUGFydGljaXBhbnREZXRhaWxzLCB7IGluZGljYXRvcnNWaXNpYmxlOiBpbmRpY2F0b3JzVmlzaWJsZSB9KV0gfSkpO1xufTtcbmNvbnN0IFBhcnRpY2lwYW50RGV0YWlscyA9ICh7IGluZGljYXRvcnNWaXNpYmxlID0gdHJ1ZSwgfSkgPT4ge1xuICAgIGNvbnN0IHsgcGFydGljaXBhbnQgfSA9IHVzZVBhcnRpY2lwYW50Vmlld0NvbnRleHQoKTtcbiAgICBjb25zdCB7IGlzTG9jYWxQYXJ0aWNpcGFudCwgY29ubmVjdGlvblF1YWxpdHksIHBpbiwgc2Vzc2lvbklkLCBuYW1lLCB1c2VySWQsIH0gPSBwYXJ0aWNpcGFudDtcbiAgICBjb25zdCBjYWxsID0gdXNlQ2FsbCgpO1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIGNvbnN0IGNvbm5lY3Rpb25RdWFsaXR5QXNTdHJpbmcgPSAhIWNvbm5lY3Rpb25RdWFsaXR5ICYmXG4gICAgICAgIFNmdU1vZGVscy5Db25uZWN0aW9uUXVhbGl0eVtjb25uZWN0aW9uUXVhbGl0eV0udG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBoYXNBdWRpb1RyYWNrID0gaGFzQXVkaW8ocGFydGljaXBhbnQpO1xuICAgIGNvbnN0IGhhc1ZpZGVvVHJhY2sgPSBoYXNWaWRlbyhwYXJ0aWNpcGFudCk7XG4gICAgY29uc3QgY2FuVW5waW4gPSAhIXBpbiAmJiBwaW4uaXNMb2NhbFBpbjtcbiAgICByZXR1cm4gKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wYXJ0aWNpcGFudC1kZXRhaWxzXCIsIGNoaWxkcmVuOiBqc3hzKFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3BhcnRpY2lwYW50LWRldGFpbHNfX25hbWVcIiwgY2hpbGRyZW46IFtuYW1lIHx8IHVzZXJJZCwgaW5kaWNhdG9yc1Zpc2libGUgJiYgIWhhc0F1ZGlvVHJhY2sgJiYgKGpzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wYXJ0aWNpcGFudC1kZXRhaWxzX19uYW1lLS1hdWRpby1tdXRlZFwiIH0pKSwgaW5kaWNhdG9yc1Zpc2libGUgJiYgIWhhc1ZpZGVvVHJhY2sgJiYgKGpzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wYXJ0aWNpcGFudC1kZXRhaWxzX19uYW1lLS12aWRlby1tdXRlZFwiIH0pKSwgaW5kaWNhdG9yc1Zpc2libGUgJiYgY2FuVW5waW4gJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgbW9uc3Ryb3NpdHkgb25jZSB3ZSBoYXZlIGEgcHJvcGVyIGRlc2lnblxuICAgICAgICAgICAgICAgICAgICAgICAganN4KFwic3BhblwiLCB7IHRpdGxlOiB0KCdVbnBpbicpLCBvbkNsaWNrOiAoKSA9PiBjYWxsPy51bnBpbihzZXNzaW9uSWQpLCBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wYXJ0aWNpcGFudC1kZXRhaWxzX19uYW1lLS1waW5uZWRcIiB9KSksIGluZGljYXRvcnNWaXNpYmxlICYmIGpzeChTcGVlY2hJbmRpY2F0b3IsIHt9KV0gfSkgfSksIGluZGljYXRvcnNWaXNpYmxlICYmIChqc3goTm90aWZpY2F0aW9uLCB7IGlzVmlzaWJsZTogaXNMb2NhbFBhcnRpY2lwYW50ICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25RdWFsaXR5ID09PSBTZnVNb2RlbHMuQ29ubmVjdGlvblF1YWxpdHkuUE9PUiwgbWVzc2FnZTogdCgnUG9vciBjb25uZWN0aW9uIHF1YWxpdHknKSwgY2hpbGRyZW46IGNvbm5lY3Rpb25RdWFsaXR5QXNTdHJpbmcgJiYgKGpzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fcGFydGljaXBhbnQtZGV0YWlsc19fY29ubmVjdGlvbi1xdWFsaXR5JywgYHN0ci12aWRlb19fcGFydGljaXBhbnQtZGV0YWlsc19fY29ubmVjdGlvbi1xdWFsaXR5LS0ke2Nvbm5lY3Rpb25RdWFsaXR5QXNTdHJpbmd9YCksIHRpdGxlOiBjb25uZWN0aW9uUXVhbGl0eUFzU3RyaW5nIH0pKSB9KSldIH0pKTtcbn07XG5jb25zdCBTcGVlY2hJbmRpY2F0b3IgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBwYXJ0aWNpcGFudCB9ID0gdXNlUGFydGljaXBhbnRWaWV3Q29udGV4dCgpO1xuICAgIGNvbnN0IHsgaXNTcGVha2luZywgaXNEb21pbmFudFNwZWFrZXIgfSA9IHBhcnRpY2lwYW50O1xuICAgIHJldHVybiAoanN4cyhcInNwYW5cIiwgeyBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fc3BlZWNoLWluZGljYXRvcicsIGlzU3BlYWtpbmcgJiYgJ3N0ci12aWRlb19fc3BlZWNoLWluZGljYXRvci0tc3BlYWtpbmcnLCBpc0RvbWluYW50U3BlYWtlciAmJiAnc3RyLXZpZGVvX19zcGVlY2gtaW5kaWNhdG9yLS1kb21pbmFudCcpLCBjaGlsZHJlbjogW2pzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19zcGVlY2gtaW5kaWNhdG9yX19iYXJcIiB9KSwganN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NwZWVjaC1pbmRpY2F0b3JfX2JhclwiIH0pLCBqc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fc3BlZWNoLWluZGljYXRvcl9fYmFyXCIgfSldIH0pKTtcbn07XG5cbmNvbnN0IFBhcnRpY2lwYW50VmlldyA9IGZvcndhcmRSZWYoZnVuY3Rpb24gUGFydGljaXBhbnRWaWV3KHsgcGFydGljaXBhbnQsIHRyYWNrVHlwZSA9ICd2aWRlb1RyYWNrJywgbXV0ZUF1ZGlvLCByZWZzOiB7IHNldFZpZGVvRWxlbWVudCwgc2V0VmlkZW9QbGFjZWhvbGRlckVsZW1lbnQgfSA9IHt9LCBjbGFzc05hbWUsIFZpZGVvUGxhY2Vob2xkZXIsIFBhcnRpY2lwYW50Vmlld1VJID0gRGVmYXVsdFBhcnRpY2lwYW50Vmlld1VJLCB9LCByZWYpIHtcbiAgICBjb25zdCB7IGlzTG9jYWxQYXJ0aWNpcGFudCwgaXNTcGVha2luZywgaXNEb21pbmFudFNwZWFrZXIsIHNlc3Npb25JZCB9ID0gcGFydGljaXBhbnQ7XG4gICAgY29uc3QgaGFzQXVkaW9UcmFjayA9IGhhc0F1ZGlvKHBhcnRpY2lwYW50KTtcbiAgICBjb25zdCBoYXNWaWRlb1RyYWNrID0gaGFzVmlkZW8ocGFydGljaXBhbnQpO1xuICAgIGNvbnN0IGhhc1NjcmVlblNoYXJlQXVkaW9UcmFjayA9IGhhc1NjcmVlblNoYXJlQXVkaW8ocGFydGljaXBhbnQpO1xuICAgIGNvbnN0IFt0cmFja2VkRWxlbWVudCwgc2V0VHJhY2tlZEVsZW1lbnRdID0gdXNlU3RhdGUobnVsbCk7XG4gICAgY29uc3QgW2NvbnRleHRWaWRlb0VsZW1lbnQsIHNldENvbnRleHRWaWRlb0VsZW1lbnRdID0gdXNlU3RhdGUobnVsbCk7XG4gICAgY29uc3QgW2NvbnRleHRWaWRlb1BsYWNlaG9sZGVyRWxlbWVudCwgc2V0Q29udGV4dFZpZGVvUGxhY2Vob2xkZXJFbGVtZW50XSA9IHVzZVN0YXRlKG51bGwpO1xuICAgIC8vIFRPRE86IGFsbG93IHRvIHBhc3MgY3VzdG9tIFZpZXdwb3J0VHJhY2tlciBpbnN0YW5jZSBmcm9tIHByb3BzXG4gICAgdXNlVHJhY2tFbGVtZW50VmlzaWJpbGl0eSh7XG4gICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgdHJhY2tlZEVsZW1lbnQsXG4gICAgICAgIHRyYWNrVHlwZSxcbiAgICB9KTtcbiAgICBjb25zdCBwYXJ0aWNpcGFudFZpZXdDb250ZXh0VmFsdWUgPSB1c2VNZW1vKCgpID0+ICh7XG4gICAgICAgIHBhcnRpY2lwYW50LFxuICAgICAgICBwYXJ0aWNpcGFudFZpZXdFbGVtZW50OiB0cmFja2VkRWxlbWVudCxcbiAgICAgICAgdmlkZW9FbGVtZW50OiBjb250ZXh0VmlkZW9FbGVtZW50LFxuICAgICAgICB2aWRlb1BsYWNlaG9sZGVyRWxlbWVudDogY29udGV4dFZpZGVvUGxhY2Vob2xkZXJFbGVtZW50LFxuICAgICAgICB0cmFja1R5cGUsXG4gICAgfSksIFtcbiAgICAgICAgY29udGV4dFZpZGVvRWxlbWVudCxcbiAgICAgICAgY29udGV4dFZpZGVvUGxhY2Vob2xkZXJFbGVtZW50LFxuICAgICAgICBwYXJ0aWNpcGFudCxcbiAgICAgICAgdHJhY2tlZEVsZW1lbnQsXG4gICAgICAgIHRyYWNrVHlwZSxcbiAgICBdKTtcbiAgICBjb25zdCB2aWRlb1JlZnMgPSB1c2VNZW1vKCgpID0+ICh7XG4gICAgICAgIHNldFZpZGVvRWxlbWVudDogKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHNldFZpZGVvRWxlbWVudD8uKGVsZW1lbnQpO1xuICAgICAgICAgICAgc2V0Q29udGV4dFZpZGVvRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VmlkZW9QbGFjZWhvbGRlckVsZW1lbnQ6IChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBzZXRWaWRlb1BsYWNlaG9sZGVyRWxlbWVudD8uKGVsZW1lbnQpO1xuICAgICAgICAgICAgc2V0Q29udGV4dFZpZGVvUGxhY2Vob2xkZXJFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgIH0pLCBbc2V0VmlkZW9FbGVtZW50LCBzZXRWaWRlb1BsYWNlaG9sZGVyRWxlbWVudF0pO1xuICAgIHJldHVybiAoanN4KFwiZGl2XCIsIHsgXCJkYXRhLXRlc3RpZFwiOiBcInBhcnRpY2lwYW50LXZpZXdcIiwgcmVmOiAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgYXBwbHlFbGVtZW50VG9SZWYocmVmLCBlbGVtZW50KTtcbiAgICAgICAgICAgIHNldFRyYWNrZWRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9LCBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fcGFydGljaXBhbnQtdmlldycsIGlzRG9taW5hbnRTcGVha2VyICYmICdzdHItdmlkZW9fX3BhcnRpY2lwYW50LXZpZXctLWRvbWluYW50LXNwZWFrZXInLCBpc1NwZWFraW5nICYmICdzdHItdmlkZW9fX3BhcnRpY2lwYW50LXZpZXctLXNwZWFraW5nJywgIWhhc1ZpZGVvVHJhY2sgJiYgJ3N0ci12aWRlb19fcGFydGljaXBhbnQtdmlldy0tbm8tdmlkZW8nLCAhaGFzQXVkaW9UcmFjayAmJiAnc3RyLXZpZGVvX19wYXJ0aWNpcGFudC12aWV3LS1uby1hdWRpbycsIGNsYXNzTmFtZSksIGNoaWxkcmVuOiBqc3hzKFBhcnRpY2lwYW50Vmlld0NvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHBhcnRpY2lwYW50Vmlld0NvbnRleHRWYWx1ZSwgY2hpbGRyZW46IFshaXNMb2NhbFBhcnRpY2lwYW50ICYmICFtdXRlQXVkaW8gJiYgKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtoYXNBdWRpb1RyYWNrICYmIChqc3goQXVkaW8sIHsgcGFydGljaXBhbnQ6IHBhcnRpY2lwYW50LCB0cmFja1R5cGU6IFwiYXVkaW9UcmFja1wiIH0pKSwgaGFzU2NyZWVuU2hhcmVBdWRpb1RyYWNrICYmIChqc3goQXVkaW8sIHsgcGFydGljaXBhbnQ6IHBhcnRpY2lwYW50LCB0cmFja1R5cGU6IFwic2NyZWVuU2hhcmVBdWRpb1RyYWNrXCIgfSkpXSB9KSksIGpzeChWaWRlbyQxLCB7IFZpZGVvUGxhY2Vob2xkZXI6IFZpZGVvUGxhY2Vob2xkZXIsIHBhcnRpY2lwYW50OiBwYXJ0aWNpcGFudCwgdHJhY2tUeXBlOiB0cmFja1R5cGUsIHJlZnM6IHZpZGVvUmVmcywgYXV0b1BsYXk6IHRydWUgfSksIGlzQ29tcG9uZW50VHlwZShQYXJ0aWNpcGFudFZpZXdVSSkgPyAoanN4KFBhcnRpY2lwYW50Vmlld1VJLCB7fSkpIDogKFBhcnRpY2lwYW50Vmlld1VJKV0gfSkgfSkpO1xufSk7XG5QYXJ0aWNpcGFudFZpZXcuZGlzcGxheU5hbWUgPSAnUGFydGljaXBhbnRWaWV3JztcblxuLy8gcmUtZXhwb3J0aW5nIHRoZSBTdHJlYW1DYWxsUHJvdmlkZXIgYXMgU3RyZWFtQ2FsbFxuY29uc3QgU3RyZWFtQ2FsbCA9IFN0cmVhbUNhbGxQcm92aWRlcjtcblN0cmVhbUNhbGwuZGlzcGxheU5hbWUgPSAnU3RyZWFtQ2FsbCc7XG5cbnZhciBKb2luaW5nID0gXCJKb2luaW5nXCI7XG52YXIgTWljID0gXCJNaWNcIjtcbnZhciBSaW5naW5nID0gXCJSaW5naW5nXCI7XG52YXIgU3BlYWtlcnMgPSBcIlNwZWFrZXJzXCI7XG52YXIgVmlkZW8gPSBcIlZpZGVvXCI7XG52YXIgTGl2ZSA9IFwiTGl2ZVwiO1xudmFyIFJlYWN0aW9ucyA9IFwiUmVhY3Rpb25zXCI7XG52YXIgU3RhdGlzdGljcyA9IFwiU3RhdGlzdGljc1wiO1xudmFyIEludml0ZSA9IFwiSW52aXRlXCI7XG52YXIgSm9pbiA9IFwiSm9pblwiO1xudmFyIFlvdSA9IFwiWW91XCI7XG52YXIgTWUgPSBcIk1lXCI7XG52YXIgVW5rbm93biA9IFwiVW5rbm93blwiO1xudmFyIFJlZnJlc2ggPSBcIlJlZnJlc2hcIjtcbnZhciBBbGxvdyA9IFwiQWxsb3dcIjtcbnZhciBSZXZva2UgPSBcIlJldm9rZVwiO1xudmFyIERpc21pc3MgPSBcIkRpc21pc3NcIjtcbnZhciBQaW5uZWQgPSBcIlBpbm5lZFwiO1xudmFyIFVucGluID0gXCJVbnBpblwiO1xudmFyIFBpbiA9IFwiUGluXCI7XG52YXIgQmxvY2sgPSBcIkJsb2NrXCI7XG52YXIgRW50ZXIgPSBcIkVudGVyXCI7XG52YXIgTGVhdmUgPSBcIkxlYXZlXCI7XG52YXIgUGFydGljaXBhbnRzID0gXCJQYXJ0aWNpcGFudHNcIjtcbnZhciBBbm9ueW1vdXMgPSBcIiwgYW5kICh7eyBjb3VudCB9fSkgYW5vbnltb3VzXCI7XG52YXIgZW4gPSB7XG5cdEpvaW5pbmc6IEpvaW5pbmcsXG5cdE1pYzogTWljLFxuXHRcIk5vIGludGVybmV0IGNvbm5lY3Rpb25cIjogXCJObyBpbnRlcm5ldCBjb25uZWN0aW9uXCIsXG5cdFwiUmUtY29ubmVjdGluZ1wiOiBcIlJlLWNvbm5lY3RpbmdcIixcblx0UmluZ2luZzogUmluZ2luZyxcblx0XCJTY3JlZW4gU2hhcmVcIjogXCJTY3JlZW4gU2hhcmVcIixcblx0XCJTZWxlY3QgYSBDYW1lcmFcIjogXCJTZWxlY3QgYSBDYW1lcmFcIixcblx0XCJTZWxlY3QgYSBNaWNcIjogXCJTZWxlY3QgYSBNaWNcIixcblx0XCJTZWxlY3QgU3BlYWtlcnNcIjogXCJTZWxlY3QgU3BlYWtlcnNcIixcblx0U3BlYWtlcnM6IFNwZWFrZXJzLFxuXHRWaWRlbzogVmlkZW8sXG5cdFwiWW91IGFyZSBtdXRlZC4gVW5tdXRlIHRvIHNwZWFrLlwiOiBcIllvdSBhcmUgbXV0ZWQuIFVubXV0ZSB0byBzcGVhay5cIixcblx0TGl2ZTogTGl2ZSxcblx0XCJZb3UgY2FuIG5vdyBzcGVhay5cIjogXCJZb3UgY2FuIG5vdyBzcGVhay5cIixcblx0XCJBd2FpdGluZyBmb3IgYW4gYXBwcm92YWwgdG8gc3BlYWsuXCI6IFwiQXdhaXRpbmcgZm9yIGFuIGFwcHJvdmFsIHRvIHNwZWFrLlwiLFxuXHRcIllvdSBjYW4gbm8gbG9uZ2VyIHNwZWFrLlwiOiBcIllvdSBjYW4gbm8gbG9uZ2VyIHNwZWFrLlwiLFxuXHRcIllvdSBjYW4gbm93IHNoYXJlIHlvdXIgdmlkZW8uXCI6IFwiWW91IGNhbiBub3cgc2hhcmUgeW91ciB2aWRlby5cIixcblx0XCJBd2FpdGluZyBmb3IgYW4gYXBwcm92YWwgdG8gc2hhcmUgeW91ciB2aWRlby5cIjogXCJBd2FpdGluZyBmb3IgYW4gYXBwcm92YWwgdG8gc2hhcmUgeW91ciB2aWRlby5cIixcblx0XCJZb3UgY2FuIG5vIGxvbmdlciBzaGFyZSB5b3VyIHZpZGVvLlwiOiBcIllvdSBjYW4gbm8gbG9uZ2VyIHNoYXJlIHlvdXIgdmlkZW8uXCIsXG5cdFwiV2FpdGluZyBmb3IgcmVjb3JkaW5nIHRvIHN0b3AuLi5cIjogXCJXYWl0aW5nIGZvciByZWNvcmRpbmcgdG8gc3RvcC4uLlwiLFxuXHRcIldhaXRpbmcgZm9yIHJlY29yZGluZyB0byBzdGFydC4uLlwiOiBcIldhaXRpbmcgZm9yIHJlY29yZGluZyB0byBzdGFydC4uLlwiLFxuXHRcIlJlY29yZCBjYWxsXCI6IFwiUmVjb3JkIGNhbGxcIixcblx0UmVhY3Rpb25zOiBSZWFjdGlvbnMsXG5cdFN0YXRpc3RpY3M6IFN0YXRpc3RpY3MsXG5cdFwiWW91IGNhbiBub3cgc2hhcmUgeW91ciBzY3JlZW4uXCI6IFwiWW91IGNhbiBub3cgc2hhcmUgeW91ciBzY3JlZW4uXCIsXG5cdFwiQXdhaXRpbmcgZm9yIGFuIGFwcHJvdmFsIHRvIHNoYXJlIHNjcmVlbi5cIjogXCJBd2FpdGluZyBmb3IgYW4gYXBwcm92YWwgdG8gc2hhcmUgc2NyZWVuLlwiLFxuXHRcIllvdSBjYW4gbm8gbG9uZ2VyIHNoYXJlIHlvdXIgc2NyZWVuLlwiOiBcIllvdSBjYW4gbm8gbG9uZ2VyIHNoYXJlIHlvdXIgc2NyZWVuLlwiLFxuXHRcIlNoYXJlIHNjcmVlblwiOiBcIlNoYXJlIHNjcmVlblwiLFxuXHRcIkluY29taW5nIENhbGwuLi5cIjogXCJJbmNvbWluZyBDYWxsLi4uXCIsXG5cdFwiQ2FsbGluZy4uLlwiOiBcIkNhbGxpbmcuLi5cIixcblx0XCJNdXRlIEFsbFwiOiBcIk11dGUgQWxsXCIsXG5cdEludml0ZTogSW52aXRlLFxuXHRKb2luOiBKb2luLFxuXHRZb3U6IFlvdSxcblx0TWU6IE1lLFxuXHRVbmtub3duOiBVbmtub3duLFxuXHRcIlRvZ2dsZSBkZXZpY2UgbWVudVwiOiBcIlRvZ2dsZSBkZXZpY2UgbWVudVwiLFxuXHRcIkNhbGwgUmVjb3JkaW5nc1wiOiBcIkNhbGwgUmVjb3JkaW5nc1wiLFxuXHRSZWZyZXNoOiBSZWZyZXNoLFxuXHRcIkNoZWNrIHlvdXIgYnJvd3NlciB2aWRlbyBwZXJtaXNzaW9uc1wiOiBcIkNoZWNrIHlvdXIgYnJvd3NlciB2aWRlbyBwZXJtaXNzaW9uc1wiLFxuXHRcIlZpZGVvIHB1Ymxpc2hpbmcgaXMgZGlzYWJsZWQgYnkgdGhlIHN5c3RlbVwiOiBcIlZpZGVvIHB1Ymxpc2hpbmcgaXMgZGlzYWJsZWQgYnkgdGhlIHN5c3RlbVwiLFxuXHRcIllvdSBoYXZlIG5vIHBlcm1pc3Npb24gdG8gc2hhcmUgeW91ciB2aWRlb1wiOiBcIllvdSBoYXZlIG5vIHBlcm1pc3Npb24gdG8gc2hhcmUgeW91ciB2aWRlb1wiLFxuXHRcIllvdSBoYXZlIG5vIHBlcm1pc3Npb24gdG8gc2hhcmUgeW91ciBhdWRpb1wiOiBcIllvdSBoYXZlIG5vIHBlcm1pc3Npb24gdG8gc2hhcmUgeW91ciBhdWRpb1wiLFxuXHRcIllvdSBhcmUgcHJlc2VudGluZyB5b3VyIHNjcmVlblwiOiBcIllvdSBhcmUgcHJlc2VudGluZyB5b3VyIHNjcmVlblwiLFxuXHRcIlN0b3AgU2NyZWVuIFNoYXJpbmdcIjogXCJTdG9wIFNjcmVlbiBTaGFyaW5nXCIsXG5cdEFsbG93OiBBbGxvdyxcblx0UmV2b2tlOiBSZXZva2UsXG5cdERpc21pc3M6IERpc21pc3MsXG5cdFwiTWljcm9waG9uZSBvblwiOiBcIk1pY3JvcGhvbmUgb25cIixcblx0XCJNaWNyb3Bob25lIG9mZlwiOiBcIk1pY3JvcGhvbmUgb2ZmXCIsXG5cdFwiQ2FtZXJhIG9uXCI6IFwiQ2FtZXJhIG9uXCIsXG5cdFwiQ2FtZXJhIG9mZlwiOiBcIkNhbWVyYSBvZmZcIixcblx0XCJObyBjYW1lcmEgZm91bmRcIjogXCJObyBjYW1lcmEgZm91bmRcIixcblx0XCJWaWRlbyBpcyBkaXNhYmxlZFwiOiBcIlZpZGVvIGlzIGRpc2FibGVkXCIsXG5cdFBpbm5lZDogUGlubmVkLFxuXHRVbnBpbjogVW5waW4sXG5cdFBpbjogUGluLFxuXHRcIlBpbiBmb3IgZXZlcnlvbmVcIjogXCJQaW4gZm9yIGV2ZXJ5b25lXCIsXG5cdFwiVW5waW4gZm9yIGV2ZXJ5b25lXCI6IFwiVW5waW4gZm9yIGV2ZXJ5b25lXCIsXG5cdEJsb2NrOiBCbG9jayxcblx0XCJUdXJuIG9mZiB2aWRlb1wiOiBcIlR1cm4gb2ZmIHZpZGVvXCIsXG5cdFwiVHVybiBvZmYgc2NyZWVuIHNoYXJlXCI6IFwiVHVybiBvZmYgc2NyZWVuIHNoYXJlXCIsXG5cdFwiTXV0ZSBhdWRpb1wiOiBcIk11dGUgYXVkaW9cIixcblx0XCJNdXRlIHNjcmVlbiBzaGFyZSBhdWRpb1wiOiBcIk11dGUgc2NyZWVuIHNoYXJlIGF1ZGlvXCIsXG5cdFwiQWxsb3cgYXVkaW9cIjogXCJBbGxvdyBhdWRpb1wiLFxuXHRcIkFsbG93IHZpZGVvXCI6IFwiQWxsb3cgdmlkZW9cIixcblx0XCJBbGxvdyBzY3JlZW4gc2hhcmluZ1wiOiBcIkFsbG93IHNjcmVlbiBzaGFyaW5nXCIsXG5cdFwiRGlzYWJsZSBhdWRpb1wiOiBcIkRpc2FibGUgYXVkaW9cIixcblx0XCJEaXNhYmxlIHZpZGVvXCI6IFwiRGlzYWJsZSB2aWRlb1wiLFxuXHRcIkRpc2FibGUgc2NyZWVuIHNoYXJpbmdcIjogXCJEaXNhYmxlIHNjcmVlbiBzaGFyaW5nXCIsXG5cdEVudGVyOiBFbnRlcixcblx0TGVhdmU6IExlYXZlLFxuXHRcIkxlYXZlIGNhbGxcIjogXCJMZWF2ZSBjYWxsXCIsXG5cdFwiRW5kIGNhbGwgZm9yIGFsbFwiOiBcIkVuZCBjYWxsIGZvciBhbGxcIixcblx0XCJ7eyBkaXJlY3Rpb24gfX0gZnVsbHNjcmVlblwiOiBcInt7IGRpcmVjdGlvbiB9fSBmdWxsc2NyZWVuXCIsXG5cdFwie3sgZGlyZWN0aW9uIH19IHBpY3R1cmUtaW4tcGljdHVyZVwiOiBcInt7IGRpcmVjdGlvbiB9fSBwaWN0dXJlLWluLXBpY3R1cmVcIixcblx0XCJEb21pbmFudCBTcGVha2VyXCI6IFwiRG9taW5hbnQgU3BlYWtlclwiLFxuXHRcIlBvb3IgY29ubmVjdGlvbiBxdWFsaXR5XCI6IFwiUG9vciBjb25uZWN0aW9uIHF1YWxpdHkuIFBsZWFzZSBjaGVjayB5b3VyIGludGVybmV0IGNvbm5lY3Rpb24uXCIsXG5cdFBhcnRpY2lwYW50czogUGFydGljaXBhbnRzLFxuXHRBbm9ueW1vdXM6IEFub255bW91cyxcblx0XCJObyBwYXJ0aWNpcGFudHMgZm91bmRcIjogXCJObyBwYXJ0aWNpcGFudHMgZm91bmRcIixcblx0XCJQYXJ0aWNpcGFudHMgKHt7IG51bWJlck9mUGFydGljaXBhbnRzIH19KVwiOiBcIlBhcnRpY2lwYW50cyAoe3sgbnVtYmVyT2ZQYXJ0aWNpcGFudHMgfX0pXCIsXG5cdFwie3sgdXNlck5hbWUgfX0gaXMgc2hhcmluZyB0aGVpciBzY3JlZW5cIjogXCJ7eyB1c2VyTmFtZSB9fSBpcyBzaGFyaW5nIHRoZWlyIHNjcmVlblwiLFxuXHRcInt7IHVzZXJOYW1lIH19IGlzIHJlcXVlc3RpbmcgdG8gc3BlYWtcIjogXCJ7eyB1c2VyTmFtZSB9fSBpcyByZXF1ZXN0aW5nIHRvIHNwZWFrXCIsXG5cdFwie3sgdXNlck5hbWUgfX0gaXMgcmVxdWVzdGluZyB0byBzaGFyZSB0aGVpciBjYW1lcmFcIjogXCJ7eyB1c2VyTmFtZSB9fSBpcyByZXF1ZXN0aW5nIHRvIHNoYXJlIHRoZWlyIGNhbWVyYVwiLFxuXHRcInt7IHVzZXJOYW1lIH19IGlzIHJlcXVlc3RpbmcgdG8gcHJlc2VudCB0aGVpciBzY3JlZW5cIjogXCJ7eyB1c2VyTmFtZSB9fSBpcyByZXF1ZXN0aW5nIHRvIHByZXNlbnQgdGhlaXIgc2NyZWVuXCIsXG5cdFwie3sgdXNlck5hbWUgfX0gaXMgcmVxdWVzdGluZyBwZXJtaXNzaW9uOiB7eyBwZXJtaXNzaW9uIH19XCI6IFwie3sgdXNlck5hbWUgfX0gaXMgcmVxdWVzdGluZyBwZXJtaXNzaW9uOiB7eyBwZXJtaXNzaW9uIH19XCJcbn07XG5cbmNvbnN0IHRyYW5zbGF0aW9ucyA9IHsgZW4gfTtcblxuY29uc3QgU3RyZWFtVmlkZW8gPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKGpzeChTdHJlYW1WaWRlb1Byb3ZpZGVyLCB7IHRyYW5zbGF0aW9uc092ZXJyaWRlczogdHJhbnNsYXRpb25zLCAuLi5wcm9wcyB9KSk7XG59O1xuU3RyZWFtVmlkZW8uZGlzcGxheU5hbWUgPSAnU3RyZWFtVmlkZW8nO1xuXG5jb25zdCB1c2VQYWdpbmF0ZWRMYXlvdXRTb3J0UHJlc2V0ID0gKGNhbGwpID0+IHtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNhbGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhbGwuc2V0U29ydFBhcnRpY2lwYW50c0J5KHBhZ2luYXRlZExheW91dFNvcnRQcmVzZXQpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgcmVzZXRTb3J0UHJlc2V0KGNhbGwpO1xuICAgICAgICB9O1xuICAgIH0sIFtjYWxsXSk7XG59O1xuY29uc3QgdXNlU3BlYWtlckxheW91dFNvcnRQcmVzZXQgPSAoY2FsbCwgaXNPbmVPbk9uZUNhbGwpID0+IHtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNhbGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIGFsd2F5cyBzaG93IHRoZSByZW1vdGUgcGFydGljaXBhbnQgaW4gdGhlIHNwb3RsaWdodFxuICAgICAgICBpZiAoaXNPbmVPbk9uZUNhbGwpIHtcbiAgICAgICAgICAgIGNhbGwuc2V0U29ydFBhcnRpY2lwYW50c0J5KGNvbWJpbmVDb21wYXJhdG9ycyhzY3JlZW5TaGFyaW5nLCBsb2dnZWRJbikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2FsbC5zZXRTb3J0UGFydGljaXBhbnRzQnkoc3BlYWtlckxheW91dFNvcnRQcmVzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICByZXNldFNvcnRQcmVzZXQoY2FsbCk7XG4gICAgICAgIH07XG4gICAgfSwgW2NhbGwsIGlzT25lT25PbmVDYWxsXSk7XG59O1xuY29uc3QgcmVzZXRTb3J0UHJlc2V0ID0gKGNhbGwpID0+IHtcbiAgICAvLyByZXNldCB0aGUgc29ydGluZyB0byB0aGUgZGVmYXVsdCBmb3IgdGhlIGNhbGwgdHlwZVxuICAgIGNvbnN0IGNhbGxDb25maWcgPSBDYWxsVHlwZXMuZ2V0KGNhbGwudHlwZSk7XG4gICAgY2FsbC5zZXRTb3J0UGFydGljaXBhbnRzQnkoY2FsbENvbmZpZy5vcHRpb25zLnNvcnRQYXJ0aWNpcGFudHNCeSB8fCBkZWZhdWx0U29ydFByZXNldCk7XG59O1xuY29uc3QgbG9nZ2VkSW4gPSAoYSwgYikgPT4ge1xuICAgIGlmIChhLmlzTG9jYWxQYXJ0aWNpcGFudClcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgaWYgKGIuaXNMb2NhbFBhcnRpY2lwYW50KVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgcmV0dXJuIDA7XG59O1xuXG5jb25zdCBMaXZlc3RyZWFtTGF5b3V0ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyB1c2VQYXJ0aWNpcGFudHMsIHVzZVJlbW90ZVBhcnRpY2lwYW50cywgdXNlSGFzT25nb2luZ1NjcmVlblNoYXJlIH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IGNhbGwgPSB1c2VDYWxsKCk7XG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdXNlUGFydGljaXBhbnRzKCk7XG4gICAgY29uc3QgW2N1cnJlbnRTcGVha2VyXSA9IHBhcnRpY2lwYW50cztcbiAgICBjb25zdCByZW1vdGVQYXJ0aWNpcGFudHMgPSB1c2VSZW1vdGVQYXJ0aWNpcGFudHMoKTtcbiAgICBjb25zdCBoYXNPbmdvaW5nU2NyZWVuU2hhcmUgPSB1c2VIYXNPbmdvaW5nU2NyZWVuU2hhcmUoKTtcbiAgICBjb25zdCBwcmVzZW50ZXIgPSBoYXNPbmdvaW5nU2NyZWVuU2hhcmVcbiAgICAgICAgPyBwYXJ0aWNpcGFudHMuZmluZChoYXNTY3JlZW5TaGFyZSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgdXNlUGFnaW5hdGVkTGF5b3V0U29ydFByZXNldChjYWxsKTtcbiAgICBjb25zdCBPdmVybGF5ID0gKGpzeChQYXJ0aWNpcGFudE92ZXJsYXksIHsgc2hvd1BhcnRpY2lwYW50Q291bnQ6IHByb3BzLnNob3dQYXJ0aWNpcGFudENvdW50LCBzaG93RHVyYXRpb246IHByb3BzLnNob3dEdXJhdGlvbiwgc2hvd0xpdmVCYWRnZTogcHJvcHMuc2hvd0xpdmVCYWRnZSwgc2hvd1NwZWFrZXJOYW1lOiBwcm9wcy5zaG93U3BlYWtlck5hbWUgfSkpO1xuICAgIGNvbnN0IHsgZmxvYXRpbmdQYXJ0aWNpcGFudFByb3BzIH0gPSBwcm9wcztcbiAgICBjb25zdCBGbG9hdGluZ1BhcnRpY2lwYW50T3ZlcmxheSA9IGhhc09uZ29pbmdTY3JlZW5TaGFyZSAmJiAoanN4KFBhcnRpY2lwYW50T3ZlcmxheVxuICAgIC8vIHRoZXNlIGVsZW1lbnRzIGFyZW4ndCBuZWVkZWQgZm9yIHRoZSB2aWRlbyBmZWVkXG4gICAgLCB7IFxuICAgICAgICAvLyB0aGVzZSBlbGVtZW50cyBhcmVuJ3QgbmVlZGVkIGZvciB0aGUgdmlkZW8gZmVlZFxuICAgICAgICBzaG93UGFydGljaXBhbnRDb3VudDogZmxvYXRpbmdQYXJ0aWNpcGFudFByb3BzPy5zaG93UGFydGljaXBhbnRDb3VudCA/PyBmYWxzZSwgc2hvd0R1cmF0aW9uOiBmbG9hdGluZ1BhcnRpY2lwYW50UHJvcHM/LnNob3dEdXJhdGlvbiA/PyBmYWxzZSwgc2hvd0xpdmVCYWRnZTogZmxvYXRpbmdQYXJ0aWNpcGFudFByb3BzPy5zaG93TGl2ZUJhZGdlID8/IGZhbHNlLCBzaG93U3BlYWtlck5hbWU6IGZsb2F0aW5nUGFydGljaXBhbnRQcm9wcz8uc2hvd1NwZWFrZXJOYW1lID8/IHRydWUgfSkpO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2xpdmVzdHJlYW0tbGF5b3V0X193cmFwcGVyXCIsIGNoaWxkcmVuOiBbanN4KFBhcnRpY2lwYW50c0F1ZGlvLCB7IHBhcnRpY2lwYW50czogcmVtb3RlUGFydGljaXBhbnRzIH0pLCBoYXNPbmdvaW5nU2NyZWVuU2hhcmUgJiYgcHJlc2VudGVyICYmIChqc3goUGFydGljaXBhbnRWaWV3LCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2xpdmVzdHJlYW0tbGF5b3V0X19zY3JlZW4tc2hhcmVcIiwgcGFydGljaXBhbnQ6IHByZXNlbnRlciwgUGFydGljaXBhbnRWaWV3VUk6IE92ZXJsYXksIHRyYWNrVHlwZTogXCJzY3JlZW5TaGFyZVRyYWNrXCIsIG11dGVBdWRpbyAvLyBhdWRpbyBpcyByZW5kZXJlZCBieSBQYXJ0aWNpcGFudHNBdWRpb1xuICAgICAgICAgICAgICAgIDogdHJ1ZSB9KSksIGN1cnJlbnRTcGVha2VyICYmIChqc3goUGFydGljaXBhbnRWaWV3LCB7IGNsYXNzTmFtZTogY2xzeChoYXNPbmdvaW5nU2NyZWVuU2hhcmUgJiZcbiAgICAgICAgICAgICAgICAgICAgY2xzeCgnc3RyLXZpZGVvX19saXZlc3RyZWFtLWxheW91dF9fZmxvYXRpbmctcGFydGljaXBhbnQnLCBgc3RyLXZpZGVvX19saXZlc3RyZWFtLWxheW91dF9fZmxvYXRpbmctcGFydGljaXBhbnQtLSR7ZmxvYXRpbmdQYXJ0aWNpcGFudFByb3BzPy5wb3NpdGlvbiA/PyAndG9wLXJpZ2h0J31gKSksIHBhcnRpY2lwYW50OiBjdXJyZW50U3BlYWtlciwgUGFydGljaXBhbnRWaWV3VUk6IEZsb2F0aW5nUGFydGljaXBhbnRPdmVybGF5IHx8IE92ZXJsYXksIG11dGVBdWRpbyAvLyBhdWRpbyBpcyByZW5kZXJlZCBieSBQYXJ0aWNpcGFudHNBdWRpb1xuICAgICAgICAgICAgICAgIDogdHJ1ZSB9KSldIH0pKTtcbn07XG5jb25zdCBQYXJ0aWNpcGFudE92ZXJsYXkgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGVuYWJsZUZ1bGxTY3JlZW4gPSB0cnVlLCBzaG93UGFydGljaXBhbnRDb3VudCA9IHRydWUsIHNob3dEdXJhdGlvbiA9IHRydWUsIHNob3dMaXZlQmFkZ2UgPSB0cnVlLCBzaG93U3BlYWtlck5hbWUgPSBmYWxzZSwgfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgcGFydGljaXBhbnQgfSA9IHVzZVBhcnRpY2lwYW50Vmlld0NvbnRleHQoKTtcbiAgICBjb25zdCB7IHVzZVBhcnRpY2lwYW50Q291bnQgfSA9IHVzZUNhbGxTdGF0ZUhvb2tzKCk7XG4gICAgY29uc3QgcGFydGljaXBhbnRDb3VudCA9IHVzZVBhcnRpY2lwYW50Q291bnQoKTtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHVzZVVwZGF0ZUNhbGxEdXJhdGlvbigpO1xuICAgIGNvbnN0IHRvZ2dsZUZ1bGxTY3JlZW4gPSB1c2VUb2dnbGVGdWxsU2NyZWVuKCk7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgcmV0dXJuIChqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19saXZlc3RyZWFtLWxheW91dF9fb3ZlcmxheVwiLCBjaGlsZHJlbjoganN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX2xpdmVzdHJlYW0tbGF5b3V0X19vdmVybGF5X19iYXJcIiwgY2hpbGRyZW46IFtzaG93TGl2ZUJhZGdlICYmIChqc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fbGl2ZXN0cmVhbS1sYXlvdXRfX2xpdmUtYmFkZ2VcIiwgY2hpbGRyZW46IHQoJ0xpdmUnKSB9KSksIHNob3dQYXJ0aWNpcGFudENvdW50ICYmIChqc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fbGl2ZXN0cmVhbS1sYXlvdXRfX3ZpZXdlcnMtY291bnRcIiwgY2hpbGRyZW46IHBhcnRpY2lwYW50Q291bnQgfSkpLCBzaG93U3BlYWtlck5hbWUgJiYgKGpzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19saXZlc3RyZWFtLWxheW91dF9fc3BlYWtlci1uYW1lXCIsIHRpdGxlOiBwYXJ0aWNpcGFudC5uYW1lIHx8IHBhcnRpY2lwYW50LnVzZXJJZCB8fCAnJywgY2hpbGRyZW46IHBhcnRpY2lwYW50Lm5hbWUgfHwgcGFydGljaXBhbnQudXNlcklkIHx8ICcnIH0pKSwgc2hvd0R1cmF0aW9uICYmIChqc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fbGl2ZXN0cmVhbS1sYXlvdXRfX2R1cmF0aW9uXCIsIGNoaWxkcmVuOiBmb3JtYXREdXJhdGlvbihkdXJhdGlvbikgfSkpLCBlbmFibGVGdWxsU2NyZWVuICYmIChqc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fbGl2ZXN0cmVhbS1sYXlvdXRfX2dvLWZ1bGxzY3JlZW5cIiwgb25DbGljazogdG9nZ2xlRnVsbFNjcmVlbiB9KSldIH0pIH0pKTtcbn07XG5MaXZlc3RyZWFtTGF5b3V0LmRpc3BsYXlOYW1lID0gJ0xpdmVzdHJlYW1MYXlvdXQnO1xuY29uc3QgdXNlVXBkYXRlQ2FsbER1cmF0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgdXNlSXNDYWxsTGl2ZSwgdXNlQ2FsbFNlc3Npb24gfSA9IHVzZUNhbGxTdGF0ZUhvb2tzKCk7XG4gICAgY29uc3QgaXNDYWxsTGl2ZSA9IHVzZUlzQ2FsbExpdmUoKTtcbiAgICBjb25zdCBzZXNzaW9uID0gdXNlQ2FsbFNlc3Npb24oKTtcbiAgICBjb25zdCBbZHVyYXRpb24sIHNldER1cmF0aW9uXSA9IHVzZVN0YXRlKCgpID0+IHtcbiAgICAgICAgaWYgKCFzZXNzaW9uIHx8ICFzZXNzaW9uLmxpdmVfc3RhcnRlZF9hdClcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBjb25zdCBsaXZlU3RhcnRUaW1lID0gbmV3IERhdGUoc2Vzc2lvbi5saXZlX3N0YXJ0ZWRfYXQpO1xuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigobm93LmdldFRpbWUoKSAtIGxpdmVTdGFydFRpbWUuZ2V0VGltZSgpKSAvIDEwMDApO1xuICAgIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghaXNDYWxsTGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBzZXREdXJhdGlvbigoZCkgPT4gZCArIDEpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICB9O1xuICAgIH0sIFtpc0NhbGxMaXZlXSk7XG4gICAgcmV0dXJuIGR1cmF0aW9uO1xufTtcbmNvbnN0IHVzZVRvZ2dsZUZ1bGxTY3JlZW4gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBwYXJ0aWNpcGFudFZpZXdFbGVtZW50IH0gPSB1c2VQYXJ0aWNpcGFudFZpZXdDb250ZXh0KCk7XG4gICAgY29uc3QgW2lzRnVsbHNjcmVlbiwgc2V0SXNGdWxsc2NyZWVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICByZXR1cm4gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAoaXNGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldElzRnVsbHNjcmVlbihmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhcnRpY2lwYW50Vmlld0VsZW1lbnQ/LnJlcXVlc3RGdWxsc2NyZWVuKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0SXNGdWxsc2NyZWVuKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCBbaXNGdWxsc2NyZWVuLCBwYXJ0aWNpcGFudFZpZXdFbGVtZW50XSk7XG59O1xuY29uc3QgZm9ybWF0RHVyYXRpb24gPSAoZHVyYXRpb25Jbk1zKSA9PiB7XG4gICAgY29uc3QgZGF5cyA9IE1hdGguZmxvb3IoZHVyYXRpb25Jbk1zIC8gODY0MDApO1xuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihkdXJhdGlvbkluTXMgLyAzNjAwKTtcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigoZHVyYXRpb25Jbk1zICUgMzYwMCkgLyA2MCk7XG4gICAgY29uc3Qgc2Vjb25kcyA9IGR1cmF0aW9uSW5NcyAlIDYwO1xuICAgIHJldHVybiBgJHtkYXlzID8gZGF5cyArICcgJyA6ICcnfSR7aG91cnMgPyBob3VycyArICc6JyA6ICcnfSR7bWludXRlcyA8IDEwID8gJzAnIDogJyd9JHttaW51dGVzfToke3NlY29uZHMgPCAxMCA/ICcwJyA6ICcnfSR7c2Vjb25kc31gO1xufTtcblxuY29uc3QgR1JPVVBfU0laRSA9IDE2O1xuY29uc3QgUGFnaW5hdGVkR3JpZExheW91dEdyb3VwID0gKHsgZ3JvdXAsIFZpZGVvUGxhY2Vob2xkZXIsIFBhcnRpY2lwYW50Vmlld1VJLCB9KSA9PiB7XG4gICAgcmV0dXJuIChqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsc3goJ3N0ci12aWRlb19fcGFnaW5hdGVkLWdyaWQtbGF5b3V0X19ncm91cCcsIHtcbiAgICAgICAgICAgICdzdHItdmlkZW9fX3BhZ2luYXRlZC1ncmlkLWxheW91dC0tb25lJzogZ3JvdXAubGVuZ3RoID09PSAxLFxuICAgICAgICAgICAgJ3N0ci12aWRlb19fcGFnaW5hdGVkLWdyaWQtbGF5b3V0LS10d28tZm91cic6IGdyb3VwLmxlbmd0aCA+PSAyICYmIGdyb3VwLmxlbmd0aCA8PSA0LFxuICAgICAgICAgICAgJ3N0ci12aWRlb19fcGFnaW5hdGVkLWdyaWQtbGF5b3V0LS1maXZlLW5pbmUnOiBncm91cC5sZW5ndGggPj0gNSAmJiBncm91cC5sZW5ndGggPD0gOSxcbiAgICAgICAgfSksIGNoaWxkcmVuOiBncm91cC5tYXAoKHBhcnRpY2lwYW50KSA9PiAoanN4KFBhcnRpY2lwYW50VmlldywgeyBwYXJ0aWNpcGFudDogcGFydGljaXBhbnQsIG11dGVBdWRpbzogdHJ1ZSwgVmlkZW9QbGFjZWhvbGRlcjogVmlkZW9QbGFjZWhvbGRlciwgUGFydGljaXBhbnRWaWV3VUk6IFBhcnRpY2lwYW50Vmlld1VJIH0sIHBhcnRpY2lwYW50LnNlc3Npb25JZCkpKSB9KSk7XG59O1xuY29uc3QgUGFnaW5hdGVkR3JpZExheW91dCA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgZ3JvdXBTaXplID0gKHByb3BzLmdyb3VwU2l6ZSB8fCAwKSA+IDBcbiAgICAgICAgPyBwcm9wcy5ncm91cFNpemUgfHwgR1JPVVBfU0laRVxuICAgICAgICA6IEdST1VQX1NJWkUsIGV4Y2x1ZGVMb2NhbFBhcnRpY2lwYW50ID0gZmFsc2UsIHBhZ2VBcnJvd3NWaXNpYmxlID0gdHJ1ZSwgVmlkZW9QbGFjZWhvbGRlciwgUGFydGljaXBhbnRWaWV3VUkgPSBEZWZhdWx0UGFydGljaXBhbnRWaWV3VUksIH0gPSBwcm9wcztcbiAgICBjb25zdCBbcGFnZSwgc2V0UGFnZV0gPSB1c2VTdGF0ZSgwKTtcbiAgICBjb25zdCBbcGFnaW5hdGVkR3JpZExheW91dFdyYXBwZXJFbGVtZW50LCBzZXRQYWdpbmF0ZWRHcmlkTGF5b3V0V3JhcHBlckVsZW1lbnQsXSA9IHVzZVN0YXRlKG51bGwpO1xuICAgIGNvbnN0IGNhbGwgPSB1c2VDYWxsKCk7XG4gICAgY29uc3QgeyB1c2VQYXJ0aWNpcGFudHMsIHVzZVJlbW90ZVBhcnRpY2lwYW50cyB9ID0gdXNlQ2FsbFN0YXRlSG9va3MoKTtcbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB1c2VQYXJ0aWNpcGFudHMoKTtcbiAgICAvLyB1c2VkIHRvIHJlbmRlciBhdWRpbyBlbGVtZW50c1xuICAgIGNvbnN0IHJlbW90ZVBhcnRpY2lwYW50cyA9IHVzZVJlbW90ZVBhcnRpY2lwYW50cygpO1xuICAgIHVzZVBhZ2luYXRlZExheW91dFNvcnRQcmVzZXQoY2FsbCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFwYWdpbmF0ZWRHcmlkTGF5b3V0V3JhcHBlckVsZW1lbnQgfHwgIWNhbGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNsZWFudXAgPSBjYWxsLnNldFZpZXdwb3J0KHBhZ2luYXRlZEdyaWRMYXlvdXRXcmFwcGVyRWxlbWVudCk7XG4gICAgICAgIHJldHVybiAoKSA9PiBjbGVhbnVwKCk7XG4gICAgfSwgW3BhZ2luYXRlZEdyaWRMYXlvdXRXcmFwcGVyRWxlbWVudCwgY2FsbF0pO1xuICAgIC8vIG9ubHkgdXNlZCB0byByZW5kZXIgdmlkZW8gZWxlbWVudHNcbiAgICBjb25zdCBwYXJ0aWNpcGFudEdyb3VwcyA9IHVzZU1lbW8oKCkgPT4gY2h1bmsoZXhjbHVkZUxvY2FsUGFydGljaXBhbnQgPyByZW1vdGVQYXJ0aWNpcGFudHMgOiBwYXJ0aWNpcGFudHMsIGdyb3VwU2l6ZSksIFtleGNsdWRlTG9jYWxQYXJ0aWNpcGFudCwgcmVtb3RlUGFydGljaXBhbnRzLCBwYXJ0aWNpcGFudHMsIGdyb3VwU2l6ZV0pO1xuICAgIGNvbnN0IHBhZ2VDb3VudCA9IHBhcnRpY2lwYW50R3JvdXBzLmxlbmd0aDtcbiAgICAvLyB1cGRhdGUgcGFnZSB3aGVuIHBhZ2UgY291bnQgaXMgcmVkdWNlZCBhbmQgc2VsZWN0ZWQgcGFnZSBubyBsb25nZXIgZXhpc3RzXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHBhZ2UgPiBwYWdlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICBzZXRQYWdlKE1hdGgubWF4KDAsIHBhZ2VDb3VudCAtIDEpKTtcbiAgICAgICAgfVxuICAgIH0sIFtwYWdlLCBwYWdlQ291bnRdKTtcbiAgICBjb25zdCBzZWxlY3RlZEdyb3VwID0gcGFydGljaXBhbnRHcm91cHNbcGFnZV07XG4gICAgaWYgKCFjYWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gKGpzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19wYWdpbmF0ZWQtZ3JpZC1sYXlvdXRfX3dyYXBwZXJcIiwgcmVmOiBzZXRQYWdpbmF0ZWRHcmlkTGF5b3V0V3JhcHBlckVsZW1lbnQsIGNoaWxkcmVuOiBbanN4KFBhcnRpY2lwYW50c0F1ZGlvLCB7IHBhcnRpY2lwYW50czogcmVtb3RlUGFydGljaXBhbnRzIH0pLCBqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fcGFnaW5hdGVkLWdyaWQtbGF5b3V0XCIsIGNoaWxkcmVuOiBbcGFnZUFycm93c1Zpc2libGUgJiYgcGFnZUNvdW50ID4gMSAmJiAoanN4KEljb25CdXR0b24sIHsgaWNvbjogXCJjYXJldC1sZWZ0XCIsIGRpc2FibGVkOiBwYWdlID09PSAwLCBvbkNsaWNrOiAoKSA9PiBzZXRQYWdlKChjdXJyZW50UGFnZSkgPT4gTWF0aC5tYXgoMCwgY3VycmVudFBhZ2UgLSAxKSkgfSkpLCBzZWxlY3RlZEdyb3VwICYmIChqc3goUGFnaW5hdGVkR3JpZExheW91dEdyb3VwLCB7IGdyb3VwOiBwYXJ0aWNpcGFudEdyb3Vwc1twYWdlXSwgVmlkZW9QbGFjZWhvbGRlcjogVmlkZW9QbGFjZWhvbGRlciwgUGFydGljaXBhbnRWaWV3VUk6IFBhcnRpY2lwYW50Vmlld1VJIH0pKSwgcGFnZUFycm93c1Zpc2libGUgJiYgcGFnZUNvdW50ID4gMSAmJiAoanN4KEljb25CdXR0b24sIHsgZGlzYWJsZWQ6IHBhZ2UgPT09IHBhZ2VDb3VudCAtIDEsIGljb246IFwiY2FyZXQtcmlnaHRcIiwgb25DbGljazogKCkgPT4gc2V0UGFnZSgoY3VycmVudFBhZ2UpID0+IE1hdGgubWluKHBhZ2VDb3VudCAtIDEsIGN1cnJlbnRQYWdlICsgMSkpIH0pKV0gfSldIH0pKTtcbn07XG5QYWdpbmF0ZWRHcmlkTGF5b3V0LmRpc3BsYXlOYW1lID0gJ1BhZ2luYXRlZEdyaWRMYXlvdXQnO1xuXG5jb25zdCB1c2VDYWxjdWxhdGVIYXJkTGltaXQgPSAoXG4vKipcbiAqIEVsZW1lbnQgdGhhdCBzdHJldGNoZXMgdG8gMTAwJSBvZiB0aGUgd2hvbGUgbGF5b3V0IGNvbXBvbmVudFxuICovXG53cmFwcGVyRWxlbWVudCwgXG4vKipcbiAqIEVsZW1lbnQgdGhhdCBkaXJlY3RseSBob3N0cyBpbmRpdmlkdWFsIGBQYXJ0aWNpcGFudFZpZXdgIChvciB3cmFwcGVyKSBlbGVtZW50c1xuICovXG5ob3N0RWxlbWVudCwgbGltaXQpID0+IHtcbiAgICBjb25zdCBbY2FsY3VsYXRlZExpbWl0LCBzZXRDYWxjdWxhdGVkTGltaXRdID0gdXNlU3RhdGUoe1xuICAgICAgICB2ZXJ0aWNhbDogdHlwZW9mIGxpbWl0ID09PSAnbnVtYmVyJyA/IGxpbWl0IDogbnVsbCxcbiAgICAgICAgaG9yaXpvbnRhbDogdHlwZW9mIGxpbWl0ID09PSAnbnVtYmVyJyA/IGxpbWl0IDogbnVsbCxcbiAgICB9KTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWhvc3RFbGVtZW50IHx8XG4gICAgICAgICAgICAhd3JhcHBlckVsZW1lbnQgfHxcbiAgICAgICAgICAgIHR5cGVvZiBsaW1pdCA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgIHR5cGVvZiBsaW1pdCA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCBjaGlsZFdpZHRoID0gbnVsbDtcbiAgICAgICAgbGV0IGNoaWxkSGVpZ2h0ID0gbnVsbDtcbiAgICAgICAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XG4gICAgICAgICAgICAvLyB0aGlzIHBhcnQgc2hvdWxkIGlkZWFsbHkgcnVuIGFzIGxpdHRsZSB0aW1lcyBhcyBwb3NzaWJsZVxuICAgICAgICAgICAgLy8gZ2V0IGNoaWxkIG1lYXN1cmVtZW50cyBhbmQgZGlzY29ubmVjdFxuICAgICAgICAgICAgLy8gZG9lcyBub3QgY29uc2lkZXIgZHluYW1pY2FsbHkgc2l6ZWQgY2hpbGRyZW5cbiAgICAgICAgICAgIC8vIHRoaXMgaG9vayBpcyBmb3IgU3BlYWtlckxheW91dCB1c2Ugb25seSwgd2hlcmUgY2hpbGRyZW4gaW4gdGhlIGJhciBhcmUgZml4ZWQgc2l6ZVxuICAgICAgICAgICAgaWYgKGVudHJpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gaG9zdEVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRIZWlnaHQgPSBjaGlsZC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkV2lkdGggPSBjaGlsZC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGhvc3RFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBrZWVwIHRoZSBzdGF0ZSBhdCB7IHZlcnRpY2FsOiAxLCBob3Jpem9udGFsOiAxIH1cbiAgICAgICAgICAgIC8vIHVudGlsIHdlIGdldCB0aGUgcHJvcGVyIGNoaWxkIG1lYXN1cmVtZW50c1xuICAgICAgICAgICAgaWYgKGNoaWxkSGVpZ2h0ID09PSBudWxsIHx8IGNoaWxkV2lkdGggPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgdmVydGljYWwgPSBNYXRoLmZsb29yKHdyYXBwZXJFbGVtZW50LmNsaWVudEhlaWdodCAvIGNoaWxkSGVpZ2h0KTtcbiAgICAgICAgICAgIGNvbnN0IGhvcml6b250YWwgPSBNYXRoLmZsb29yKHdyYXBwZXJFbGVtZW50LmNsaWVudFdpZHRoIC8gY2hpbGRXaWR0aCk7XG4gICAgICAgICAgICBzZXRDYWxjdWxhdGVkTGltaXQoKHB2KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHB2LnZlcnRpY2FsICE9PSB2ZXJ0aWNhbCB8fCBwdi5ob3Jpem9udGFsICE9PSBob3Jpem9udGFsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2ZXJ0aWNhbCwgaG9yaXpvbnRhbCB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBwdjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh3cmFwcGVyRWxlbWVudCk7XG4gICAgICAgIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUoaG9zdEVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICB9O1xuICAgIH0sIFtob3N0RWxlbWVudCwgbGltaXQsIHdyYXBwZXJFbGVtZW50XSk7XG4gICAgcmV0dXJuIGNhbGN1bGF0ZWRMaW1pdDtcbn07XG5cbmNvbnN0IERlZmF1bHRQYXJ0aWNpcGFudFZpZXdVSUJhciA9ICgpID0+IChqc3goRGVmYXVsdFBhcnRpY2lwYW50Vmlld1VJLCB7IG1lbnVQbGFjZW1lbnQ6IFwidG9wLWVuZFwiIH0pKTtcbmNvbnN0IERlZmF1bHRQYXJ0aWNpcGFudFZpZXdVSVNwb3RsaWdodCA9ICgpID0+IGpzeChEZWZhdWx0UGFydGljaXBhbnRWaWV3VUksIHt9KTtcbmNvbnN0IFNwZWFrZXJMYXlvdXQgPSAoeyBQYXJ0aWNpcGFudFZpZXdVSUJhciA9IERlZmF1bHRQYXJ0aWNpcGFudFZpZXdVSUJhciwgUGFydGljaXBhbnRWaWV3VUlTcG90bGlnaHQgPSBEZWZhdWx0UGFydGljaXBhbnRWaWV3VUlTcG90bGlnaHQsIFZpZGVvUGxhY2Vob2xkZXIsIHBhcnRpY2lwYW50c0JhclBvc2l0aW9uID0gJ2JvdHRvbScsIHBhcnRpY2lwYW50c0JhckxpbWl0LCB9KSA9PiB7XG4gICAgY29uc3QgY2FsbCA9IHVzZUNhbGwoKTtcbiAgICBjb25zdCB7IHVzZVBhcnRpY2lwYW50cywgdXNlUmVtb3RlUGFydGljaXBhbnRzIH0gPSB1c2VDYWxsU3RhdGVIb29rcygpO1xuICAgIGNvbnN0IFtwYXJ0aWNpcGFudEluU3BvdGxpZ2h0LCAuLi5vdGhlclBhcnRpY2lwYW50c10gPSB1c2VQYXJ0aWNpcGFudHMoKTtcbiAgICBjb25zdCByZW1vdGVQYXJ0aWNpcGFudHMgPSB1c2VSZW1vdGVQYXJ0aWNpcGFudHMoKTtcbiAgICBjb25zdCBbcGFydGljaXBhbnRzQmFyV3JhcHBlckVsZW1lbnQsIHNldFBhcnRpY2lwYW50c0JhcldyYXBwZXJFbGVtZW50XSA9IHVzZVN0YXRlKG51bGwpO1xuICAgIGNvbnN0IFtwYXJ0aWNpcGFudHNCYXJFbGVtZW50LCBzZXRQYXJ0aWNpcGFudHNCYXJFbGVtZW50XSA9IHVzZVN0YXRlKG51bGwpO1xuICAgIGNvbnN0IFtidXR0b25zV3JhcHBlckVsZW1lbnQsIHNldEJ1dHRvbnNXcmFwcGVyRWxlbWVudF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgICBjb25zdCBpc1NwZWFrZXJTY3JlZW5TaGFyaW5nID0gcGFydGljaXBhbnRJblNwb3RsaWdodCAmJiBoYXNTY3JlZW5TaGFyZShwYXJ0aWNpcGFudEluU3BvdGxpZ2h0KTtcbiAgICBjb25zdCBoYXJkTGltaXQgPSB1c2VDYWxjdWxhdGVIYXJkTGltaXQoYnV0dG9uc1dyYXBwZXJFbGVtZW50LCBwYXJ0aWNpcGFudHNCYXJFbGVtZW50LCBwYXJ0aWNpcGFudHNCYXJMaW1pdCk7XG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IHBhcnRpY2lwYW50c0JhclBvc2l0aW9uID09PSAnbGVmdCcgfHwgcGFydGljaXBhbnRzQmFyUG9zaXRpb24gPT09ICdyaWdodCc7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gcGFydGljaXBhbnRzQmFyUG9zaXRpb24gPT09ICd0b3AnIHx8IHBhcnRpY2lwYW50c0JhclBvc2l0aW9uID09PSAnYm90dG9tJztcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXBhcnRpY2lwYW50c0JhcldyYXBwZXJFbGVtZW50IHx8ICFjYWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBjbGVhbnVwID0gY2FsbC5zZXRWaWV3cG9ydChwYXJ0aWNpcGFudHNCYXJXcmFwcGVyRWxlbWVudCk7XG4gICAgICAgIHJldHVybiAoKSA9PiBjbGVhbnVwKCk7XG4gICAgfSwgW3BhcnRpY2lwYW50c0JhcldyYXBwZXJFbGVtZW50LCBjYWxsXSk7XG4gICAgY29uc3QgaXNPbmVPbk9uZUNhbGwgPSBvdGhlclBhcnRpY2lwYW50cy5sZW5ndGggPT09IDE7XG4gICAgdXNlU3BlYWtlckxheW91dFNvcnRQcmVzZXQoY2FsbCwgaXNPbmVPbk9uZUNhbGwpO1xuICAgIGxldCBwYXJ0aWNpcGFudHNXaXRoQXBwbGllZExpbWl0ID0gb3RoZXJQYXJ0aWNpcGFudHM7XG4gICAgY29uc3QgaGFyZExpbWl0VG9BcHBseSA9IGlzVmVydGljYWxcbiAgICAgICAgPyBoYXJkTGltaXQudmVydGljYWxcbiAgICAgICAgOiBoYXJkTGltaXQuaG9yaXpvbnRhbDtcbiAgICBpZiAodHlwZW9mIHBhcnRpY2lwYW50c0JhckxpbWl0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBoYXJkTGltaXRUb0FwcGx5ICE9PSBudWxsKSB7XG4gICAgICAgIHBhcnRpY2lwYW50c1dpdGhBcHBsaWVkTGltaXQgPSBvdGhlclBhcnRpY2lwYW50cy5zbGljZSgwLCBcbiAgICAgICAgLy8gc3VidHJhY3QgMSBpZiBzcGVha2VyIGlzIHNoYXJpbmcgc2NyZWVuIGFzXG4gICAgICAgIC8vIHRoYXQgb25lIGlzIHJlbmRlcmVkIGluZGVwZW5kZW50bHkgZnJvbSBvdGhlclBhcnRpY2lwYW50cyBhcnJheVxuICAgICAgICBoYXJkTGltaXRUb0FwcGx5IC0gKGlzU3BlYWtlclNjcmVlblNoYXJpbmcgPyAxIDogMCkpO1xuICAgIH1cbiAgICBpZiAoIWNhbGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiAoanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NwZWFrZXItbGF5b3V0X193cmFwcGVyXCIsIGNoaWxkcmVuOiBbanN4KFBhcnRpY2lwYW50c0F1ZGlvLCB7IHBhcnRpY2lwYW50czogcmVtb3RlUGFydGljaXBhbnRzIH0pLCBqc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbHN4KCdzdHItdmlkZW9fX3NwZWFrZXItbGF5b3V0JywgcGFydGljaXBhbnRzQmFyUG9zaXRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgYHN0ci12aWRlb19fc3BlYWtlci1sYXlvdXQtLXZhcmlhbnQtJHtwYXJ0aWNpcGFudHNCYXJQb3NpdGlvbn1gKSwgY2hpbGRyZW46IFtqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19zcGVha2VyLWxheW91dF9fc3BvdGxpZ2h0XCIsIGNoaWxkcmVuOiBwYXJ0aWNpcGFudEluU3BvdGxpZ2h0ICYmIChqc3goUGFydGljaXBhbnRWaWV3LCB7IHBhcnRpY2lwYW50OiBwYXJ0aWNpcGFudEluU3BvdGxpZ2h0LCBtdXRlQXVkaW86IHRydWUsIHRyYWNrVHlwZTogaXNTcGVha2VyU2NyZWVuU2hhcmluZyA/ICdzY3JlZW5TaGFyZVRyYWNrJyA6ICd2aWRlb1RyYWNrJywgUGFydGljaXBhbnRWaWV3VUk6IFBhcnRpY2lwYW50Vmlld1VJU3BvdGxpZ2h0LCBWaWRlb1BsYWNlaG9sZGVyOiBWaWRlb1BsYWNlaG9sZGVyIH0pKSB9KSwgcGFydGljaXBhbnRzV2l0aEFwcGxpZWRMaW1pdC5sZW5ndGggPiAwICYmIHBhcnRpY2lwYW50c0JhclBvc2l0aW9uICYmIChqc3hzKFwiZGl2XCIsIHsgcmVmOiBzZXRCdXR0b25zV3JhcHBlckVsZW1lbnQsIGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NwZWFrZXItbGF5b3V0X19wYXJ0aWNpcGFudHMtYmFyLWJ1dHRvbnMtd3JhcHBlclwiLCBjaGlsZHJlbjogW2pzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NwZWFrZXItbGF5b3V0X19wYXJ0aWNpcGFudHMtYmFyLXdyYXBwZXJcIiwgcmVmOiBzZXRQYXJ0aWNpcGFudHNCYXJXcmFwcGVyRWxlbWVudCwgY2hpbGRyZW46IGpzeHMoXCJkaXZcIiwgeyByZWY6IHNldFBhcnRpY2lwYW50c0JhckVsZW1lbnQsIGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NwZWFrZXItbGF5b3V0X19wYXJ0aWNpcGFudHMtYmFyXCIsIGNoaWxkcmVuOiBbaXNTcGVha2VyU2NyZWVuU2hhcmluZyAmJiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fc3BlYWtlci1sYXlvdXRfX3BhcnRpY2lwYW50LXRpbGVcIiwgY2hpbGRyZW46IGpzeChQYXJ0aWNpcGFudFZpZXcsIHsgcGFydGljaXBhbnQ6IHBhcnRpY2lwYW50SW5TcG90bGlnaHQsIFBhcnRpY2lwYW50Vmlld1VJOiBQYXJ0aWNpcGFudFZpZXdVSUJhciwgVmlkZW9QbGFjZWhvbGRlcjogVmlkZW9QbGFjZWhvbGRlciwgbXV0ZUF1ZGlvOiB0cnVlIH0pIH0sIHBhcnRpY2lwYW50SW5TcG90bGlnaHQuc2Vzc2lvbklkKSksIHBhcnRpY2lwYW50c1dpdGhBcHBsaWVkTGltaXQubWFwKChwYXJ0aWNpcGFudCkgPT4gKGpzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NwZWFrZXItbGF5b3V0X19wYXJ0aWNpcGFudC10aWxlXCIsIGNoaWxkcmVuOiBqc3goUGFydGljaXBhbnRWaWV3LCB7IHBhcnRpY2lwYW50OiBwYXJ0aWNpcGFudCwgUGFydGljaXBhbnRWaWV3VUk6IFBhcnRpY2lwYW50Vmlld1VJQmFyLCBWaWRlb1BsYWNlaG9sZGVyOiBWaWRlb1BsYWNlaG9sZGVyLCBtdXRlQXVkaW86IHRydWUgfSkgfSwgcGFydGljaXBhbnQuc2Vzc2lvbklkKSkpXSB9KSB9KSwgaXNWZXJ0aWNhbCAmJiAoanN4KFZlcnRpY2FsU2Nyb2xsQnV0dG9ucywgeyBzY3JvbGxXcmFwcGVyOiBwYXJ0aWNpcGFudHNCYXJXcmFwcGVyRWxlbWVudCB9KSksIGlzSG9yaXpvbnRhbCAmJiAoanN4KEhvcml6b250YWxTY3JvbGxCdXR0b25zLCB7IHNjcm9sbFdyYXBwZXI6IHBhcnRpY2lwYW50c0JhcldyYXBwZXJFbGVtZW50IH0pKV0gfSkpXSB9KV0gfSkpO1xufTtcblNwZWFrZXJMYXlvdXQuZGlzcGxheU5hbWUgPSAnU3BlYWtlckxheW91dCc7XG5jb25zdCBIb3Jpem9udGFsU2Nyb2xsQnV0dG9ucyA9ICh7IHNjcm9sbFdyYXBwZXIsIH0pID0+IHtcbiAgICBjb25zdCBzY3JvbGxQb3NpdGlvbiA9IHVzZUhvcml6b250YWxTY3JvbGxQb3NpdGlvbihzY3JvbGxXcmFwcGVyKTtcbiAgICBjb25zdCBzY3JvbGxTdGFydENsaWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgc2Nyb2xsV3JhcHBlcj8uc2Nyb2xsQnkoeyBsZWZ0OiAtMTUwLCBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XG4gICAgfTtcbiAgICBjb25zdCBzY3JvbGxFbmRDbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgIHNjcm9sbFdyYXBwZXI/LnNjcm9sbEJ5KHsgbGVmdDogMTUwLCBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gKGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtzY3JvbGxQb3NpdGlvbiAmJiBzY3JvbGxQb3NpdGlvbiAhPT0gJ3N0YXJ0JyAmJiAoanN4KEljb25CdXR0b24sIHsgb25DbGljazogc2Nyb2xsU3RhcnRDbGlja0hhbmRsZXIsIGljb246IFwiY2FyZXQtbGVmdFwiLCBjbGFzc05hbWU6IFwic3RyLXZpZGVvX19zcGVha2VyLWxheW91dF9fcGFydGljaXBhbnRzLWJhci0tYnV0dG9uLWxlZnRcIiB9KSksIHNjcm9sbFBvc2l0aW9uICYmIHNjcm9sbFBvc2l0aW9uICE9PSAnZW5kJyAmJiAoanN4KEljb25CdXR0b24sIHsgb25DbGljazogc2Nyb2xsRW5kQ2xpY2tIYW5kbGVyLCBpY29uOiBcImNhcmV0LXJpZ2h0XCIsIGNsYXNzTmFtZTogXCJzdHItdmlkZW9fX3NwZWFrZXItbGF5b3V0X19wYXJ0aWNpcGFudHMtYmFyLS1idXR0b24tcmlnaHRcIiB9KSldIH0pKTtcbn07XG5jb25zdCBWZXJ0aWNhbFNjcm9sbEJ1dHRvbnMgPSAoeyBzY3JvbGxXcmFwcGVyLCB9KSA9PiB7XG4gICAgY29uc3Qgc2Nyb2xsUG9zaXRpb24gPSB1c2VWZXJ0aWNhbFNjcm9sbFBvc2l0aW9uKHNjcm9sbFdyYXBwZXIpO1xuICAgIGNvbnN0IHNjcm9sbFRvcENsaWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgc2Nyb2xsV3JhcHBlcj8uc2Nyb2xsQnkoeyB0b3A6IC0xNTAsIGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHNjcm9sbEJvdHRvbUNsaWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgc2Nyb2xsV3JhcHBlcj8uc2Nyb2xsQnkoeyB0b3A6IDE1MCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIChqc3hzKEZyYWdtZW50LCB7IGNoaWxkcmVuOiBbc2Nyb2xsUG9zaXRpb24gJiYgc2Nyb2xsUG9zaXRpb24gIT09ICd0b3AnICYmIChqc3goSWNvbkJ1dHRvbiwgeyBvbkNsaWNrOiBzY3JvbGxUb3BDbGlja0hhbmRsZXIsIGljb246IFwiY2FyZXQtdXBcIiwgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fc3BlYWtlci1sYXlvdXRfX3BhcnRpY2lwYW50cy1iYXItLWJ1dHRvbi10b3BcIiB9KSksIHNjcm9sbFBvc2l0aW9uICYmIHNjcm9sbFBvc2l0aW9uICE9PSAnYm90dG9tJyAmJiAoanN4KEljb25CdXR0b24sIHsgb25DbGljazogc2Nyb2xsQm90dG9tQ2xpY2tIYW5kbGVyLCBpY29uOiBcImNhcmV0LWRvd25cIiwgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fc3BlYWtlci1sYXlvdXRfX3BhcnRpY2lwYW50cy1iYXItLWJ1dHRvbi1ib3R0b21cIiB9KSldIH0pKTtcbn07XG5cbmNvbnN0IExpdmVzdHJlYW1QbGF5ZXIgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGNhbGxUeXBlLCBjYWxsSWQsIGxheW91dFByb3BzIH0gPSBwcm9wcztcbiAgICBjb25zdCBjbGllbnQgPSB1c2VTdHJlYW1WaWRlb0NsaWVudCgpO1xuICAgIGNvbnN0IFtjYWxsLCBzZXRDYWxsXSA9IHVzZVN0YXRlKCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFjbGllbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IG15Q2FsbCA9IGNsaWVudC5jYWxsKGNhbGxUeXBlLCBjYWxsSWQpO1xuICAgICAgICBzZXRDYWxsKG15Q2FsbCk7XG4gICAgICAgIG15Q2FsbC5qb2luKCkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBqb2luIGNhbGwnLCBlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBteUNhbGwubGVhdmUoKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsZWF2ZSBjYWxsJywgZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldENhbGwodW5kZWZpbmVkKTtcbiAgICAgICAgfTtcbiAgICB9LCBbY2FsbElkLCBjYWxsVHlwZSwgY2xpZW50XSk7XG4gICAgcmV0dXJuIChqc3goU3RyZWFtQ2FsbCwgeyBjYWxsOiBjYWxsLCBjaGlsZHJlbjoganN4KExpdmVzdHJlYW1MYXlvdXQsIHsgLi4ubGF5b3V0UHJvcHMgfSkgfSkpO1xufTtcblxuY29uc3QgW21ham9yLCBtaW5vciwgcGF0Y2hdID0gKFwiMS4yLjIzXCIgKS5zcGxpdCgnLicpO1xuc2V0U2RrSW5mbyh7XG4gICAgdHlwZTogU2Z1TW9kZWxzLlNka1R5cGUuUkVBQ1QsXG4gICAgbWFqb3IsXG4gICAgbWlub3IsXG4gICAgcGF0Y2gsXG59KTtcblxuZXhwb3J0IHsgQWNjZXB0Q2FsbEJ1dHRvbiwgQXVkaW8sIEF2YXRhciwgQXZhdGFyRmFsbGJhY2ssIEJhY2tncm91bmRGaWx0ZXJzUHJvdmlkZXIsIEJhc2VWaWRlbywgQ2FsbENvbnRyb2xzLCBDYWxsUGFydGljaXBhbnRMaXN0aW5nLCBDYWxsUGFydGljaXBhbnRMaXN0aW5nSXRlbSwgQ2FsbFBhcnRpY2lwYW50c0xpc3QsIENhbGxQcmV2aWV3LCBDYWxsUmVjb3JkaW5nTGlzdCwgQ2FsbFJlY29yZGluZ0xpc3RIZWFkZXIsIENhbGxSZWNvcmRpbmdMaXN0SXRlbSwgQ2FsbFN0YXRzLCBDYWxsU3RhdHNCdXR0b24sIENhbGxTdGF0c0xhdGVuY3lDaGFydCwgQ2FuY2VsQ2FsbEJ1dHRvbiwgQ2FuY2VsQ2FsbENvbmZpcm1CdXR0b24sIENvbXBvc2l0ZUJ1dHRvbiwgRGVmYXVsdFBhcnRpY2lwYW50Vmlld1VJLCBEZWZhdWx0UmVhY3Rpb25zTWVudSwgRGVmYXVsdFNjcmVlblNoYXJlT3ZlcmxheSwgRGVmYXVsdFZpZGVvUGxhY2Vob2xkZXIsIERldmljZVNlbGVjdG9yLCBEZXZpY2VTZWxlY3RvckF1ZGlvSW5wdXQsIERldmljZVNlbGVjdG9yQXVkaW9PdXRwdXQsIERldmljZVNlbGVjdG9yVmlkZW8sIERldmljZVNldHRpbmdzLCBEcm9wRG93blNlbGVjdCwgRHJvcERvd25TZWxlY3RPcHRpb24sIEVtcHR5Q2FsbFJlY29yZGluZ0xpc3RpbmcsIEdlbmVyaWNNZW51LCBHZW5lcmljTWVudUJ1dHRvbkl0ZW0sIEljb24sIEljb25CdXR0b24sIExpdmVzdHJlYW1MYXlvdXQsIExpdmVzdHJlYW1QbGF5ZXIsIExvYWRpbmdDYWxsUmVjb3JkaW5nTGlzdGluZywgTG9hZGluZ0luZGljYXRvciwgTWVudVRvZ2dsZSwgTWVudVZpc3VhbFR5cGUsIE5vaXNlQ2FuY2VsbGF0aW9uUHJvdmlkZXIsIE5vdGlmaWNhdGlvbiwgUGFnaW5hdGVkR3JpZExheW91dCwgUGFydGljaXBhbnRBY3Rpb25zQ29udGV4dE1lbnUsIFBhcnRpY2lwYW50RGV0YWlscywgUGFydGljaXBhbnRWaWV3LCBQYXJ0aWNpcGFudFZpZXdDb250ZXh0LCBQYXJ0aWNpcGFudHNBdWRpbywgUGVybWlzc2lvbk5vdGlmaWNhdGlvbiwgUGVybWlzc2lvblJlcXVlc3RMaXN0LCBQZXJtaXNzaW9uUmVxdWVzdHMsIFJlYWN0aW9uc0J1dHRvbiwgUmVjb3JkQ2FsbEJ1dHRvbiwgUmVjb3JkQ2FsbENvbmZpcm1hdGlvbkJ1dHRvbiwgUmVjb3JkaW5nSW5Qcm9ncmVzc05vdGlmaWNhdGlvbiwgUmluZ2luZ0NhbGwsIFJpbmdpbmdDYWxsQ29udHJvbHMsIFNjcmVlblNoYXJlQnV0dG9uLCBTZWFyY2hJbnB1dCwgU2VhcmNoUmVzdWx0cywgU3BlYWtlckxheW91dCwgU3BlYWtpbmdXaGlsZU11dGVkTm90aWZpY2F0aW9uLCBTcGVlY2hJbmRpY2F0b3IsIFN0YXRDYXJkLCBTdGF0Q2FyZEV4cGxhbmF0aW9uLCBTdGF0c1RhZywgU3RhdHVzZXMsIFN0cmVhbUNhbGwsIFN0cmVhbVRoZW1lLCBTdHJlYW1WaWRlbywgVGV4dEJ1dHRvbiwgVG9nZ2xlQXVkaW9PdXRwdXRCdXR0b24sIFRvZ2dsZUF1ZGlvUHJldmlld0J1dHRvbiwgVG9nZ2xlQXVkaW9QdWJsaXNoaW5nQnV0dG9uLCBUb2dnbGVWaWRlb1ByZXZpZXdCdXR0b24sIFRvZ2dsZVZpZGVvUHVibGlzaGluZ0J1dHRvbiwgVG9vbHRpcCwgVmlkZW8kMSBhcyBWaWRlbywgVmlkZW9QcmV2aWV3LCBXaXRoVG9vbHRpcCwgZGVmYXVsdFJlYWN0aW9ucywgdHJhbnNsYXRpb25zLCB1c2VCYWNrZ3JvdW5kRmlsdGVycywgdXNlSG9yaXpvbnRhbFNjcm9sbFBvc2l0aW9uLCB1c2VNZW51Q29udGV4dCwgdXNlTm9pc2VDYW5jZWxsYXRpb24sIHVzZVBhcnRpY2lwYW50Vmlld0NvbnRleHQsIHVzZVBlcnNpc3RlZERldmljZVByZWZlcmVuY2VzLCB1c2VSZXF1ZXN0UGVybWlzc2lvbiwgdXNlVHJhY2tFbGVtZW50VmlzaWJpbGl0eSwgdXNlVmVydGljYWxTY3JvbGxQb3NpdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css":
/*!*********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/css/styles.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"6726bac0cc5d\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9jc3Mvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtLWlvL3ZpZGVvLXJlYWN0LXNkay9kaXN0L2Nzcy9zdHlsZXMuY3NzP2UwNDQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI2NzI2YmFjMGNjNWRcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css":
/*!*********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/css/styles.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"6726bac0cc5d\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9jc3Mvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtLWlvL3ZpZGVvLXJlYWN0LXNkay9kaXN0L2Nzcy9zdHlsZXMuY3NzP2Y5ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI2NzI2YmFjMGNjNWRcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css\n");

/***/ })

};
;